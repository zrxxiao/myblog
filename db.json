{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","path":"css/indexcover.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/post.css","path":"css/post.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/reward.css","path":"css/reward.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.js","path":"libs/prism/prism.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism_new.css","path":"libs/prism/prism_new.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"aeb21225d3eab91e2d1b8d695bfc5f153929bfcd","modified":1739114419069},{"_id":"source/_data/friends.json","hash":"519916312399331fdcee1d72ee4cef6b284908fb","modified":1739114419069},{"_id":"source/about/index.md","hash":"29056a7aa5b9f6bec0906339ab4a3a3e078b8bbc","modified":1739114419074},{"_id":"source/categories/index.md","hash":"5c56dd0143a4cd792e2d04a07df19d7d94d9dd2e","modified":1739114419075},{"_id":"source/friends/index.md","hash":"c74067bebb44f03cf71344307236e9822a781b46","modified":1739114419075},{"_id":"source/_posts/PAT Basic Level/1001 害死人不偿命的(3n+1)猜想.md","hash":"4df2e4369415a90193826d21b6d0c20460fb3224","modified":1739114419070},{"_id":"source/contact/index.md","hash":"aa97db9b46a71164706a51a7ffc800989171eb0b","modified":1739114419075},{"_id":"source/tags/index.md","hash":"4dfbaae684ade6f35dff814ef023d18777644175","modified":1739114419075},{"_id":"source/_posts/PAT Basic Level/1002 写出这个数.md","hash":"ed003bb58cf577fde2e834f0ddef43e5bd8f11e3","modified":1739114419070},{"_id":"source/_posts/PAT Basic Level/1003 我要通过.md","hash":"73fb882fd98bdfb1cc7c3512b8a4bc4cb90eae1f","modified":1739114419070},{"_id":"source/_posts/PAT Basic Level/1004 成绩排名.md","hash":"6b5f71b4d2155005276bfe403732ffbf0c50d7d9","modified":1739114419070},{"_id":"source/_posts/PAT Basic Level/1005 继续(3n+1)猜想.md","hash":"518923e92763bc935059a442cf093a670c49aa91","modified":1739114419070},{"_id":"source/_posts/PAT Basic Level/1006 换个格式输出整数.md","hash":"750bd06636b7780d0db62e869251e7a0e9337537","modified":1739114419071},{"_id":"source/_posts/PAT Basic Level/1008 数组元素循环右移问题.md","hash":"22e3e5c7dfca323525a3d6dd6ffa5aa4ad6cbfbb","modified":1739114419071},{"_id":"source/_posts/PAT Basic Level/1007 素数对猜想.md","hash":"e9aedf80c4dbd762a2c3fb3aa9ca997bae79f699","modified":1739114419071},{"_id":"source/_posts/PAT Basic Level/1009 说反话.md","hash":"88fde589604e86b6a6f3fa7e28a1c80c592758dc","modified":1739114419071},{"_id":"source/_posts/PAT Basic Level/1010 一元多项式求导.md","hash":"4f155d0bc25ea32add2b1771064f24a49f4bb51f","modified":1739114419071},{"_id":"source/_posts/PAT Basic Level/1011 A+B 和 C.md","hash":"f28e0f138968965a2813d7a2ce8f555cdb088e64","modified":1739114419072},{"_id":"source/_posts/PAT Basic Level/1012 数字分类.md","hash":"3d9f0489f3b8545fc77ddaba93612a576d7dac96","modified":1739114419072},{"_id":"source/_posts/PAT Basic Level/1013 数素数.md","hash":"a432950e5576024099e651213a2958c1e2dfcdf1","modified":1739114419072},{"_id":"source/_posts/PAT Basic Level/1015 德才论.md","hash":"c97121cfcecda4aa0d2a96b428da4931183b49a0","modified":1739114419072},{"_id":"source/_posts/PAT Basic Level/1014 福尔摩斯的约会.md","hash":"ef192d12fdc9dc748532e7df75037e0f24d5ce83","modified":1739114419072},{"_id":"source/_posts/linux驱动 alsa模型/1_ALSA架构简介.md","hash":"6cba88ef4832db28ff775b300a2bb84f41adff5a","modified":1739114419073},{"_id":"source/_posts/动手写操作系统/2_搭建环境.md","hash":"27d8a29d2085989ce24414ecb147e7a7d8b38be6","modified":1739114419073},{"_id":"source/_posts/PAT Basic Level/模板.md","hash":"41626f090d3992f38a18972a5e046a54ba076e7b","modified":1739114419072},{"_id":"source/_posts/动手写操作系统/3_保护模式_part1.md","hash":"8625eb84a9a5edb044df10acc7e37f39c38ca271","modified":1739114419074},{"_id":"source/_posts/linux驱动 alsa模型/1_ALSA架构简介/alsa.png","hash":"70001396deb9cbea1aa028a751a3e2ac7831c82b","modified":1739114419073},{"_id":"source/_posts/动手写操作系统/2_搭建环境/Capture.png","hash":"11a0826b25afa94463e843ba7866b3e3cc98ff1b","modified":1739114419074},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1739116784458},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1739116784458},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"97e12f438d3010d7957b9d1e8bff3346aeeab742","modified":1739116784459},{"_id":"themes/hexo-theme-matery/README.md","hash":"6d8bcedba15ca33f2ed4ac2804b1df3ff8f21e0a","modified":1739116784459},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"f5c69f3e107474da19630e136abed5d87609e59f","modified":1739116784460},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1739116784458},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1739116784460},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"c6de0de68bdc75a8a905787a0526b70ee9821da8","modified":1739116784460},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"a5acb23da00972dab40f59418d28d384012e93a3","modified":1739116784460},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"4d2bb286d9903f770344e11898bd3f13444760bf","modified":1739116784461},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1739116784472},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"c3d2849348bd52fab85b38040818b429057d3101","modified":1739116784460},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"626d28dbc7fa2e0fb6601e324dcad08993bcf002","modified":1739116784472},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1739116784473},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1739116784473},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1739116784473},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1739116784473},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1739116784474},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"7e92c983794c5c4a2b16eca2452eb187316262ef","modified":1739116784473},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"eb3875f997767bc6c500a158535cfadcbca96f8f","modified":1739116784474},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1739116784474},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"c170d2e1413c9b89863effd4e0a26c413c633a71","modified":1739116784474},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1739116784474},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1739116784474},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"444ecca1cb35bad81b063f1d7cb9fd80ead195dd","modified":1739116784475},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1739116784475},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1739116784475},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1739116784478},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"18415c69461d706cf8039580cc79d00c029c637c","modified":1739116784475},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1739116784475},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"98e7c48678c69f089d0d42f6d005c83265e9f400","modified":1739116784475},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1739116784461},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"442c710d69892eb56d3d257cf4c2e195e6913eea","modified":1739116784461},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1739116784461},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1739116784461},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"8d6d4ac4bf6bfd3c7f4ffc534711fcdacc6711c0","modified":1739116784462},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1739116784462},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1739116784462},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1739116784462},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"a924658cbc1a1aeafe9fa455b08bd495071285a1","modified":1739116784463},{"_id":"themes/hexo-theme-matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1739116784463},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1739116784463},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"96a20785870b24c4e307d49a3b27c5077437743a","modified":1739116784463},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1739116784464},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1739116784464},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1739116784464},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1739116784464},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"e10a37e82a4fc9c806025ad791e82c3b22fdfa4d","modified":1739116784464},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1739116784464},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"c6ad79f25fdd038df06aaaead4b9e45f8078e34a","modified":1739116784465},{"_id":"themes/hexo-theme-matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1739116784465},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1739116784465},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"e1264587db510ae1885405aed433592291ae74c4","modified":1739116424157},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"c9ce806110db632d29bdb0eea3b55b1fb4b1aff3","modified":1739116784465},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"f3d6b20ac07f1b096c5cf0b091523867fd4fd0b5","modified":1739116784465},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1739116784466},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1739116784466},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"05ac5b4df05e80e3123e464e7df2dfc589b0bbd2","modified":1739116784466},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1739116784466},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1739116784467},{"_id":"themes/hexo-theme-matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1739116784466},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"3590cebe5d6729300f2ac83ff9e0ceceb66da4b9","modified":1739116784466},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1739116784467},{"_id":"themes/hexo-theme-matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1739116784467},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ab6de30729d48669476372ccd4aefa7e15d92c38","modified":1739116784467},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1739116784467},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1739116784468},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1739116784468},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"d1d7c4da3d56f42541eea965a6ebf1f8e2fff0f4","modified":1739116784468},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"5ee3ade52bc7494226ed30e7dd4531d1d91ca67c","modified":1739116784468},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1739116784469},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"beb3044890bfe7cfd26328565da4f8f955563424","modified":1739116784469},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1739116784470},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1739116784469},{"_id":"themes/hexo-theme-matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1739116784470},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1739116784470},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"d84f2f464209f02f49917423ac5accf1c548f38c","modified":1739116784470},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1739116784470},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1739116784471},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1739116784471},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1739116784471},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1739116784471},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1739116784471},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1739116784472},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1739116784472},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1739116784472},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"c2f785f4986d6ed1da0d1f2cd339f33754625004","modified":1739116784472},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"f59b2f1351d7977b676a4d51634b7dad648d3e99","modified":1739116784476},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1739116784476},{"_id":"themes/hexo-theme-matery/source/css/dark.css","hash":"541bc0b481beee921c62d0e84b61b124c95d2d01","modified":1739116784476},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1739116784476},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1739116784477},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","hash":"00f4f498ae8514022004f2281cab8ff304cd0f37","modified":1739116784477},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"36d90a4b90df89c8fdc588203e394903b11747c8","modified":1739116784477},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1739116784477},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1739116784478},{"_id":"themes/hexo-theme-matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1739116784478},{"_id":"themes/hexo-theme-matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1739116784478},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1739116784479},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"8db5b764f940614a209a332a4a11a53e5ea52fbc","modified":1739116784479},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"713eca7dcc8d4d02a03652367abc1afcc74e6c75","modified":1739116784479},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"72fac8fd3671f3525a574423985ee522958989d3","modified":1739116784480},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","hash":"8ab118a6f3e115efb50283c0fe408ad91ce7021b","modified":1739116784480},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1739116784537},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1739116784544},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1739116784556},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1739116784561},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1739116784480},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1739116784480},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1739116784481},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1739116784481},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"ff60e62a9486505283582e8ad9226b35ba93d5c5","modified":1739116784481},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1739116784490},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1739116784481},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1739116784490},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1739116784490},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1739116784490},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1739116784491},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1739116784491},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1739116784491},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1739116784491},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1739116784492},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1739116784492},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1739116784497},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"4c0d5510ea487b0fe63e96464ab0b381565cc273","modified":1739116784497},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1739116784500},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1739116784501},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1739116784501},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1739116784501},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1739116784502},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1739116784502},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"137e1c0f71e472fb7004c1832972287fb2dfc343","modified":1739116784506},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1739116784521},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1739116784525},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1739116784525},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1739116784525},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1739116784525},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1739116784526},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1739116784526},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1739116784526},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1739116784526},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"07b1e7932403b38aebb1c024ef3c3f5bb0c6aa2e","modified":1739116784526},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"1ddc9448fbba8915f9452b4f0a970f33635e46a7","modified":1739116784527},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"f48db880f583ad8d078ebaaa7afe60c2991e2997","modified":1739116424196},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.js","hash":"84db754edf4ced1f8b18c62d8778cf66200cd593","modified":1739116424196},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"1aec6cfcbf8c833f728b8736060fe5690e19d92f","modified":1739116784527},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism_new.css","hash":"6654facbe1ec3932cd1d021bcca9aa32829369ce","modified":1739116424196},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1739116784529},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1739116784532},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1739116784532},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1739116784534},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eceb98f80392cb57df1af5b160d85924f69fb2e0","modified":1739116784534},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1739116784543},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1739116784543},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1739116784544},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1739116784544},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1739116784546},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1739116784548},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1739116784549},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1739116784550},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1739116784551},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1739116784552},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1739116784553},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1739116784553},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1739116784553},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1739116784554},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1739116784555},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1739116784555},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1739116784561},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1739116784561},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1739116424175},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1739116784485},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1739116424176},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1739116784486},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1739116784489},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1739116784490},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1739116784503},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1739116784503},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1739116424192},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1739116784503},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1739116784503},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1739116784504},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1739116784504},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1739116784505},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1739116784505},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1739116784530},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"c55278b00976c96e1df949ca5afee79b8ab385b2","modified":1739116784505},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1739116784530},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1739116784530},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1739116784531},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1739116784531},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1739116784531},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1739116784531},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1739116784497},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1739116784500},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1739116424191},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1739116784502},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1739116784538},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1739116784540},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1739116784540},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1739116784545},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1739116784546},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1739116784547},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1739116784547},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1739116784548},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1739116784550},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1739116784551},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1739116784550},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1739116784552},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1739116784554},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1739116784555},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1739116784556},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1739116424169},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1739116424173},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"6ceed6950e44336bb51f1b19d4658e4324afcebd","modified":1739116784483},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1739116784485},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1739116424183},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1739116784545},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"104613de917a8576ff26aaa36d1c0c7bb4730f4e","modified":1739116784492},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"39900eba9a277f1e21080781ecfe2c3d1df50050","modified":1739116784507},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"7b49078d6297002fcb3e9a40381756b7079fdf8c","modified":1739116784508},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"c2f2b1b0346e28ceae19f4b3d174f033311aa060","modified":1739116784535},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"3a17de5f24e0437c3c681b15f147ceef3980736f","modified":1739116784537},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1739116784539},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1739116784542},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1739116784543},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1739116784559},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"9a8303b1c6334e2500da617810206ece45a8ac6b","modified":1739116784482},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1739116784484},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1739116424175},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1739116424178},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1739116784489},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1739116784479},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"e47dd1412564cd6aacc4e0a596fd83074a747870","modified":1739116784536},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1739116784541},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1739116784560},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1739116784488},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"d1ec95821873a81eddf4e5698698b39d54d2a8cc","modified":1739116784534},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"80063546f828243e2345670701656b735fc3ead8","modified":1739116784529},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1739116784558},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1739116424171},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1739116784496},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"1df59d7e5481ac2917c7043b28883393675dcaf9","modified":1739116784500},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1739116424180},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"5755d222f96a897b9f509d2859be21996a3dbfd0","modified":1739116784524},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"3889e37cafaaace5e745ccd3e10c9255e32cae3a","modified":1739116784520},{"_id":"public/categories/index.html","hash":"1631785c822f50908fa5b0e2655414112839c684","modified":1739116851853},{"_id":"public/404/index.html","hash":"0793a5f370470e4d26ee9cc83754c25c37395b5c","modified":1739116851853},{"_id":"public/about/index.html","hash":"4e187e2513abfb45c33199c6165b84fbb7fb7899","modified":1739116851853},{"_id":"public/contact/index.html","hash":"ac19e55aed89413c65a0380099b226d87bf0ef9c","modified":1739116851853},{"_id":"public/friends/index.html","hash":"5d8b19e0a23ebad4f2978b84c5fa837cc4c60bf1","modified":1739116851853},{"_id":"public/tags/index.html","hash":"b3c8c10e7cb5667711f908cdd33f138781937013","modified":1739116851853},{"_id":"public/2025/02/09/动手写操作系统/3_保护模式_part1/index.html","hash":"5036071d043cef5a7cb956f6c886cea3bfea5eff","modified":1739116851853},{"_id":"public/2025/02/09/动手写操作系统/2_搭建环境/index.html","hash":"98739c685a83340faef7d543bd57c7ef44f8e399","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/模板/index.html","hash":"1a1b882e80b2ea3583421f4036399cead58cd670","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1015 德才论/index.html","hash":"91891da6ed8855f3c566d05036db78e7962f49dc","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1014 福尔摩斯的约会/index.html","hash":"8e54b26dad4729590c831d170ed88f238536c742","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1013 数素数/index.html","hash":"b68fbafc780181e4f334d91d0f278f44def0de1f","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1012 数字分类/index.html","hash":"9bdc559d711b7887cd2701cfa7e579bbadd3bd66","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1011 A+B 和 C/index.html","hash":"2d937bb32b246625b44b8c216fccc8eab53746d9","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1010 一元多项式求导/index.html","hash":"06c98bcaf008a2f46778d7d9c96f00c28deb172f","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1009 说反话/index.html","hash":"a0e47840498b33d5d58a0af96da1db17ad977dc8","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1008 数组元素循环右移问题/index.html","hash":"9f513d0c56f8fbe6bc0aa810c6de46198d182a80","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1007 素数对猜想/index.html","hash":"a63f9a7a2c4dd75d102ea7993521d1de8a1e7af7","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1006 换个格式输出整数/index.html","hash":"861e81a9989f846fcd0ceae9488dbff51e83a09c","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1005 继续(3n+1)猜想/index.html","hash":"cecfebf3670fdfd7245b5f0406422f8dfe0045e8","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1004 成绩排名/index.html","hash":"9909281ff9c2043658dd85c3b633979666c61ea3","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1003 我要通过/index.html","hash":"76c0bb197880dd587201674b86f8f06dc6b9c473","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1002 写出这个数/index.html","hash":"619e3b072798ba2580d7df6261da2e425672573c","modified":1739116851853},{"_id":"public/2025/02/09/PAT Basic Level/1001 害死人不偿命的(3n+1)猜想/index.html","hash":"56b3f4a9de9118b95ecbf8cb2499329101c89bb4","modified":1739116851853},{"_id":"public/2025/02/09/linux驱动 alsa模型/1_ALSA架构简介/index.html","hash":"2fd1fff5ed4c8e6b73c07698efc3ccfd128e3319","modified":1739116851853},{"_id":"public/archives/index.html","hash":"0ea5e102ff6c3c8a88dff911e205287995237d71","modified":1739116851853},{"_id":"public/archives/page/2/index.html","hash":"24b28ee5e7b8f43e6331db673db938cf0ab5752a","modified":1739116851853},{"_id":"public/archives/2025/index.html","hash":"f43e0627f25b9462d3c5d7b579ead0f2b2b80370","modified":1739116851853},{"_id":"public/archives/2025/page/2/index.html","hash":"cc6b0103dc9ff30c2b0fd15fffdef98036de218a","modified":1739116851853},{"_id":"public/archives/2025/02/index.html","hash":"c885f01035df89c20f6da1a142c4cc03481c65d9","modified":1739116851853},{"_id":"public/archives/2025/02/page/2/index.html","hash":"777f1f93aec50df481ac139e612cfb9b41466107","modified":1739116851853},{"_id":"public/categories/PAT-Basic-Level/index.html","hash":"2ff888dee43ab150d2d98e9f0e4f24603172a10c","modified":1739116851853},{"_id":"public/categories/PAT-Basic-Level/page/2/index.html","hash":"76b91051f578c72b53a86126f8e34cca35d6844b","modified":1739116851853},{"_id":"public/categories/linux驱动-alsa模型/index.html","hash":"c768d8ef458371a1cccf7d48a45cb4fe2ee1ec0f","modified":1739116851853},{"_id":"public/categories/动手写操作系统/index.html","hash":"662613baca246cb06689a3ffcd1f142b9e9ee9f1","modified":1739116851853},{"_id":"public/tags/PAT/page/2/index.html","hash":"2f91a5b1201f2c9071a0abf691b50261a901c159","modified":1739116851853},{"_id":"public/tags/c/index.html","hash":"68169a3866fae675f6e0ab30208a19b69d6bc7b9","modified":1739116851853},{"_id":"public/tags/alsa/index.html","hash":"b30e3198047f3420d60ccc83c6b31fd0ec85e057","modified":1739116851853},{"_id":"public/tags/汇编/index.html","hash":"53b3f3810126a7ef38e8997bc7a48d738f24918a","modified":1739116851853},{"_id":"public/tags/操作系统/index.html","hash":"871dd16cac38d66cb1d5917ea9eb80f6ea9cc17d","modified":1739116851853},{"_id":"public/tags/c/page/2/index.html","hash":"9b2b4ae5862bbf79257cb22828418cf6945c41c7","modified":1739116851853},{"_id":"public/index.html","hash":"499b3b5285a3fb57b47b0f2c68c1212b515fb5f6","modified":1739116851853},{"_id":"public/page/2/index.html","hash":"4a7402caf1fba916caf05db7d2b8d075f1db1696","modified":1739116851853},{"_id":"public/tags/PAT/index.html","hash":"d0698e5be99eceaa84e34ba76f64eec28906c575","modified":1739116851853},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1739116851853},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1739116851853},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1739116851853},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1739116851853},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1739116851853},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1739116851853},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1739116851853},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1739116851853},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1739116851853},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1739116851853},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1739116851853},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1739116851853},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1739116851853},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1739116851853},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1739116851853},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1739116851853},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1739116851853},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1739116851853},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1739116851853},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1739116851853},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1739116851853},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1739116851853},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1739116851853},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1739116851853},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1739116851853},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1739116851853},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1739116851853},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1739116851853},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1739116851853},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1739116851853},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1739116851853},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1739116851853},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1739116851853},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1739116851853},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1739116851853},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1739116851853},{"_id":"public/2025/02/09/linux驱动 alsa模型/1_ALSA架构简介/alsa.png","hash":"70001396deb9cbea1aa028a751a3e2ac7831c82b","modified":1739116851853},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1739116851853},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1739116851853},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1739116851853},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1739116851853},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1739116851853},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1739116851853},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1739116851853},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1739116851853},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1739116851853},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1739116851853},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1739116851853},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1739116851853},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1739116851853},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1739116851853},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1739116851853},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1739116851853},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1739116851853},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1739116851853},{"_id":"public/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1739116851853},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1739116851853},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1739116851853},{"_id":"public/css/indexcover.css","hash":"bd027eb8192b4d1b0dc9b4f965fa264e8437f847","modified":1739116851853},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1739116851853},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1739116851853},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1739116851853},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1739116851853},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1739116851853},{"_id":"public/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1739116851853},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1739116851853},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1739116851853},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1739116851853},{"_id":"public/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1739116851853},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1739116851853},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1739116851853},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1739116851853},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1739116851853},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1739116851853},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1739116851853},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1739116851853},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1739116851853},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1739116851853},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1739116851853},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1739116851853},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1739116851853},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1739116851853},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1739116851853},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1739116851853},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1739116851853},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1739116851853},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1739116851853},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1739116851853},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1739116851853},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1739116851853},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1739116851853},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1739116851853},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1739116851853},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1739116851853},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1739116851853},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1739116851853},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1739116851853},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1739116851853},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1739116851853},{"_id":"public/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1739116851853},{"_id":"public/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1739116851853},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1739116851853},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1739116851853},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1739116851853},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1739116851853},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1739116851853},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1739116851853},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1739116851853},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1739116851853},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1739116851853},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1739116851853},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1739116851853},{"_id":"public/libs/prism/prism.js","hash":"6dd4d6fc3fbce39323d8bcd72b3d9886cb2449e3","modified":1739116851853},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1739116851853},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1739116851853},{"_id":"public/libs/prism/prism_new.css","hash":"2f74f98bab2b1dc075eaa4ff9304c1fdde1188c0","modified":1739116851853},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1739116851853},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1739116851853},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1739116851853},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1739116851853},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1739116851853},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1739116851853},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1739116851853},{"_id":"public/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1739116851853},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1739116851853},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1739116851853},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1739116851853},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1739116851853},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1739116851853},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1739116851853},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1739116851853},{"_id":"public/2025/02/09/动手写操作系统/2_搭建环境/Capture.png","hash":"11a0826b25afa94463e843ba7866b3e3cc98ff1b","modified":1739116851853},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1739116851853},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1739116851853},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1739116851853},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1739116851853},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1739116851853},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1739116851853},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1739116851853},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1739116851853},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1739116851853},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1739116851853},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1739116851853},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1739116851853},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1739116851853},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1739116851853}],"Category":[{"name":"PAT(Basic Level)","_id":"cm6xt9rbm0004r8tk7x7da9vj"},{"name":"linux驱动 alsa模型","_id":"cm6xt9rbx001jr8tkfduqczu7"},{"name":"动手写操作系统","_id":"cm6xt9rby001sr8tk2h8bdnti"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"categories","date":"2020-12-05T03:13:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-12-05 11:13:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2025-02-09T15:20:19.075Z","path":"categories/index.html","comments":1,"_id":"cm6xt9rbh0000r8tkfzj6bt14","content":"","excerpt":"","more":""},{"title":"404","date":"2020-12-05T03:28:59.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2020-12-05 11:28:59\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2025-02-09T15:20:19.069Z","path":"404/index.html","comments":1,"_id":"cm6xt9rbl0002r8tkdr1hgeua","content":"","excerpt":"","more":""},{"title":"about","date":"2020-12-05T03:18:09.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-12-05 11:18:09\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2025-02-09T15:20:19.074Z","path":"about/index.html","comments":1,"_id":"cm6xt9rbo0006r8tkhmy01td2","content":"","excerpt":"","more":""},{"title":"contact","date":"2020-12-05T03:21:01.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-12-05 11:21:01\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2025-02-09T15:20:19.075Z","path":"contact/index.html","comments":1,"_id":"cm6xt9rbo0008r8tkhc9x0ooc","content":"","excerpt":"","more":""},{"title":"friends","date":"2020-12-05T03:26:06.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-12-05 11:26:06\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2025-02-09T15:20:19.075Z","path":"friends/index.html","comments":1,"_id":"cm6xt9rbp000ar8tkg9iwgrve","content":"","excerpt":"","more":""},{"title":"tags","date":"2020-12-05T03:15:46.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-12-05 11:15:46\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2025-02-09T15:20:19.075Z","path":"tags/index.html","comments":1,"_id":"cm6xt9rbr000er8tk9ffn811e","content":"","excerpt":"","more":""}],"Post":[{"title":"1001 害死人不偿命的(3n+1)猜想","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1001 害死人不偿命的(3n+1)猜想 (15 分)**\n\n卡拉兹(Callatz)猜想：\n\n对任何一个正整数 *n*，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3*n*+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 *n*=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3*n*+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……\n\n我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 *n*，简单地数一下，需要多少步（砍几下）才能得到 *n*=1？\n\n输入格式：\n\n每个测试输入包含 1 个测试用例，即给出正整数 *n* 的值。\n\n输出格式：\n\n输出从 *n* 计算到 1 需要的步数。\n\n输入样例：\n\n3\n\n结尾无空行\n\n输出样例：\n\n5\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint main()\n{\n\tint n, step = 0;\n \tcin >> n;\n \twhile(n != 1)\n\t{\n\t\tif (n%2 == 0)\n\t\t\tn= n/2;\n\t\telse\n\t\t\tn=(3*n+1)/2;\n\t\tstep++;\n\t}\n cout << step;\n return 0;\n}\n```\n\n","source":"_posts/PAT Basic Level/1001 害死人不偿命的(3n+1)猜想.md","raw":"---\ntitle: 1001 害死人不偿命的(3n+1)猜想\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n\n---\n\n**1001 害死人不偿命的(3n+1)猜想 (15 分)**\n\n卡拉兹(Callatz)猜想：\n\n对任何一个正整数 *n*，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3*n*+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 *n*=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3*n*+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……\n\n我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 *n*，简单地数一下，需要多少步（砍几下）才能得到 *n*=1？\n\n输入格式：\n\n每个测试输入包含 1 个测试用例，即给出正整数 *n* 的值。\n\n输出格式：\n\n输出从 *n* 计算到 1 需要的步数。\n\n输入样例：\n\n3\n\n结尾无空行\n\n输出样例：\n\n5\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint main()\n{\n\tint n, step = 0;\n \tcin >> n;\n \twhile(n != 1)\n\t{\n\t\tif (n%2 == 0)\n\t\t\tn= n/2;\n\t\telse\n\t\t\tn=(3*n+1)/2;\n\t\tstep++;\n\t}\n cout << step;\n return 0;\n}\n```\n\n","slug":"PAT Basic Level/1001 害死人不偿命的(3n+1)猜想","published":1,"date":"2025-02-09T15:24:15.842Z","updated":"2025-02-09T15:20:19.070Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbj0001r8tk1h5g5qg0","content":"<p><strong>1001 害死人不偿命的(3n+1)猜想 (15 分)</strong></p>\n<p>卡拉兹(Callatz)猜想：</p>\n<p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>&#x3D;1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>\n<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>&#x3D;1？</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p>\n<p>输出格式：</p>\n<p>输出从 <em>n</em> 计算到 1 需要的步数。</p>\n<p>输入样例：</p>\n<p>3</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>5</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, step = <span class=\"number\">0</span>;</span><br><span class=\"line\"> \tcin &gt;&gt; n;</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(n != <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n%<span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tn= n/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tn=(<span class=\"number\">3</span>*n<span class=\"number\">+1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tstep++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> cout &lt;&lt; step;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><strong>1001 害死人不偿命的(3n+1)猜想 (15 分)</strong></p>\n<p>卡拉兹(Callatz)猜想：</p>\n<p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>&#x3D;1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>\n<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>&#x3D;1？</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p>\n<p>输出格式：</p>\n<p>输出从 <em>n</em> 计算到 1 需要的步数。</p>\n<p>输入样例：</p>\n<p>3</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>5</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n, step = <span class=\"number\">0</span>;</span><br><span class=\"line\"> \tcin &gt;&gt; n;</span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(n != <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n%<span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tn= n/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tn=(<span class=\"number\">3</span>*n<span class=\"number\">+1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tstep++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> cout &lt;&lt; step;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"1003 我要通过","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1003 我要通过！ (20 分)**\n\n“**答案正确**”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“**答案正确**”大派送 —— 只要读入的字符串满足下列条件，系统就输出“**答案正确**”，否则输出“**答案错误**”。\n\n得到“**答案正确**”的条件是：\n\n1. 字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符；\n2. 任意形如 xPATx 的字符串都可以获得“**答案正确**”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；\n3. 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。\n\n现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“**答案正确**”的。\n\n输入格式：\n\n每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 *n* (<10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。\n\n输出格式：\n\n每个字符串的检测结果占一行，如果该字符串可以获得“**答案正确**”，则输出 YES，否则输出 NO。\n\n输入样例：\n\n10 PAT PAAT AAPATAA AAPAATAAAA xPATx PT Whatever APAAATAA APT APATTAA\n\n结尾无空行\n\n输出样例：\n\nYES YES YES YES NO NO NO NO NO NO\n\n结尾无空行\n\n**鸣谢江西财经大学软件学院朱政同学、用户 woluo_z 补充测试数据！**\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include <iostream>\n#include<string>\nusing namespace std;\n\n\nint judge(string s)\n{\n    int a = 0, b = 0, c = 0;\n    int num_a = 0, num_p = 0, num_t = 0;\n    for (unsigned int i= 0;i < s.length();i++)\n    {\n        if(s[i] == 'A' || s[i] == 'P' || s[i] == 'T')\n        {\n            if(s[i] == 'A')\n            {\n                num_a++;\n            }\n            else if (s[i] == 'P' && num_p == 0)\n            {\n                num_p++;\n                a = i;\n            }\n            else if (s[i] == 'T' && num_p == 1 && num_t == 0)\n            {\n                num_t++;\n                b = i -a -1;\n            }\n            else \n                return 0;\n        }\n        else\n            return 0;\n    }\n    c = num_a - a -b;\n    if(c == a * b && b >= 1)\n        return 1;\n    else \n        return 0;\n}\n\nint main()\n{\n    int n;\n    string str;\n    cin >> n;\n    while (n--)\n    {\n        cin >> str;\n        if (judge(str))\n            cout << \"YES\" << endl;\n        else\n            cout << \"NO\" << endl;\n    }\n    return 0;\n}\n```\n\n\n","source":"_posts/PAT Basic Level/1003 我要通过.md","raw":"---\ntitle: 1003 我要通过\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1003 我要通过！ (20 分)**\n\n“**答案正确**”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“**答案正确**”大派送 —— 只要读入的字符串满足下列条件，系统就输出“**答案正确**”，否则输出“**答案错误**”。\n\n得到“**答案正确**”的条件是：\n\n1. 字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符；\n2. 任意形如 xPATx 的字符串都可以获得“**答案正确**”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；\n3. 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。\n\n现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“**答案正确**”的。\n\n输入格式：\n\n每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 *n* (<10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。\n\n输出格式：\n\n每个字符串的检测结果占一行，如果该字符串可以获得“**答案正确**”，则输出 YES，否则输出 NO。\n\n输入样例：\n\n10 PAT PAAT AAPATAA AAPAATAAAA xPATx PT Whatever APAAATAA APT APATTAA\n\n结尾无空行\n\n输出样例：\n\nYES YES YES YES NO NO NO NO NO NO\n\n结尾无空行\n\n**鸣谢江西财经大学软件学院朱政同学、用户 woluo_z 补充测试数据！**\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include <iostream>\n#include<string>\nusing namespace std;\n\n\nint judge(string s)\n{\n    int a = 0, b = 0, c = 0;\n    int num_a = 0, num_p = 0, num_t = 0;\n    for (unsigned int i= 0;i < s.length();i++)\n    {\n        if(s[i] == 'A' || s[i] == 'P' || s[i] == 'T')\n        {\n            if(s[i] == 'A')\n            {\n                num_a++;\n            }\n            else if (s[i] == 'P' && num_p == 0)\n            {\n                num_p++;\n                a = i;\n            }\n            else if (s[i] == 'T' && num_p == 1 && num_t == 0)\n            {\n                num_t++;\n                b = i -a -1;\n            }\n            else \n                return 0;\n        }\n        else\n            return 0;\n    }\n    c = num_a - a -b;\n    if(c == a * b && b >= 1)\n        return 1;\n    else \n        return 0;\n}\n\nint main()\n{\n    int n;\n    string str;\n    cin >> n;\n    while (n--)\n    {\n        cin >> str;\n        if (judge(str))\n            cout << \"YES\" << endl;\n        else\n            cout << \"NO\" << endl;\n    }\n    return 0;\n}\n```\n\n\n","slug":"PAT Basic Level/1003 我要通过","published":1,"date":"2025-02-09T15:24:15.844Z","updated":"2025-02-09T15:20:19.070Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbl0003r8tk2e5c2q70","content":"<p><strong>1003 我要通过！ (20 分)</strong></p>\n<p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p>\n<p>得到“<strong>答案正确</strong>”的条件是：</p>\n<ol>\n<li>字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符；</li>\n<li>任意形如 xPATx 的字符串都可以获得“<strong>答案正确</strong>”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；</li>\n<li>如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。</li>\n</ol>\n<p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p>\n<p>输出格式：</p>\n<p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 YES，否则输出 NO。</p>\n<p>输入样例：</p>\n<p>10 PAT PAAT AAPATAA AAPAATAAAA xPATx PT Whatever APAAATAA APT APATTAA</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>YES YES YES YES NO NO NO NO NO NO</p>\n<p>结尾无空行</p>\n<p><strong>鸣谢江西财经大学软件学院朱政同学、用户 woluo_z 补充测试数据！</strong></p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">judge</span><span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>, c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> num_a = <span class=\"number\">0</span>, num_p = <span class=\"number\">0</span>, <span class=\"type\">num_t</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span> i= <span class=\"number\">0</span>;i &lt; s.<span class=\"built_in\">length</span>();i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;A&#x27;</span> || s[i] == <span class=\"string\">&#x27;P&#x27;</span> || s[i] == <span class=\"string\">&#x27;T&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num_a++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;P&#x27;</span> &amp;&amp; num_p == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num_p++;</span><br><span class=\"line\">                a = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;T&#x27;</span> &amp;&amp; num_p == <span class=\"number\">1</span> &amp;&amp; <span class=\"type\">num_t</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">num_t</span>++;</span><br><span class=\"line\">                b = i -a <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c = num_a - a -b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c == a * b &amp;&amp; b &gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; str;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">judge</span>(str))</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","excerpt":"","more":"<p><strong>1003 我要通过！ (20 分)</strong></p>\n<p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p>\n<p>得到“<strong>答案正确</strong>”的条件是：</p>\n<ol>\n<li>字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符；</li>\n<li>任意形如 xPATx 的字符串都可以获得“<strong>答案正确</strong>”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；</li>\n<li>如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。</li>\n</ol>\n<p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p>\n<p>输出格式：</p>\n<p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 YES，否则输出 NO。</p>\n<p>输入样例：</p>\n<p>10 PAT PAAT AAPATAA AAPAATAAAA xPATx PT Whatever APAAATAA APT APATTAA</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>YES YES YES YES NO NO NO NO NO NO</p>\n<p>结尾无空行</p>\n<p><strong>鸣谢江西财经大学软件学院朱政同学、用户 woluo_z 补充测试数据！</strong></p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">judge</span><span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>, c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> num_a = <span class=\"number\">0</span>, num_p = <span class=\"number\">0</span>, <span class=\"type\">num_t</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">unsigned</span> <span class=\"type\">int</span> i= <span class=\"number\">0</span>;i &lt; s.<span class=\"built_in\">length</span>();i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;A&#x27;</span> || s[i] == <span class=\"string\">&#x27;P&#x27;</span> || s[i] == <span class=\"string\">&#x27;T&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;A&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num_a++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;P&#x27;</span> &amp;&amp; num_p == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                num_p++;</span><br><span class=\"line\">                a = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;T&#x27;</span> &amp;&amp; num_p == <span class=\"number\">1</span> &amp;&amp; <span class=\"type\">num_t</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">num_t</span>++;</span><br><span class=\"line\">                b = i -a <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    c = num_a - a -b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c == a * b &amp;&amp; b &gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; str;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">judge</span>(str))</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"1002 写出这个数","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n1002 写出这个数 (20 分)\n\n读入一个正整数 *n*，计算其各位数字之和，用汉语拼音写出和的每一位数字。\n\n输入格式：\n\n每个测试输入包含 1 个测试用例，即给出自然数 *n* 的值。这里保证 *n* 小于 10100。\n\n输出格式：\n\n在一行内输出 *n* 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。\n\n输入样例：\n\n1234567890987654321123456789\n\n结尾无空行\n\n输出样例：\n\nyi san wu\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n\\\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tchar n[101];\n\tint sum = 0;\n\tint i = 0;\n\tstring out[4]= \"\";\n\tcin >> n;\n\tfor (int j=0; n[j] != 0; j++)\n\t\tsum += n[j] - '0';\n\twhile (sum != 0)\n    {\n\t\tint temp = sum % 10;\n\t\tswitch (temp) {\n\t\tcase 0:\n\t\t\tout[i] = \"ling\";\n\t\tbreak;\n\t\tcase 1:\n\t\t\tout[i] =  \"yi\";\n\t\tbreak;\n\t\tcase 2:\n\t\t\tout[i] = \"er\";\n\t\tbreak;\n\t\tcase 3:\n\t\t\tout[i] = \"san\";\n\t\tbreak;\n\t\tcase 4:\n\t\t\tout[i] = \"si\";\n\t\tbreak;\n\t\tcase 5:\n\t\t\tout[i] = \"wu\";\n\t\tbreak;\n\t\tcase 6:\n\t\t\tout[i] = \"liu\";\n\t\tbreak;\n\t\tcase 7:\n\t\t\tout[i] = \"qi\";\n\t\tbreak;  \n\t\tcase 8:\n\t\t\tout[i] = \"ba\";\n\t\tbreak;\n\t\tcase 9:\n\t\t\tout[i] = \"jiu\";\n\t\tbreak;\n\t\t}\n\t\tsum =sum / 10;\n\t\ti++;\n    }\n\twhile(i > 0)\n    {\n\t\tcout << out[i-1];\n\t\ti--;\n\t\tif(i > 0)\n\t\t\tcout << \" \";\n\t}\n\treturn 0;\n}\n```\n\n","source":"_posts/PAT Basic Level/1002 写出这个数.md","raw":"---\ntitle: 1002 写出这个数\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n1002 写出这个数 (20 分)\n\n读入一个正整数 *n*，计算其各位数字之和，用汉语拼音写出和的每一位数字。\n\n输入格式：\n\n每个测试输入包含 1 个测试用例，即给出自然数 *n* 的值。这里保证 *n* 小于 10100。\n\n输出格式：\n\n在一行内输出 *n* 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。\n\n输入样例：\n\n1234567890987654321123456789\n\n结尾无空行\n\n输出样例：\n\nyi san wu\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n\\\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n\tchar n[101];\n\tint sum = 0;\n\tint i = 0;\n\tstring out[4]= \"\";\n\tcin >> n;\n\tfor (int j=0; n[j] != 0; j++)\n\t\tsum += n[j] - '0';\n\twhile (sum != 0)\n    {\n\t\tint temp = sum % 10;\n\t\tswitch (temp) {\n\t\tcase 0:\n\t\t\tout[i] = \"ling\";\n\t\tbreak;\n\t\tcase 1:\n\t\t\tout[i] =  \"yi\";\n\t\tbreak;\n\t\tcase 2:\n\t\t\tout[i] = \"er\";\n\t\tbreak;\n\t\tcase 3:\n\t\t\tout[i] = \"san\";\n\t\tbreak;\n\t\tcase 4:\n\t\t\tout[i] = \"si\";\n\t\tbreak;\n\t\tcase 5:\n\t\t\tout[i] = \"wu\";\n\t\tbreak;\n\t\tcase 6:\n\t\t\tout[i] = \"liu\";\n\t\tbreak;\n\t\tcase 7:\n\t\t\tout[i] = \"qi\";\n\t\tbreak;  \n\t\tcase 8:\n\t\t\tout[i] = \"ba\";\n\t\tbreak;\n\t\tcase 9:\n\t\t\tout[i] = \"jiu\";\n\t\tbreak;\n\t\t}\n\t\tsum =sum / 10;\n\t\ti++;\n    }\n\twhile(i > 0)\n    {\n\t\tcout << out[i-1];\n\t\ti--;\n\t\tif(i > 0)\n\t\t\tcout << \" \";\n\t}\n\treturn 0;\n}\n```\n\n","slug":"PAT Basic Level/1002 写出这个数","published":1,"date":"2025-02-09T15:24:15.843Z","updated":"2025-02-09T15:20:19.070Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbo0007r8tkh8yaeskj","content":"<p>1002 写出这个数 (20 分)</p>\n<p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于 10100。</p>\n<p>输出格式：</p>\n<p>在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p>\n<p>输入样例：</p>\n<p>1234567890987654321123456789</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>yi san wu</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<p>\\</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> n[<span class=\"number\">101</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tstring out[<span class=\"number\">4</span>]= <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; n[j] != <span class=\"number\">0</span>; j++)</span><br><span class=\"line\">\t\tsum += n[j] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (sum != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> temp = sum % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (temp) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;ling&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tout[i] =  <span class=\"string\">&quot;yi&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;er&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;san&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;si&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;wu&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;liu&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;qi&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;ba&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;jiu&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsum =sum / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\ti++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; out[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\ti--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p>1002 写出这个数 (20 分)</p>\n<p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于 10100。</p>\n<p>输出格式：</p>\n<p>在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p>\n<p>输入样例：</p>\n<p>1234567890987654321123456789</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>yi san wu</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<p>\\</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> n[<span class=\"number\">101</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tstring out[<span class=\"number\">4</span>]= <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; n[j] != <span class=\"number\">0</span>; j++)</span><br><span class=\"line\">\t\tsum += n[j] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (sum != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> temp = sum % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (temp) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;ling&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tout[i] =  <span class=\"string\">&quot;yi&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;er&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;san&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;si&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;wu&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;liu&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;qi&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;ba&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">\t\t\tout[i] = <span class=\"string\">&quot;jiu&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsum =sum / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\ti++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; out[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\ti--;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"1004 成绩排名","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1004 成绩排名 (20 分)**\n\n读入 *n*（>0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。\n\n输入格式：\n\n每个测试输入包含 1 个测试用例，格式为\n\n第 1 行：正整数 n 第 2 行：第 1 个学生的姓名 学号 成绩 第 3 行：第 2 个学生的姓名 学号 成绩  ... ... ... 第 n+1 行：第 n 个学生的姓名 学号 成绩\n\n其中姓名和学号均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。\n\n输出格式：\n\n对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。\n\n输入样例：\n\n3 Joe Math990112 89 Mike CS991301 100 Mary EE990830 95\n\n结尾无空行\n\n输出样例：\n\nMike CS991301 Joe Math990112\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include <iostream>\n#include <string>\nusing namespace std;\n\ntypedef struct{\n    string name;\n    string num;\n    int scord;\n} student;\n\nint main(void) {  \n    int n; \n    student max, min, s;\n    cin >> n; \n    for (int i = 0; i < n; i++){\n        cin >> s.name >> s.num >> s.scord;\n        if(i == 0)\n            max = min = s;\n        if (s.scord > max.scord)\n            max =s;\n        if (s.scord < min.scord)\n            min =s;\n    }\n    cout << max.name << \" \" << max.num << endl;\n    cout << min.name << \" \" << min.num << endl;\n    \nreturn 0;\n\n}\n```\n\n","source":"_posts/PAT Basic Level/1004 成绩排名.md","raw":"---\ntitle: 1004 成绩排名\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1004 成绩排名 (20 分)**\n\n读入 *n*（>0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。\n\n输入格式：\n\n每个测试输入包含 1 个测试用例，格式为\n\n第 1 行：正整数 n 第 2 行：第 1 个学生的姓名 学号 成绩 第 3 行：第 2 个学生的姓名 学号 成绩  ... ... ... 第 n+1 行：第 n 个学生的姓名 学号 成绩\n\n其中姓名和学号均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。\n\n输出格式：\n\n对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。\n\n输入样例：\n\n3 Joe Math990112 89 Mike CS991301 100 Mary EE990830 95\n\n结尾无空行\n\n输出样例：\n\nMike CS991301 Joe Math990112\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include <iostream>\n#include <string>\nusing namespace std;\n\ntypedef struct{\n    string name;\n    string num;\n    int scord;\n} student;\n\nint main(void) {  \n    int n; \n    student max, min, s;\n    cin >> n; \n    for (int i = 0; i < n; i++){\n        cin >> s.name >> s.num >> s.scord;\n        if(i == 0)\n            max = min = s;\n        if (s.scord > max.scord)\n            max =s;\n        if (s.scord < min.scord)\n            min =s;\n    }\n    cout << max.name << \" \" << max.num << endl;\n    cout << min.name << \" \" << min.num << endl;\n    \nreturn 0;\n\n}\n```\n\n","slug":"PAT Basic Level/1004 成绩排名","published":1,"date":"2025-02-09T15:24:15.846Z","updated":"2025-02-09T15:20:19.070Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbp0009r8tkckum3hkv","content":"<p><strong>1004 成绩排名 (20 分)</strong></p>\n<p>读入 <em>n</em>（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例，格式为</p>\n<p>第 1 行：正整数 n 第 2 行：第 1 个学生的姓名 学号 成绩 第 3 行：第 2 个学生的姓名 学号 成绩  … … … 第 n+1 行：第 n 个学生的姓名 学号 成绩</p>\n<p>其中姓名和学号均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p>\n<p>输出格式：</p>\n<p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p>\n<p>输入样例：</p>\n<p>3 Joe Math990112 89 Mike CS991301 100 Mary EE990830 95</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>Mike CS991301 Joe Math990112</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    string num;</span><br><span class=\"line\">    <span class=\"type\">int</span> scord;</span><br><span class=\"line\">&#125; student;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> n; </span><br><span class=\"line\">    student max, min, s;</span><br><span class=\"line\">    cin &gt;&gt; n; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; s.name &gt;&gt; s.num &gt;&gt; s.scord;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</span><br><span class=\"line\">            max = min = s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.scord &gt; max.scord)</span><br><span class=\"line\">            max =s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.scord &lt; min.scord)</span><br><span class=\"line\">            min =s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; max.name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; max.num &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; min.name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; min.num &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><strong>1004 成绩排名 (20 分)</strong></p>\n<p>读入 <em>n</em>（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例，格式为</p>\n<p>第 1 行：正整数 n 第 2 行：第 1 个学生的姓名 学号 成绩 第 3 行：第 2 个学生的姓名 学号 成绩  … … … 第 n+1 行：第 n 个学生的姓名 学号 成绩</p>\n<p>其中姓名和学号均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p>\n<p>输出格式：</p>\n<p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p>\n<p>输入样例：</p>\n<p>3 Joe Math990112 89 Mike CS991301 100 Mary EE990830 95</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>Mike CS991301 Joe Math990112</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    string num;</span><br><span class=\"line\">    <span class=\"type\">int</span> scord;</span><br><span class=\"line\">&#125; student;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> n; </span><br><span class=\"line\">    student max, min, s;</span><br><span class=\"line\">    cin &gt;&gt; n; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">        cin &gt;&gt; s.name &gt;&gt; s.num &gt;&gt; s.scord;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</span><br><span class=\"line\">            max = min = s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.scord &gt; max.scord)</span><br><span class=\"line\">            max =s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.scord &lt; min.scord)</span><br><span class=\"line\">            min =s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; max.name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; max.num &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; min.name &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; min.num &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"1005 继续(3n+1)猜想","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1005 继续(3n+1)猜想 (25 分)**\n\n卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。\n\n当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 *n*=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 *n*=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 *n* 为“关键数”，如果 *n* 不能被数列中的其他数字所覆盖。\n\n现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n\n输入格式：\n\n每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 *K* (<100)，第 2 行给出 *K* 个互不相同的待验证的正整数 *n* (1<*n*≤100)的值，数字间用空格隔开。\n\n输出格式：\n\n每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。\n\n输入样例：\n\n6 3 5 6 7 8 11\n\n结尾无空行\n\n输出样例：\n\n7 6\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint num[10001];//\nint cinnum[101];//用户输入的数据\nint K;\n\nint isExit(int num){//判断是否num存在cinnum\n    for(int i=0; i<K; i++) \n    {\n        if(num == cinnum[i])\n            return 1;\n    }\n    return 0;\n}\n\nint main()\n{\n    int n;\n    cin >> K;\n    for(int i = 0; i < K; i++)\n    {\n        cin >> n;\n        cinnum[i] = n;\n        while(n != 1)\n        {\n            num[n]++;\n            if (n%2 == 0)\n                n= n/2;\n            else\n                n=(3*n+1)/2;\n        }\n    }\n    int flag=0;//控制打印格式\n    for(int i = 100; i >= 1;i--)\n    {\n        if(num[i] == 1 && isExit(i))\n        {\n            if(flag == 1)\n                cout << \" \";\n            cout << i;\n            flag = 1;\n        }\n    }\n    return 0;\n}\n```\n\n","source":"_posts/PAT Basic Level/1005 继续(3n+1)猜想.md","raw":"---\ntitle: 1005 继续(3n+1)猜想\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1005 继续(3n+1)猜想 (25 分)**\n\n卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。\n\n当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 *n*=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 *n*=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 *n* 为“关键数”，如果 *n* 不能被数列中的其他数字所覆盖。\n\n现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n\n输入格式：\n\n每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 *K* (<100)，第 2 行给出 *K* 个互不相同的待验证的正整数 *n* (1<*n*≤100)的值，数字间用空格隔开。\n\n输出格式：\n\n每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。\n\n输入样例：\n\n6 3 5 6 7 8 11\n\n结尾无空行\n\n输出样例：\n\n7 6\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint num[10001];//\nint cinnum[101];//用户输入的数据\nint K;\n\nint isExit(int num){//判断是否num存在cinnum\n    for(int i=0; i<K; i++) \n    {\n        if(num == cinnum[i])\n            return 1;\n    }\n    return 0;\n}\n\nint main()\n{\n    int n;\n    cin >> K;\n    for(int i = 0; i < K; i++)\n    {\n        cin >> n;\n        cinnum[i] = n;\n        while(n != 1)\n        {\n            num[n]++;\n            if (n%2 == 0)\n                n= n/2;\n            else\n                n=(3*n+1)/2;\n        }\n    }\n    int flag=0;//控制打印格式\n    for(int i = 100; i >= 1;i--)\n    {\n        if(num[i] == 1 && isExit(i))\n        {\n            if(flag == 1)\n                cout << \" \";\n            cout << i;\n            flag = 1;\n        }\n    }\n    return 0;\n}\n```\n\n","slug":"PAT Basic Level/1005 继续(3n+1)猜想","published":1,"date":"2025-02-09T15:24:15.847Z","updated":"2025-02-09T15:20:19.070Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbq000br8tkddywhoyh","content":"<p><strong>1005 继续(3n+1)猜想 (25 分)</strong></p>\n<p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p>\n<p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 <em>n</em>&#x3D;3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 <em>n</em>&#x3D;5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 <em>n</em> 为“关键数”，如果 <em>n</em> 不能被数列中的其他数字所覆盖。</p>\n<p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 <em>K</em> (&lt;100)，第 2 行给出 <em>K</em> 个互不相同的待验证的正整数 <em>n</em> (1&lt;<em>n</em>≤100)的值，数字间用空格隔开。</p>\n<p>输出格式：</p>\n<p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p>\n<p>输入样例：</p>\n<p>6 3 5 6 7 8 11</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>7 6</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> num[<span class=\"number\">10001</span>];<span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"type\">int</span> cinnum[<span class=\"number\">101</span>];<span class=\"comment\">//用户输入的数据</span></span><br><span class=\"line\"><span class=\"type\">int</span> K;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">isExit</span><span class=\"params\">(<span class=\"type\">int</span> num)</span></span>&#123;<span class=\"comment\">//判断是否num存在cinnum</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;K; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num == cinnum[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; K;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        cinnum[i] = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n != <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num[n]++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n%<span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                n= n/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                n=(<span class=\"number\">3</span>*n<span class=\"number\">+1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> flag=<span class=\"number\">0</span>;<span class=\"comment\">//控制打印格式</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">100</span>; i &gt;= <span class=\"number\">1</span>;i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[i] == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">isExit</span>(i))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            cout &lt;&lt; i;</span><br><span class=\"line\">            flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><strong>1005 继续(3n+1)猜想 (25 分)</strong></p>\n<p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p>\n<p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 <em>n</em>&#x3D;3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 <em>n</em>&#x3D;5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 <em>n</em> 为“关键数”，如果 <em>n</em> 不能被数列中的其他数字所覆盖。</p>\n<p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 <em>K</em> (&lt;100)，第 2 行给出 <em>K</em> 个互不相同的待验证的正整数 <em>n</em> (1&lt;<em>n</em>≤100)的值，数字间用空格隔开。</p>\n<p>输出格式：</p>\n<p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p>\n<p>输入样例：</p>\n<p>6 3 5 6 7 8 11</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>7 6</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> num[<span class=\"number\">10001</span>];<span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"type\">int</span> cinnum[<span class=\"number\">101</span>];<span class=\"comment\">//用户输入的数据</span></span><br><span class=\"line\"><span class=\"type\">int</span> K;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">isExit</span><span class=\"params\">(<span class=\"type\">int</span> num)</span></span>&#123;<span class=\"comment\">//判断是否num存在cinnum</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;K; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num == cinnum[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; K;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        cinnum[i] = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n != <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            num[n]++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n%<span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                n= n/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                n=(<span class=\"number\">3</span>*n<span class=\"number\">+1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> flag=<span class=\"number\">0</span>;<span class=\"comment\">//控制打印格式</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">100</span>; i &gt;= <span class=\"number\">1</span>;i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num[i] == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">isExit</span>(i))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            cout &lt;&lt; i;</span><br><span class=\"line\">            flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"1006 换个格式输出整数","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1006 换个格式输出整数 (15 分)**\n\n让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12...n 来表示不为零的个位数字 n（<10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。\n\n输入格式：\n\n每个测试输入包含 1 个测试用例，给出正整数 *n*（<1000）。\n\n输出格式：\n\n每个测试用例的输出占一行，用规定的格式输出 *n*。\n\n输入样例 1：\n\n234\n\n结尾无空行\n\n输出样例 1：\n\nBBSSS1234\n\n结尾无空行\n\n输入样例 2：\n\n23\n\n结尾无空行\n\n输出样例 2：\n\nSS123\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n    int n, ge, shi, bai;\n    cin >> n;\n    bai= n /100;\n    shi = (n - bai *100) /10;\n    ge = n -bai *100 -shi *10;\n    if(bai != 0)\n    {\n        for(;bai > 0; bai--)\n            cout << 'B';\n    }\n    if(shi != 0)\n    {\n        for(; shi > 0; shi --)\n            cout << 'S';\n    } \n    if( ge != 0)\n    {\n        for(int i = 1; i <= ge;i++)\n            cout << i;\n    }\n}\n```\n\n","source":"_posts/PAT Basic Level/1006 换个格式输出整数.md","raw":"---\ntitle: 1006 换个格式输出整数\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1006 换个格式输出整数 (15 分)**\n\n让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12...n 来表示不为零的个位数字 n（<10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。\n\n输入格式：\n\n每个测试输入包含 1 个测试用例，给出正整数 *n*（<1000）。\n\n输出格式：\n\n每个测试用例的输出占一行，用规定的格式输出 *n*。\n\n输入样例 1：\n\n234\n\n结尾无空行\n\n输出样例 1：\n\nBBSSS1234\n\n结尾无空行\n\n输入样例 2：\n\n23\n\n结尾无空行\n\n输出样例 2：\n\nSS123\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\nint main()\n{\n    int n, ge, shi, bai;\n    cin >> n;\n    bai= n /100;\n    shi = (n - bai *100) /10;\n    ge = n -bai *100 -shi *10;\n    if(bai != 0)\n    {\n        for(;bai > 0; bai--)\n            cout << 'B';\n    }\n    if(shi != 0)\n    {\n        for(; shi > 0; shi --)\n            cout << 'S';\n    } \n    if( ge != 0)\n    {\n        for(int i = 1; i <= ge;i++)\n            cout << i;\n    }\n}\n```\n\n","slug":"PAT Basic Level/1006 换个格式输出整数","published":1,"date":"2025-02-09T15:24:15.848Z","updated":"2025-02-09T15:20:19.071Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbr000fr8tkhwdshq9j","content":"<p><strong>1006 换个格式输出整数 (15 分)</strong></p>\n<p>让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12…n 来表示不为零的个位数字 n（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例，给出正整数 <em>n</em>（&lt;1000）。</p>\n<p>输出格式：</p>\n<p>每个测试用例的输出占一行，用规定的格式输出 <em>n</em>。</p>\n<p>输入样例 1：</p>\n<p>234</p>\n<p>结尾无空行</p>\n<p>输出样例 1：</p>\n<p>BBSSS1234</p>\n<p>结尾无空行</p>\n<p>输入样例 2：</p>\n<p>23</p>\n<p>结尾无空行</p>\n<p>输出样例 2：</p>\n<p>SS123</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, ge, shi, bai;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    bai= n /<span class=\"number\">100</span>;</span><br><span class=\"line\">    shi = (n - bai *<span class=\"number\">100</span>) /<span class=\"number\">10</span>;</span><br><span class=\"line\">    ge = n -bai *<span class=\"number\">100</span> -shi *<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bai != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;bai &gt; <span class=\"number\">0</span>; bai--)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(shi != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; shi &gt; <span class=\"number\">0</span>; shi --)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27;S&#x27;</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( ge != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= ge;i++)</span><br><span class=\"line\">            cout &lt;&lt; i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><strong>1006 换个格式输出整数 (15 分)</strong></p>\n<p>让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12…n 来表示不为零的个位数字 n（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p>\n<p>输入格式：</p>\n<p>每个测试输入包含 1 个测试用例，给出正整数 <em>n</em>（&lt;1000）。</p>\n<p>输出格式：</p>\n<p>每个测试用例的输出占一行，用规定的格式输出 <em>n</em>。</p>\n<p>输入样例 1：</p>\n<p>234</p>\n<p>结尾无空行</p>\n<p>输出样例 1：</p>\n<p>BBSSS1234</p>\n<p>结尾无空行</p>\n<p>输入样例 2：</p>\n<p>23</p>\n<p>结尾无空行</p>\n<p>输出样例 2：</p>\n<p>SS123</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, ge, shi, bai;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    bai= n /<span class=\"number\">100</span>;</span><br><span class=\"line\">    shi = (n - bai *<span class=\"number\">100</span>) /<span class=\"number\">10</span>;</span><br><span class=\"line\">    ge = n -bai *<span class=\"number\">100</span> -shi *<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(bai != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;bai &gt; <span class=\"number\">0</span>; bai--)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(shi != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; shi &gt; <span class=\"number\">0</span>; shi --)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27;S&#x27;</span>;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>( ge != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= ge;i++)</span><br><span class=\"line\">            cout &lt;&lt; i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"1007 素数对猜想","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1007 素数对猜想 (20 分)**\n\n让我们定义*dn*为：*dn*=*pn*+1−*pn*，其中*pi*是第*i*个素数。显然有*d*1=1，且对于*n*>1有*dn*是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。\n\n现给定任意正整数N(<105)，请计算不超过N的满足猜想的素数对的个数。\n\n输入格式:\n\n输入在一行给出正整数N。\n\n输出格式:\n\n在一行中输出不超过N的满足猜想的素数对的个数。\n\n输入样例:\n\n20\n\n结尾无空行\n\n输出样例:\n\n4\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n200 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\n#include <math.h>\n\nusing namespace std;\nint a[100000];\n\nint k = 0, res = 0;\n\nint main()\n{\n    int N;\n    int p;  // 平方根\n    int i;\n    cin >> N;\n    for(int j = N; j > 0; j--)\n    {\n        p=(int)sqrt( (double)j); // 求平方根，注意sqrt()的参数为 double 类型，这里要强制转换\n        for(i = 2;i<=p;i++)\n        {\n            if (j % i == 0)\n                break;\n        }\n        if(i > p)\n        {\n            a[k++] = j;\n            //cout << j <<endl;\n        }\n    }\n    int r = k;\n    for(int q = 0; q <= r;q++)\n    {\n        if(a[k-1] - a[k] == 2)\n        {\n            //cout << a[k -1] << a[k] <<endl;\n            res++;\n        }\n            \n            k--;\n    }\n    cout << res;\n    return 0;\n}\n```\n\n","source":"_posts/PAT Basic Level/1007 素数对猜想.md","raw":"---\ntitle: 1007 素数对猜想\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1007 素数对猜想 (20 分)**\n\n让我们定义*dn*为：*dn*=*pn*+1−*pn*，其中*pi*是第*i*个素数。显然有*d*1=1，且对于*n*>1有*dn*是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。\n\n现给定任意正整数N(<105)，请计算不超过N的满足猜想的素数对的个数。\n\n输入格式:\n\n输入在一行给出正整数N。\n\n输出格式:\n\n在一行中输出不超过N的满足猜想的素数对的个数。\n\n输入样例:\n\n20\n\n结尾无空行\n\n输出样例:\n\n4\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n200 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\n#include <math.h>\n\nusing namespace std;\nint a[100000];\n\nint k = 0, res = 0;\n\nint main()\n{\n    int N;\n    int p;  // 平方根\n    int i;\n    cin >> N;\n    for(int j = N; j > 0; j--)\n    {\n        p=(int)sqrt( (double)j); // 求平方根，注意sqrt()的参数为 double 类型，这里要强制转换\n        for(i = 2;i<=p;i++)\n        {\n            if (j % i == 0)\n                break;\n        }\n        if(i > p)\n        {\n            a[k++] = j;\n            //cout << j <<endl;\n        }\n    }\n    int r = k;\n    for(int q = 0; q <= r;q++)\n    {\n        if(a[k-1] - a[k] == 2)\n        {\n            //cout << a[k -1] << a[k] <<endl;\n            res++;\n        }\n            \n            k--;\n    }\n    cout << res;\n    return 0;\n}\n```\n\n","slug":"PAT Basic Level/1007 素数对猜想","published":1,"date":"2025-02-09T15:24:15.849Z","updated":"2025-02-09T15:20:19.071Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbs000gr8tk05uiaqh1","content":"<p><strong>1007 素数对猜想 (20 分)</strong></p>\n<p>让我们定义<em>dn</em>为：<em>dn</em>&#x3D;<em>pn</em>+1−<em>pn</em>，其中<em>pi</em>是第<em>i</em>个素数。显然有<em>d</em>1&#x3D;1，且对于<em>n</em>&gt;1有<em>dn</em>是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p>\n<p>现给定任意正整数N(&lt;105)，请计算不超过N的满足猜想的素数对的个数。</p>\n<p>输入格式:</p>\n<p>输入在一行给出正整数N。</p>\n<p>输出格式:</p>\n<p>在一行中输出不超过N的满足猜想的素数对的个数。</p>\n<p>输入样例:</p>\n<p>20</p>\n<p>结尾无空行</p>\n<p>输出样例:</p>\n<p>4</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>200 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">100000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> k = <span class=\"number\">0</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    <span class=\"type\">int</span> p;  <span class=\"comment\">// 平方根</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = N; j &gt; <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>( (<span class=\"type\">double</span>)j); <span class=\"comment\">// 求平方根，注意sqrt()的参数为 double 类型，这里要强制转换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">2</span>;i&lt;=p;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt; p)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[k++] = j;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; j &lt;&lt;endl;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r = k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> q = <span class=\"number\">0</span>; q &lt;= r;q++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[k<span class=\"number\">-1</span>] - a[k] == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; a[k -1] &lt;&lt; a[k] &lt;&lt;endl;</span></span><br><span class=\"line\">            res++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            k--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><strong>1007 素数对猜想 (20 分)</strong></p>\n<p>让我们定义<em>dn</em>为：<em>dn</em>&#x3D;<em>pn</em>+1−<em>pn</em>，其中<em>pi</em>是第<em>i</em>个素数。显然有<em>d</em>1&#x3D;1，且对于<em>n</em>&gt;1有<em>dn</em>是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p>\n<p>现给定任意正整数N(&lt;105)，请计算不超过N的满足猜想的素数对的个数。</p>\n<p>输入格式:</p>\n<p>输入在一行给出正整数N。</p>\n<p>输出格式:</p>\n<p>在一行中输出不超过N的满足猜想的素数对的个数。</p>\n<p>输入样例:</p>\n<p>20</p>\n<p>结尾无空行</p>\n<p>输出样例:</p>\n<p>4</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>200 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> a[<span class=\"number\">100000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> k = <span class=\"number\">0</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    <span class=\"type\">int</span> p;  <span class=\"comment\">// 平方根</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = N; j &gt; <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=(<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>( (<span class=\"type\">double</span>)j); <span class=\"comment\">// 求平方根，注意sqrt()的参数为 double 类型，这里要强制转换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">2</span>;i&lt;=p;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt; p)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[k++] = j;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; j &lt;&lt;endl;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r = k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> q = <span class=\"number\">0</span>; q &lt;= r;q++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[k<span class=\"number\">-1</span>] - a[k] == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; a[k -1] &lt;&lt; a[k] &lt;&lt;endl;</span></span><br><span class=\"line\">            res++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            k--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"1008 数组元素循环右移问题","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1008 数组元素循环右移问题 (20 分)**\n\n一个数组*A*中存有*N*（>0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移*M*（≥0）个位置，即将*A*中的数据由（*A*0*A*1⋯*AN*−1）变换为（*AN*−*M*⋯*AN*−1*A*0*A*1⋯*AN*−*M*−1）（最后*M*个数循环移至最前面的*M*个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？\n\n输入格式:\n\n每个输入包含一个测试用例，第1行输入*N*（1≤*N*≤100）和*M*（≥0）；第2行输入*N*个整数，之间用空格分隔。\n\n输出格式:\n\n在一行中输出循环右移*M*位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n\n输入样例:\n\n6 2 1 2 3 4 5 6\n\n结尾无空行\n\n输出样例:\n\n5 6 1 2 3 4\n\n结尾无空行\n\n作者\n\n**DS课程组**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint main ()\n{\n    int j, M, N;\n    int A[100];\n    cin >> N >> M;\n    j = M % N;\n    for(int i = 0; i < N; i++)\n    {\n        cin >> A[i];\n    }\n    for(int p = 1; p <= j; p++)\n    {\n        for(int i = N-1; i > 0; i--)\n        {\n            int temp = A[i];\n            A[i] = A[i-1];\n            A[i-1] = temp;\n        }\n    }\n\n    for(int i = 0; i < N; i++)\n    {\n        if(i > 0)\n            cout << \" \";\n        cout << A [i];\n    }\n    return 0;\n}\n```\n\n","source":"_posts/PAT Basic Level/1008 数组元素循环右移问题.md","raw":"---\ntitle: 1008 数组元素循环右移问题\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1008 数组元素循环右移问题 (20 分)**\n\n一个数组*A*中存有*N*（>0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移*M*（≥0）个位置，即将*A*中的数据由（*A*0*A*1⋯*AN*−1）变换为（*AN*−*M*⋯*AN*−1*A*0*A*1⋯*AN*−*M*−1）（最后*M*个数循环移至最前面的*M*个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？\n\n输入格式:\n\n每个输入包含一个测试用例，第1行输入*N*（1≤*N*≤100）和*M*（≥0）；第2行输入*N*个整数，之间用空格分隔。\n\n输出格式:\n\n在一行中输出循环右移*M*位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n\n输入样例:\n\n6 2 1 2 3 4 5 6\n\n结尾无空行\n\n输出样例:\n\n5 6 1 2 3 4\n\n结尾无空行\n\n作者\n\n**DS课程组**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint main ()\n{\n    int j, M, N;\n    int A[100];\n    cin >> N >> M;\n    j = M % N;\n    for(int i = 0; i < N; i++)\n    {\n        cin >> A[i];\n    }\n    for(int p = 1; p <= j; p++)\n    {\n        for(int i = N-1; i > 0; i--)\n        {\n            int temp = A[i];\n            A[i] = A[i-1];\n            A[i-1] = temp;\n        }\n    }\n\n    for(int i = 0; i < N; i++)\n    {\n        if(i > 0)\n            cout << \" \";\n        cout << A [i];\n    }\n    return 0;\n}\n```\n\n","slug":"PAT Basic Level/1008 数组元素循环右移问题","published":1,"date":"2025-02-09T15:24:15.851Z","updated":"2025-02-09T15:20:19.071Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbt000lr8tk454b2gjv","content":"<p><strong>1008 数组元素循环右移问题 (20 分)</strong></p>\n<p>一个数组<em>A</em>中存有<em>N</em>（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移<em>M</em>（≥0）个位置，即将<em>A</em>中的数据由（<em>A</em>0<em>A</em>1⋯<em>AN</em>−1）变换为（<em>AN</em>−<em>M</em>⋯<em>AN</em>−1<em>A</em>0<em>A</em>1⋯<em>AN</em>−<em>M</em>−1）（最后<em>M</em>个数循环移至最前面的<em>M</em>个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p>\n<p>输入格式:</p>\n<p>每个输入包含一个测试用例，第1行输入<em>N</em>（1≤<em>N</em>≤100）和<em>M</em>（≥0）；第2行输入<em>N</em>个整数，之间用空格分隔。</p>\n<p>输出格式:</p>\n<p>在一行中输出循环右移<em>M</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p>\n<p>输入样例:</p>\n<p>6 2 1 2 3 4 5 6</p>\n<p>结尾无空行</p>\n<p>输出样例:</p>\n<p>5 6 1 2 3 4</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>DS课程组</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j, M, N;</span><br><span class=\"line\">    <span class=\"type\">int</span> A[<span class=\"number\">100</span>];</span><br><span class=\"line\">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class=\"line\">    j = M % N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; A[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> p = <span class=\"number\">1</span>; p &lt;= j; p++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = N<span class=\"number\">-1</span>; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> temp = A[i];</span><br><span class=\"line\">            A[i] = A[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">            A[i<span class=\"number\">-1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; A [i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><strong>1008 数组元素循环右移问题 (20 分)</strong></p>\n<p>一个数组<em>A</em>中存有<em>N</em>（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移<em>M</em>（≥0）个位置，即将<em>A</em>中的数据由（<em>A</em>0<em>A</em>1⋯<em>AN</em>−1）变换为（<em>AN</em>−<em>M</em>⋯<em>AN</em>−1<em>A</em>0<em>A</em>1⋯<em>AN</em>−<em>M</em>−1）（最后<em>M</em>个数循环移至最前面的<em>M</em>个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p>\n<p>输入格式:</p>\n<p>每个输入包含一个测试用例，第1行输入<em>N</em>（1≤<em>N</em>≤100）和<em>M</em>（≥0）；第2行输入<em>N</em>个整数，之间用空格分隔。</p>\n<p>输出格式:</p>\n<p>在一行中输出循环右移<em>M</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p>\n<p>输入样例:</p>\n<p>6 2 1 2 3 4 5 6</p>\n<p>结尾无空行</p>\n<p>输出样例:</p>\n<p>5 6 1 2 3 4</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>DS课程组</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> j, M, N;</span><br><span class=\"line\">    <span class=\"type\">int</span> A[<span class=\"number\">100</span>];</span><br><span class=\"line\">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class=\"line\">    j = M % N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; A[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> p = <span class=\"number\">1</span>; p &lt;= j; p++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = N<span class=\"number\">-1</span>; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> temp = A[i];</span><br><span class=\"line\">            A[i] = A[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">            A[i<span class=\"number\">-1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; A [i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"1009 说反话","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1009 说反话 (20 分)**\n\n给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。\n\n输入格式：\n\n测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。\n\n输出格式：\n\n每个测试用例的输出占一行，输出倒序后的句子。\n\n输入样例：\n\nHello World Here I Come\n\n输出样例：\n\nCome I Here World Hello\n\n**鸣谢用户 无影 修正数据！**\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include <iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n    string str;\n    string swap[80];\n\tint a= 0, b= 0,num;\n    getline(cin,str);\n    //cout << str.length() << endl;\n    num =str.length(); \n    for (int i = str.length() -1; i >= 0;i--)\n    {\n        b++;\n        if(str[i] ==' ')\n        {\n            //cout << i << endl;\n            //cout << b << endl;\n            for(int j = i+1; j < num;j++)\n            {\n                swap[a++] = str[j];\n            }\n            num = str.length() - b;\n            //cout << a << endl;\n           //cout << num << endl;\n            swap[a++] = ' ';\n        }\n\n        else if(i == 0)\n        {\n            for(int j = 0; j < num;j++)\n            {\n                swap[a++] = str[j];\n                //cout << swap[a];\n            }\n        }\n        \n    }\n    for(unsigned int i = 0; i < str.length(); i++)\n    {\n        cout << swap[i];\n    }\n\n    return 0;\n}\n```\n\n","source":"_posts/PAT Basic Level/1009 说反话.md","raw":"---\ntitle: 1009 说反话\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1009 说反话 (20 分)**\n\n给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。\n\n输入格式：\n\n测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。\n\n输出格式：\n\n每个测试用例的输出占一行，输出倒序后的句子。\n\n输入样例：\n\nHello World Here I Come\n\n输出样例：\n\nCome I Here World Hello\n\n**鸣谢用户 无影 修正数据！**\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include <iostream>\n#include<string>\nusing namespace std;\n\nint main()\n{\n    string str;\n    string swap[80];\n\tint a= 0, b= 0,num;\n    getline(cin,str);\n    //cout << str.length() << endl;\n    num =str.length(); \n    for (int i = str.length() -1; i >= 0;i--)\n    {\n        b++;\n        if(str[i] ==' ')\n        {\n            //cout << i << endl;\n            //cout << b << endl;\n            for(int j = i+1; j < num;j++)\n            {\n                swap[a++] = str[j];\n            }\n            num = str.length() - b;\n            //cout << a << endl;\n           //cout << num << endl;\n            swap[a++] = ' ';\n        }\n\n        else if(i == 0)\n        {\n            for(int j = 0; j < num;j++)\n            {\n                swap[a++] = str[j];\n                //cout << swap[a];\n            }\n        }\n        \n    }\n    for(unsigned int i = 0; i < str.length(); i++)\n    {\n        cout << swap[i];\n    }\n\n    return 0;\n}\n```\n\n","slug":"PAT Basic Level/1009 说反话","published":1,"date":"2025-02-09T15:24:15.852Z","updated":"2025-02-09T15:20:19.071Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbt000or8tkg367575o","content":"<p><strong>1009 说反话 (20 分)</strong></p>\n<p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p>\n<p>输入格式：</p>\n<p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p>\n<p>输出格式：</p>\n<p>每个测试用例的输出占一行，输出倒序后的句子。</p>\n<p>输入样例：</p>\n<p>Hello World Here I Come</p>\n<p>输出样例：</p>\n<p>Come I Here World Hello</p>\n<p><strong>鸣谢用户 无影 修正数据！</strong></p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    string swap[<span class=\"number\">80</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> a= <span class=\"number\">0</span>, b= <span class=\"number\">0</span>,num;</span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(cin,str);</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; str.length() &lt;&lt; endl;</span></span><br><span class=\"line\">    num =str.<span class=\"built_in\">length</span>(); </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = str.<span class=\"built_in\">length</span>() <span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>;i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[i] ==<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; i &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; b &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i<span class=\"number\">+1</span>; j &lt; num;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap[a++] = str[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            num = str.<span class=\"built_in\">length</span>() - b;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; a &lt;&lt; endl;</span></span><br><span class=\"line\">           <span class=\"comment\">//cout &lt;&lt; num &lt;&lt; endl;</span></span><br><span class=\"line\">            swap[a++] = <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; num;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap[a++] = str[j];</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; swap[a];</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">length</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; swap[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><strong>1009 说反话 (20 分)</strong></p>\n<p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p>\n<p>输入格式：</p>\n<p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p>\n<p>输出格式：</p>\n<p>每个测试用例的输出占一行，输出倒序后的句子。</p>\n<p>输入样例：</p>\n<p>Hello World Here I Come</p>\n<p>输出样例：</p>\n<p>Come I Here World Hello</p>\n<p><strong>鸣谢用户 无影 修正数据！</strong></p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    string swap[<span class=\"number\">80</span>];</span><br><span class=\"line\">\t<span class=\"type\">int</span> a= <span class=\"number\">0</span>, b= <span class=\"number\">0</span>,num;</span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(cin,str);</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; str.length() &lt;&lt; endl;</span></span><br><span class=\"line\">    num =str.<span class=\"built_in\">length</span>(); </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = str.<span class=\"built_in\">length</span>() <span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>;i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str[i] ==<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; i &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; b &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i<span class=\"number\">+1</span>; j &lt; num;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap[a++] = str[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            num = str.<span class=\"built_in\">length</span>() - b;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; a &lt;&lt; endl;</span></span><br><span class=\"line\">           <span class=\"comment\">//cout &lt;&lt; num &lt;&lt; endl;</span></span><br><span class=\"line\">            swap[a++] = <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; num;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                swap[a++] = str[j];</span><br><span class=\"line\">                <span class=\"comment\">//cout &lt;&lt; swap[a];</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">length</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; swap[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"1010 一元多项式求导","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1010 一元多项式求导 (25 分)**\n\n设计函数求一元多项式的导数。（注：*xn*（*n*为整数）的一阶导数为*nxn*−1。）\n\n输入格式:\n\n以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。\n\n输出格式:\n\n以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 0 0。\n\n输入样例:\n\n3 4 -5 2 6 1 -2 0\n\n结尾无空行\n\n输出样例:\n\n12 3 -10 1 6 0\n\n结尾无空行\n\n作者\n\n**DS课程组**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint main()\n{\n    int a;\n    int b;\n    cin >> a >> b;\n    if(b == 0)\n    {\n        cout << \"0 0\";\n        return 0;\n    }\n    else\n        cout << a*b <<' '<< b-1;\n    while(cin >> a >> b)\n    {\n        if( b!= 0)\n        cout <<' '<< a*b <<' '<< b-1;\n    }\n    return 0;\n}\n```\n\n","source":"_posts/PAT Basic Level/1010 一元多项式求导.md","raw":"---\ntitle: 1010 一元多项式求导\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1010 一元多项式求导 (25 分)**\n\n设计函数求一元多项式的导数。（注：*xn*（*n*为整数）的一阶导数为*nxn*−1。）\n\n输入格式:\n\n以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。\n\n输出格式:\n\n以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 0 0。\n\n输入样例:\n\n3 4 -5 2 6 1 -2 0\n\n结尾无空行\n\n输出样例:\n\n12 3 -10 1 6 0\n\n结尾无空行\n\n作者\n\n**DS课程组**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint main()\n{\n    int a;\n    int b;\n    cin >> a >> b;\n    if(b == 0)\n    {\n        cout << \"0 0\";\n        return 0;\n    }\n    else\n        cout << a*b <<' '<< b-1;\n    while(cin >> a >> b)\n    {\n        if( b!= 0)\n        cout <<' '<< a*b <<' '<< b-1;\n    }\n    return 0;\n}\n```\n\n","slug":"PAT Basic Level/1010 一元多项式求导","published":1,"date":"2025-02-09T15:24:15.854Z","updated":"2025-02-09T15:20:19.071Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbu000sr8tk7esigtnr","content":"<p><strong>1010 一元多项式求导 (25 分)</strong></p>\n<p>设计函数求一元多项式的导数。（注：<em>xn</em>（<em>n</em>为整数）的一阶导数为<em>nxn</em>−1。）</p>\n<p>输入格式:</p>\n<p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p>\n<p>输出格式:</p>\n<p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 0 0。</p>\n<p>输入样例:</p>\n<p>3 4 -5 2 6 1 -2 0</p>\n<p>结尾无空行</p>\n<p>输出样例:</p>\n<p>12 3 -10 1 6 0</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>DS课程组</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;0 0&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; a*b &lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt; b<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin &gt;&gt; a &gt;&gt; b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( b!= <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt; a*b &lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt; b<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><strong>1010 一元多项式求导 (25 分)</strong></p>\n<p>设计函数求一元多项式的导数。（注：<em>xn</em>（<em>n</em>为整数）的一阶导数为<em>nxn</em>−1。）</p>\n<p>输入格式:</p>\n<p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p>\n<p>输出格式:</p>\n<p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 0 0。</p>\n<p>输入样例:</p>\n<p>3 4 -5 2 6 1 -2 0</p>\n<p>结尾无空行</p>\n<p>输出样例:</p>\n<p>12 3 -10 1 6 0</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>DS课程组</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;0 0&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; a*b &lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt; b<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin &gt;&gt; a &gt;&gt; b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( b!= <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt; a*b &lt;&lt;<span class=\"string\">&#x27; &#x27;</span>&lt;&lt; b<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"1011 A+B 和 C","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1011 A+B 和 C (15 分)**\n\n给定区间 [−231,231] 内的 3 个整数 *A*、*B* 和 *C*，请判断 *A*+*B* 是否大于 *C*。\n\n输入格式：\n\n输入第 1 行给出正整数 *T* (≤10)，是测试用例的个数。随后给出 *T* 组测试用例，每组占一行，顺序给出 *A*、*B* 和 *C*。整数间以空格分隔。\n\n输出格式：\n\n对每组测试用例，在一行中输出 Case #X: true 如果 *A*+*B*>*C*，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。\n\n输入样例：\n\n4 1 2 3 2 3 4 2147483647 0 2147483646 0 -2147483648 -2147483647\n\n结尾无空行\n\n输出样例：\n\nCase #1: false Case #2: true Case #3: true Case #4: false\n\n结尾无空行\n\n作者\n\n**HOU, Qiming**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int n;\n    long long a,b,c;\n    int i = 0;\n    cin >> n;\n    while (n--)\n    {\n        cin >> a >> b >> c;\n        i++;\n        if (a+b > c)\n            printf(\"Case #%d: true\\n\", i);\n        else\n             printf(\"Case #%d: false\\n\", i);\n    }\n    return 0;\n}\n```\n\n","source":"_posts/PAT Basic Level/1011 A+B 和 C.md","raw":"---\ntitle: 1011 A+B 和 C\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1011 A+B 和 C (15 分)**\n\n给定区间 [−231,231] 内的 3 个整数 *A*、*B* 和 *C*，请判断 *A*+*B* 是否大于 *C*。\n\n输入格式：\n\n输入第 1 行给出正整数 *T* (≤10)，是测试用例的个数。随后给出 *T* 组测试用例，每组占一行，顺序给出 *A*、*B* 和 *C*。整数间以空格分隔。\n\n输出格式：\n\n对每组测试用例，在一行中输出 Case #X: true 如果 *A*+*B*>*C*，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。\n\n输入样例：\n\n4 1 2 3 2 3 4 2147483647 0 2147483646 0 -2147483648 -2147483647\n\n结尾无空行\n\n输出样例：\n\nCase #1: false Case #2: true Case #3: true Case #4: false\n\n结尾无空行\n\n作者\n\n**HOU, Qiming**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int n;\n    long long a,b,c;\n    int i = 0;\n    cin >> n;\n    while (n--)\n    {\n        cin >> a >> b >> c;\n        i++;\n        if (a+b > c)\n            printf(\"Case #%d: true\\n\", i);\n        else\n             printf(\"Case #%d: false\\n\", i);\n    }\n    return 0;\n}\n```\n\n","slug":"PAT Basic Level/1011 A+B 和 C","published":1,"date":"2025-02-09T15:24:15.855Z","updated":"2025-02-09T15:20:19.072Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbu000vr8tkdqylbht7","content":"<p><strong>1011 A+B 和 C (15 分)</strong></p>\n<p>给定区间 [−231,231] 内的 3 个整数 <em>A</em>、<em>B</em> 和 <em>C</em>，请判断 <em>A</em>+<em>B</em> 是否大于 <em>C</em>。</p>\n<p>输入格式：</p>\n<p>输入第 1 行给出正整数 <em>T</em> (≤10)，是测试用例的个数。随后给出 <em>T</em> 组测试用例，每组占一行，顺序给出 <em>A</em>、<em>B</em> 和 <em>C</em>。整数间以空格分隔。</p>\n<p>输出格式：</p>\n<p>对每组测试用例，在一行中输出 Case #X: true 如果 <em>A</em>+<em>B</em>&gt;<em>C</em>，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。</p>\n<p>输入样例：</p>\n<p>4 1 2 3 2 3 4 2147483647 0 2147483646 0 -2147483648 -2147483647</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>Case #1: false Case #2: true Case #3: true Case #4: false</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>HOU, Qiming</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> a,b,c;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a+b &gt; c)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: true\\n&quot;</span>, i);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">             <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: false\\n&quot;</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><strong>1011 A+B 和 C (15 分)</strong></p>\n<p>给定区间 [−231,231] 内的 3 个整数 <em>A</em>、<em>B</em> 和 <em>C</em>，请判断 <em>A</em>+<em>B</em> 是否大于 <em>C</em>。</p>\n<p>输入格式：</p>\n<p>输入第 1 行给出正整数 <em>T</em> (≤10)，是测试用例的个数。随后给出 <em>T</em> 组测试用例，每组占一行，顺序给出 <em>A</em>、<em>B</em> 和 <em>C</em>。整数间以空格分隔。</p>\n<p>输出格式：</p>\n<p>对每组测试用例，在一行中输出 Case #X: true 如果 <em>A</em>+<em>B</em>&gt;<em>C</em>，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。</p>\n<p>输入样例：</p>\n<p>4 1 2 3 2 3 4 2147483647 0 2147483646 0 -2147483648 -2147483647</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>Case #1: false Case #2: true Case #3: true Case #4: false</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>HOU, Qiming</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> a,b,c;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a+b &gt; c)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: true\\n&quot;</span>, i);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">             <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: false\\n&quot;</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"1013 数素数","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1013 数素数 (20 分)**\n\n令 *Pi* 表示第 *i* 个素数。现任给两个正整数 *M*≤*N*≤104，请输出 *PM* 到 *PN* 的所有素数。\n\n输入格式：\n\n输入在一行中给出 *M* 和 *N*，其间以空格分隔。\n\n输出格式：\n\n输出从 *PM* 到 *PN* 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。\n\n输入样例：\n\n5 27\n\n结尾无空行\n\n输出样例：\n\n11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103\n\n结尾无空行\n\nC++ (g++)\n\n```c++\n#include<iostream>\n#include <math.h>\n\nusing namespace std;\n\nint main()\n{\n    int M, N;\n    int a[10000];\n    int temp = 2;\n    int i, j, p;\n    cin >> M >> N;\n    for (i=1;i <= N;)\n    {\n        p = (int)sqrt((double)temp);\n        for(j = 2; j<= p;j++)\n        {\n            if (temp %  j == 0)\n                break;\n        }\n        if(j > p)\n        {\n            a[i++] = temp;\n            //cout << temp << \" \";\n            //cout << i-1 << endl;\n        }\n        temp++;\n    }\n\n    for(int i = 0;M <= N;M++)\n    {\n        i++;\n        if(i % 10 != 1)\n            cout << ' ';\n        cout << a[M];\n        if(i % 10 == 0)\n            cout << endl;\n    }\n    \n    return 0;\n\n}\n```\n\n\n\n","source":"_posts/PAT Basic Level/1013 数素数.md","raw":"---\ntitle: 1013 数素数\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1013 数素数 (20 分)**\n\n令 *Pi* 表示第 *i* 个素数。现任给两个正整数 *M*≤*N*≤104，请输出 *PM* 到 *PN* 的所有素数。\n\n输入格式：\n\n输入在一行中给出 *M* 和 *N*，其间以空格分隔。\n\n输出格式：\n\n输出从 *PM* 到 *PN* 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。\n\n输入样例：\n\n5 27\n\n结尾无空行\n\n输出样例：\n\n11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103\n\n结尾无空行\n\nC++ (g++)\n\n```c++\n#include<iostream>\n#include <math.h>\n\nusing namespace std;\n\nint main()\n{\n    int M, N;\n    int a[10000];\n    int temp = 2;\n    int i, j, p;\n    cin >> M >> N;\n    for (i=1;i <= N;)\n    {\n        p = (int)sqrt((double)temp);\n        for(j = 2; j<= p;j++)\n        {\n            if (temp %  j == 0)\n                break;\n        }\n        if(j > p)\n        {\n            a[i++] = temp;\n            //cout << temp << \" \";\n            //cout << i-1 << endl;\n        }\n        temp++;\n    }\n\n    for(int i = 0;M <= N;M++)\n    {\n        i++;\n        if(i % 10 != 1)\n            cout << ' ';\n        cout << a[M];\n        if(i % 10 == 0)\n            cout << endl;\n    }\n    \n    return 0;\n\n}\n```\n\n\n\n","slug":"PAT Basic Level/1013 数素数","published":1,"date":"2025-02-09T15:24:15.858Z","updated":"2025-02-09T15:20:19.072Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbv000zr8tk6kup8pvg","content":"<p><strong>1013 数素数 (20 分)</strong></p>\n<p>令 <em>Pi</em> 表示第 <em>i</em> 个素数。现任给两个正整数 <em>M</em>≤<em>N</em>≤104，请输出 <em>PM</em> 到 <em>PN</em> 的所有素数。</p>\n<p>输入格式：</p>\n<p>输入在一行中给出 <em>M</em> 和 <em>N</em>，其间以空格分隔。</p>\n<p>输出格式：</p>\n<p>输出从 <em>PM</em> 到 <em>PN</em> 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p>\n<p>输入样例：</p>\n<p>5 27</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103</p>\n<p>结尾无空行</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> M, N;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">10000</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j, p;</span><br><span class=\"line\">    cin &gt;&gt; M &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">1</span>;i &lt;= N;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = (<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>((<span class=\"type\">double</span>)temp);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">2</span>; j&lt;= p;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp %  j == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &gt; p)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[i++] = temp;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; temp &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; i-1 &lt;&lt; endl;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;M &lt;= N;M++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i % <span class=\"number\">10</span> != <span class=\"number\">1</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        cout &lt;&lt; a[M];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i % <span class=\"number\">10</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","excerpt":"","more":"<p><strong>1013 数素数 (20 分)</strong></p>\n<p>令 <em>Pi</em> 表示第 <em>i</em> 个素数。现任给两个正整数 <em>M</em>≤<em>N</em>≤104，请输出 <em>PM</em> 到 <em>PN</em> 的所有素数。</p>\n<p>输入格式：</p>\n<p>输入在一行中给出 <em>M</em> 和 <em>N</em>，其间以空格分隔。</p>\n<p>输出格式：</p>\n<p>输出从 <em>PM</em> 到 <em>PN</em> 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p>\n<p>输入样例：</p>\n<p>5 27</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103</p>\n<p>结尾无空行</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> M, N;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">10000</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, j, p;</span><br><span class=\"line\">    cin &gt;&gt; M &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">1</span>;i &lt;= N;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = (<span class=\"type\">int</span>)<span class=\"built_in\">sqrt</span>((<span class=\"type\">double</span>)temp);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">2</span>; j&lt;= p;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp %  j == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j &gt; p)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[i++] = temp;</span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; temp &lt;&lt; &quot; &quot;;</span></span><br><span class=\"line\">            <span class=\"comment\">//cout &lt;&lt; i-1 &lt;&lt; endl;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;M &lt;= N;M++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i % <span class=\"number\">10</span> != <span class=\"number\">1</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        cout &lt;&lt; a[M];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i % <span class=\"number\">10</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"1012 数字分类","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1012 数字分类 (20 分)**\n\n给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：\n\n- *A*1 = 能被 5 整除的数字中所有偶数的和；\n- *A*2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 *n*1−*n*2+*n*3−*n*4⋯；\n- *A*3 = 被 5 除后余 2 的数字的个数；\n- *A*4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；\n- *A*5 = 被 5 除后余 4 的数字中最大数字。\n\n输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 *N*，随后给出 *N* 个不超过 1000 的待分类的正整数。数字间以空格分隔。\n\n输出格式：\n\n对给定的 *N* 个正整数，按题目要求计算 *A*1~*A*5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。\n\n若其中某一类数字不存在，则在相应位置输出 N。\n\n输入样例 1：\n\n13 1 2 3 4 5 6 7 8 9 10 20 16 18\n\n结尾无空行\n\n输出样例 1：\n\n30 11 2 9.7 9\n\n结尾无空行\n\n输入样例 2：\n\n8 1 2 4 5 6 7 9 16\n\n结尾无空行\n\n输出样例 2：\n\nN 11 2 N 9\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint main()\n{\n    int n;\n    int num, yushu, i = 0, j = 0, p = 0, q =0 ;\n    int res1 = 0 ,res2 = 0;\n    float res4 =0;\n    cin >> n;\n    while(n--)\n    {\n        cin >> num;\n        yushu = num % 5;\n        switch(yushu)\n        {\n            case 0:\n                if(num % 2 == 0) \n                    res1 = res1 + num;\n                break;\n            case 1:\n                i++;\n                if(i % 2 != 0)\n                    res2 = res2 +num;\n                else \n                    res2 = res2 -num;\n                break;\n            case 2:\n                j++;\n                break;\n            case 3:\n                p++;\n                res4 = res4 + num;\n                break;\n            case 4:\n                if(q < num)\n                    q = num;\n                break;\n        }\n    }\n\n    if (res1 == 0)\n        cout << \"N\" << \" \";\n    else\n        cout << res1 << \" \";\n    if (i == 0)\n        cout << \"N\" << \" \";\n    else\n        cout << res2 << \" \";\n    if (j == 0)\n        cout << \"N\" << \" \";\n    else\n        cout << j << \" \";\n    if (p == 0)\n        cout << \"N\"  << \" \";\n    else\n        printf(\"%.1f \",res4/p);\n    if (q == 0)\n        cout << \"N\";\n    else\n        cout << q;\n\nreturn 0;\n}\n```\n\n","source":"_posts/PAT Basic Level/1012 数字分类.md","raw":"---\ntitle: 1012 数字分类\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1012 数字分类 (20 分)**\n\n给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：\n\n- *A*1 = 能被 5 整除的数字中所有偶数的和；\n- *A*2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 *n*1−*n*2+*n*3−*n*4⋯；\n- *A*3 = 被 5 除后余 2 的数字的个数；\n- *A*4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；\n- *A*5 = 被 5 除后余 4 的数字中最大数字。\n\n输入格式：\n\n每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 *N*，随后给出 *N* 个不超过 1000 的待分类的正整数。数字间以空格分隔。\n\n输出格式：\n\n对给定的 *N* 个正整数，按题目要求计算 *A*1~*A*5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。\n\n若其中某一类数字不存在，则在相应位置输出 N。\n\n输入样例 1：\n\n13 1 2 3 4 5 6 7 8 9 10 20 16 18\n\n结尾无空行\n\n输出样例 1：\n\n30 11 2 9.7 9\n\n结尾无空行\n\n输入样例 2：\n\n8 1 2 4 5 6 7 9 16\n\n结尾无空行\n\n输出样例 2：\n\nN 11 2 N 9\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\nusing namespace std;\n\nint main()\n{\n    int n;\n    int num, yushu, i = 0, j = 0, p = 0, q =0 ;\n    int res1 = 0 ,res2 = 0;\n    float res4 =0;\n    cin >> n;\n    while(n--)\n    {\n        cin >> num;\n        yushu = num % 5;\n        switch(yushu)\n        {\n            case 0:\n                if(num % 2 == 0) \n                    res1 = res1 + num;\n                break;\n            case 1:\n                i++;\n                if(i % 2 != 0)\n                    res2 = res2 +num;\n                else \n                    res2 = res2 -num;\n                break;\n            case 2:\n                j++;\n                break;\n            case 3:\n                p++;\n                res4 = res4 + num;\n                break;\n            case 4:\n                if(q < num)\n                    q = num;\n                break;\n        }\n    }\n\n    if (res1 == 0)\n        cout << \"N\" << \" \";\n    else\n        cout << res1 << \" \";\n    if (i == 0)\n        cout << \"N\" << \" \";\n    else\n        cout << res2 << \" \";\n    if (j == 0)\n        cout << \"N\" << \" \";\n    else\n        cout << j << \" \";\n    if (p == 0)\n        cout << \"N\"  << \" \";\n    else\n        printf(\"%.1f \",res4/p);\n    if (q == 0)\n        cout << \"N\";\n    else\n        cout << q;\n\nreturn 0;\n}\n```\n\n","slug":"PAT Basic Level/1012 数字分类","published":1,"date":"2025-02-09T15:24:15.856Z","updated":"2025-02-09T15:20:19.072Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbv0012r8tkes7j10zq","content":"<p><strong>1012 数字分类 (20 分)</strong></p>\n<p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p>\n<ul>\n<li><em>A</em>1 &#x3D; 能被 5 整除的数字中所有偶数的和；</li>\n<li><em>A</em>2 &#x3D; 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 <em>n</em>1−<em>n</em>2+<em>n</em>3−<em>n</em>4⋯；</li>\n<li><em>A</em>3 &#x3D; 被 5 除后余 2 的数字的个数；</li>\n<li><em>A</em>4 &#x3D; 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li>\n<li><em>A</em>5 &#x3D; 被 5 除后余 4 的数字中最大数字。</li>\n</ul>\n<p>输入格式：</p>\n<p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em>，随后给出 <em>N</em> 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p>\n<p>输出格式：</p>\n<p>对给定的 <em>N</em> 个正整数，按题目要求计算 <em>A</em>1~<em>A</em>5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p>\n<p>若其中某一类数字不存在，则在相应位置输出 N。</p>\n<p>输入样例 1：</p>\n<p>13 1 2 3 4 5 6 7 8 9 10 20 16 18</p>\n<p>结尾无空行</p>\n<p>输出样例 1：</p>\n<p>30 11 2 9.7 9</p>\n<p>结尾无空行</p>\n<p>输入样例 2：</p>\n<p>8 1 2 4 5 6 7 9 16</p>\n<p>结尾无空行</p>\n<p>输出样例 2：</p>\n<p>N 11 2 N 9</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">int</span> num, yushu, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, p = <span class=\"number\">0</span>, q =<span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> res1 = <span class=\"number\">0</span> ,res2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">float</span> res4 =<span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; num;</span><br><span class=\"line\">        yushu = num % <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(yushu)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(num % <span class=\"number\">2</span> == <span class=\"number\">0</span>) </span><br><span class=\"line\">                    res1 = res1 + num;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i % <span class=\"number\">2</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">                    res2 = res2 +num;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> </span><br><span class=\"line\">                    res2 = res2 -num;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                p++;</span><br><span class=\"line\">                res4 = res4 + num;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(q &lt; num)</span><br><span class=\"line\">                    q = num;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res1 == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;N&quot;</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; res1 &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;N&quot;</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; res2 &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;N&quot;</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; j &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;N&quot;</span>  &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.1f &quot;</span>,res4/p);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;N&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><strong>1012 数字分类 (20 分)</strong></p>\n<p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p>\n<ul>\n<li><em>A</em>1 &#x3D; 能被 5 整除的数字中所有偶数的和；</li>\n<li><em>A</em>2 &#x3D; 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 <em>n</em>1−<em>n</em>2+<em>n</em>3−<em>n</em>4⋯；</li>\n<li><em>A</em>3 &#x3D; 被 5 除后余 2 的数字的个数；</li>\n<li><em>A</em>4 &#x3D; 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li>\n<li><em>A</em>5 &#x3D; 被 5 除后余 4 的数字中最大数字。</li>\n</ul>\n<p>输入格式：</p>\n<p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em>，随后给出 <em>N</em> 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p>\n<p>输出格式：</p>\n<p>对给定的 <em>N</em> 个正整数，按题目要求计算 <em>A</em>1~<em>A</em>5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p>\n<p>若其中某一类数字不存在，则在相应位置输出 N。</p>\n<p>输入样例 1：</p>\n<p>13 1 2 3 4 5 6 7 8 9 10 20 16 18</p>\n<p>结尾无空行</p>\n<p>输出样例 1：</p>\n<p>30 11 2 9.7 9</p>\n<p>结尾无空行</p>\n<p>输入样例 2：</p>\n<p>8 1 2 4 5 6 7 9 16</p>\n<p>结尾无空行</p>\n<p>输出样例 2：</p>\n<p>N 11 2 N 9</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"type\">int</span> num, yushu, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, p = <span class=\"number\">0</span>, q =<span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> res1 = <span class=\"number\">0</span> ,res2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">float</span> res4 =<span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; num;</span><br><span class=\"line\">        yushu = num % <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(yushu)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(num % <span class=\"number\">2</span> == <span class=\"number\">0</span>) </span><br><span class=\"line\">                    res1 = res1 + num;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i % <span class=\"number\">2</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">                    res2 = res2 +num;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> </span><br><span class=\"line\">                    res2 = res2 -num;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                p++;</span><br><span class=\"line\">                res4 = res4 + num;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(q &lt; num)</span><br><span class=\"line\">                    q = num;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res1 == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;N&quot;</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; res1 &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;N&quot;</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; res2 &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;N&quot;</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; j &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;N&quot;</span>  &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.1f &quot;</span>,res4/p);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q == <span class=\"number\">0</span>)</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;N&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; q;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"1014 福尔摩斯的约会","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1014 福尔摩斯的约会 (20 分)**\n\n大侦探福尔摩斯接到一张奇怪的字条：\n\n我们约会吧！  3485djDkxh4hhGE  2984akDfkkkkggEdsb  s&hgsfdk  d&Hyscvnm\n\n大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间星期四 14:04，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 D，代表星期四；第 2 对相同的字符是 E ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 A 到 N 表示）；后面两字符串第 1 对相同的英文字母 s 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。\n\n输入格式：\n\n输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。\n\n输出格式：\n\n在一行中输出约会的时间，格式为 DAY HH:MM，其中 DAY 是某星期的 3 字符缩写，即 MON 表示星期一，TUE 表示星期二，WED 表示星期三，THU 表示星期四，FRI 表示星期五，SAT 表示星期六，SUN 表示星期日。题目输入保证每个测试存在唯一解。\n\n输入样例：\n\n3485djDkxh4hhGE  2984akDfkkkkggEdsb  s&hgsfdk  d&Hyscvnm\n\n结尾无空行\n\n输出样例：\n\nTHU 14:04\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n200 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\n#define range(num,x,y) (num>=x&&num<=y)\nstring week[8]={\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\",\"SUN\"};\nint main(){\n    string str[4];\n    for(int i=0;i<4;i++)\n            cin >> str[i];\n\n    int len1=min(str[0].size(),str[1].size());\n    int len2=min(str[2].size(),str[3].size());\n    \n    int cnt=0;\n    for(int i=0;i<len1;i++)\n    {\n        if(cnt==0 && str[0][i]==str[1][i] && range(str[0][i],'A','G'))\n        {\n            cout<<week[str[0][i]-'A']<<\" \";\n            cnt++;\n            continue;\n        }\n        if(cnt==1 && str[0][i]==str[1][i])\n        {\n            if(range(str[0][i],'A','N'))\n            {\n                cout<<(10+str[0][i]-'A')<<\":\";\n                cnt++;\n            } \n            else if(range(str[0][i],'0','9'))\n            {\n                printf(\"%02d:\",str[0][i]-'0');\n                cnt++;\n            }\n        }\n    }\n    for(int i=0;i<len2;i++)\n    {\n        if((str[2][i]==str[3][i] && range(str[2][i],'a','z'))  || range(str[2][i],'A','Z'))\n        {\n            printf(\"%02d\",i);\n            break;\n        }\n    }\n    return 0;\n\n}\n```\n\n\n\n","source":"_posts/PAT Basic Level/1014 福尔摩斯的约会.md","raw":"---\ntitle: 1014 福尔摩斯的约会\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1014 福尔摩斯的约会 (20 分)**\n\n大侦探福尔摩斯接到一张奇怪的字条：\n\n我们约会吧！  3485djDkxh4hhGE  2984akDfkkkkggEdsb  s&hgsfdk  d&Hyscvnm\n\n大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间星期四 14:04，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 D，代表星期四；第 2 对相同的字符是 E ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 A 到 N 表示）；后面两字符串第 1 对相同的英文字母 s 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。\n\n输入格式：\n\n输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。\n\n输出格式：\n\n在一行中输出约会的时间，格式为 DAY HH:MM，其中 DAY 是某星期的 3 字符缩写，即 MON 表示星期一，TUE 表示星期二，WED 表示星期三，THU 表示星期四，FRI 表示星期五，SAT 表示星期六，SUN 表示星期日。题目输入保证每个测试存在唯一解。\n\n输入样例：\n\n3485djDkxh4hhGE  2984akDfkkkkggEdsb  s&hgsfdk  d&Hyscvnm\n\n结尾无空行\n\n输出样例：\n\nTHU 14:04\n\n结尾无空行\n\n作者\n\n**CHEN, Yue**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n200 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\n#define range(num,x,y) (num>=x&&num<=y)\nstring week[8]={\"MON\",\"TUE\",\"WED\",\"THU\",\"FRI\",\"SAT\",\"SUN\"};\nint main(){\n    string str[4];\n    for(int i=0;i<4;i++)\n            cin >> str[i];\n\n    int len1=min(str[0].size(),str[1].size());\n    int len2=min(str[2].size(),str[3].size());\n    \n    int cnt=0;\n    for(int i=0;i<len1;i++)\n    {\n        if(cnt==0 && str[0][i]==str[1][i] && range(str[0][i],'A','G'))\n        {\n            cout<<week[str[0][i]-'A']<<\" \";\n            cnt++;\n            continue;\n        }\n        if(cnt==1 && str[0][i]==str[1][i])\n        {\n            if(range(str[0][i],'A','N'))\n            {\n                cout<<(10+str[0][i]-'A')<<\":\";\n                cnt++;\n            } \n            else if(range(str[0][i],'0','9'))\n            {\n                printf(\"%02d:\",str[0][i]-'0');\n                cnt++;\n            }\n        }\n    }\n    for(int i=0;i<len2;i++)\n    {\n        if((str[2][i]==str[3][i] && range(str[2][i],'a','z'))  || range(str[2][i],'A','Z'))\n        {\n            printf(\"%02d\",i);\n            break;\n        }\n    }\n    return 0;\n\n}\n```\n\n\n\n","slug":"PAT Basic Level/1014 福尔摩斯的约会","published":1,"date":"2025-02-09T15:24:15.859Z","updated":"2025-02-09T15:20:19.072Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbw0016r8tkdqn3gpbr","content":"<p><strong>1014 福尔摩斯的约会 (20 分)</strong></p>\n<p>大侦探福尔摩斯接到一张奇怪的字条：</p>\n<p>我们约会吧！  3485djDkxh4hhGE  2984akDfkkkkggEdsb  s&amp;hgsfdk  d&amp;Hyscvnm</p>\n<p>大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间星期四 14:04，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 D，代表星期四；第 2 对相同的字符是 E ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 A 到 N 表示）；后面两字符串第 1 对相同的英文字母 s 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p>\n<p>输入格式：</p>\n<p>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p>\n<p>输出格式：</p>\n<p>在一行中输出约会的时间，格式为 DAY HH:MM，其中 DAY 是某星期的 3 字符缩写，即 MON 表示星期一，TUE 表示星期二，WED 表示星期三，THU 表示星期四，FRI 表示星期五，SAT 表示星期六，SUN 表示星期日。题目输入保证每个测试存在唯一解。</p>\n<p>输入样例：</p>\n<p>3485djDkxh4hhGE  2984akDfkkkkggEdsb  s&amp;hgsfdk  d&amp;Hyscvnm</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>THU 14:04</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>200 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> range(num,x,y) (num&gt;=x&amp;&amp;num&lt;=y)</span></span><br><span class=\"line\">string week[<span class=\"number\">8</span>]=&#123;<span class=\"string\">&quot;MON&quot;</span>,<span class=\"string\">&quot;TUE&quot;</span>,<span class=\"string\">&quot;WED&quot;</span>,<span class=\"string\">&quot;THU&quot;</span>,<span class=\"string\">&quot;FRI&quot;</span>,<span class=\"string\">&quot;SAT&quot;</span>,<span class=\"string\">&quot;SUN&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    string str[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)</span><br><span class=\"line\">            cin &gt;&gt; str[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> len1=<span class=\"built_in\">min</span>(str[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>(),str[<span class=\"number\">1</span>].<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> len2=<span class=\"built_in\">min</span>(str[<span class=\"number\">2</span>].<span class=\"built_in\">size</span>(),str[<span class=\"number\">3</span>].<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len1;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt==<span class=\"number\">0</span> &amp;&amp; str[<span class=\"number\">0</span>][i]==str[<span class=\"number\">1</span>][i] &amp;&amp; <span class=\"built_in\">range</span>(str[<span class=\"number\">0</span>][i],<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;G&#x27;</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;week[str[<span class=\"number\">0</span>][i]-<span class=\"string\">&#x27;A&#x27;</span>]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt==<span class=\"number\">1</span> &amp;&amp; str[<span class=\"number\">0</span>][i]==str[<span class=\"number\">1</span>][i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">range</span>(str[<span class=\"number\">0</span>][i],<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;N&#x27;</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout&lt;&lt;(<span class=\"number\">10</span>+str[<span class=\"number\">0</span>][i]-<span class=\"string\">&#x27;A&#x27;</span>)&lt;&lt;<span class=\"string\">&quot;:&quot;</span>;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">range</span>(str[<span class=\"number\">0</span>][i],<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;9&#x27;</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02d:&quot;</span>,str[<span class=\"number\">0</span>][i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len2;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((str[<span class=\"number\">2</span>][i]==str[<span class=\"number\">3</span>][i] &amp;&amp; <span class=\"built_in\">range</span>(str[<span class=\"number\">2</span>][i],<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;z&#x27;</span>))  || <span class=\"built_in\">range</span>(str[<span class=\"number\">2</span>][i],<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;Z&#x27;</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02d&quot;</span>,i);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","excerpt":"","more":"<p><strong>1014 福尔摩斯的约会 (20 分)</strong></p>\n<p>大侦探福尔摩斯接到一张奇怪的字条：</p>\n<p>我们约会吧！  3485djDkxh4hhGE  2984akDfkkkkggEdsb  s&amp;hgsfdk  d&amp;Hyscvnm</p>\n<p>大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间星期四 14:04，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 D，代表星期四；第 2 对相同的字符是 E ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 A 到 N 表示）；后面两字符串第 1 对相同的英文字母 s 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p>\n<p>输入格式：</p>\n<p>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p>\n<p>输出格式：</p>\n<p>在一行中输出约会的时间，格式为 DAY HH:MM，其中 DAY 是某星期的 3 字符缩写，即 MON 表示星期一，TUE 表示星期二，WED 表示星期三，THU 表示星期四，FRI 表示星期五，SAT 表示星期六，SUN 表示星期日。题目输入保证每个测试存在唯一解。</p>\n<p>输入样例：</p>\n<p>3485djDkxh4hhGE  2984akDfkkkkggEdsb  s&amp;hgsfdk  d&amp;Hyscvnm</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>THU 14:04</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Yue</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>200 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> range(num,x,y) (num&gt;=x&amp;&amp;num&lt;=y)</span></span><br><span class=\"line\">string week[<span class=\"number\">8</span>]=&#123;<span class=\"string\">&quot;MON&quot;</span>,<span class=\"string\">&quot;TUE&quot;</span>,<span class=\"string\">&quot;WED&quot;</span>,<span class=\"string\">&quot;THU&quot;</span>,<span class=\"string\">&quot;FRI&quot;</span>,<span class=\"string\">&quot;SAT&quot;</span>,<span class=\"string\">&quot;SUN&quot;</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    string str[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)</span><br><span class=\"line\">            cin &gt;&gt; str[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> len1=<span class=\"built_in\">min</span>(str[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>(),str[<span class=\"number\">1</span>].<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> len2=<span class=\"built_in\">min</span>(str[<span class=\"number\">2</span>].<span class=\"built_in\">size</span>(),str[<span class=\"number\">3</span>].<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len1;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt==<span class=\"number\">0</span> &amp;&amp; str[<span class=\"number\">0</span>][i]==str[<span class=\"number\">1</span>][i] &amp;&amp; <span class=\"built_in\">range</span>(str[<span class=\"number\">0</span>][i],<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;G&#x27;</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;week[str[<span class=\"number\">0</span>][i]-<span class=\"string\">&#x27;A&#x27;</span>]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt==<span class=\"number\">1</span> &amp;&amp; str[<span class=\"number\">0</span>][i]==str[<span class=\"number\">1</span>][i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">range</span>(str[<span class=\"number\">0</span>][i],<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;N&#x27;</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout&lt;&lt;(<span class=\"number\">10</span>+str[<span class=\"number\">0</span>][i]-<span class=\"string\">&#x27;A&#x27;</span>)&lt;&lt;<span class=\"string\">&quot;:&quot;</span>;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">range</span>(str[<span class=\"number\">0</span>][i],<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;9&#x27;</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02d:&quot;</span>,str[<span class=\"number\">0</span>][i]-<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len2;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((str[<span class=\"number\">2</span>][i]==str[<span class=\"number\">3</span>][i] &amp;&amp; <span class=\"built_in\">range</span>(str[<span class=\"number\">2</span>][i],<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;z&#x27;</span>))  || <span class=\"built_in\">range</span>(str[<span class=\"number\">2</span>][i],<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;Z&#x27;</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02d&quot;</span>,i);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n\n\n\n\n","source":"_posts/PAT Basic Level/模板.md","raw":"---\ntitle: \ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n\n\n\n\n","slug":"PAT Basic Level/模板","published":1,"date":"2025-02-09T15:24:15.861Z","updated":"2025-02-09T15:20:19.072Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbw0019r8tkdtr9ezdb","content":"","excerpt":"","more":""},{"title":"1_ALSA架构简介","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\nALSA架构简介\n\n![](./1_ALSA架构简介/alsa.png)\n\n**ALSA设备文件结构**\n\n  我们从alsa在linux中的设备文件结构开始我们的alsa之旅. 看看我的电脑中的alsa驱动的设备文件结构:\n\n```bash\n$ cd /dev/snd\n$ ls -l\ncrw-rw----+ 1 root audio 116, 8 2011-02-23 21:38 controlC0\ncrw-rw----+ 1 root audio 116, 4 2011-02-23 21:38 midiC0D0\ncrw-rw----+ 1 root audio 116, 7 2011-02-23 21:39 pcmC0D0c\ncrw-rw----+ 1 root audio 116, 6 2011-02-23 21:56 pcmC0D0p\ncrw-rw----+ 1 root audio 116, 5 2011-02-23 21:38 pcmC0D1p\ncrw-rw----+ 1 root audio 116, 3 2011-02-23 21:38 seq\ncrw-rw----+ 1 root audio 116, 2 2011-02-23 21:38 timer\n$\n```\n\n  我们可以看到以下设备文件:\n\n- controlC0 -->         用于声卡的控制，例如通道选择，混音，麦克风的控制等\n- midiC0D0 -->        用于播放midi音频\n- pcmC0D0c --〉        用于录音的pcm设备\n- pcmC0D0p --〉        用于播放的pcm设备\n- seq --〉            音序器\n- timer --〉            定时器\n\n其中，C0D0代表的是声卡0中的设备0，pcmC0D0c最后一个c代表capture，pcmC0D0p最后一个p代表playback，这些都是alsa-driver中的命名规则。\n\n在include/sound/core.h中，定义了以下设备类型：\n\n```c\n#define\tSNDRV_DEV_TOPLEVEL\t((__force snd_device_type_t) 0)\n#define\tSNDRV_DEV_CONTROL\t((__force snd_device_type_t) 1)\n#define\tSNDRV_DEV_LOWLEVEL_PRE\t((__force snd_device_type_t) 2)\n#define\tSNDRV_DEV_LOWLEVEL_NORMAL ((__force snd_device_type_t) 0x1000)\n#define\tSNDRV_DEV_PCM\t\t((__force snd_device_type_t) 0x1001)\n#define\tSNDRV_DEV_RAWMIDI\t((__force snd_device_type_t) 0x1002)\n#define\tSNDRV_DEV_TIMER\t\t((__force snd_device_type_t) 0x1003)\n#define\tSNDRV_DEV_SEQUENCER\t((__force snd_device_type_t) 0x1004)\n#define\tSNDRV_DEV_HWDEP\t\t((__force snd_device_type_t) 0x1005)\n#define\tSNDRV_DEV_INFO\t\t((__force snd_device_type_t) 0x1006)\n#define\tSNDRV_DEV_BUS\t\t((__force snd_device_type_t) 0x1007)\n#define\tSNDRV_DEV_CODEC\t\t((__force snd_device_type_t) 0x1008)\n#define\tSNDRV_DEV_JACK          ((__force snd_device_type_t) 0x1009)\n#define\tSNDRV_DEV_LOWLEVEL\t((__force snd_device_type_t) 0x2000)\n```\n\n通常，我们更关心的是pcm和control这两种设备。\n\n**驱动的代码文件结构**\n\n在Linux2.6代码树中，Alsa的代码文件结构如下：\n\n  \n\n```bash\nsound\n      /core\n           /oss\n           /seq\n      /ioctl32\n      /include\n      /drivers\n      /i2c\n      /synth\n          /emux\n      /pci\n          /(cards)\n      /isa\n          /(cards)\n      /arm\n      /ppc\n      /sparc\n      /usb\n      /pcmcia /(cards)\n      /oss\n      /soc\n          /codecs\n```\n\n\n\n- core        该目录包含了ALSA驱动的中间层，它是整个ALSA驱动的核心部分\n- core/oss    包含模拟旧的OSS架构的PCM和Mixer模块\n- core/seq    有关音序器相关的代码\n- include     ALSA驱动的公共头文件目录，该目录的头文件需要导出给用户空间的应用程序使用，通常，驱动模块私有的头文件不应放置在这里\n-  drivers      放置一些与CPU、BUS架构无关的公用代码\n- i2c         ALSA自己的I2C控制代码\n- pci         pci声卡的顶层目录，子目录包含各种pci声卡的代码\n- isa         isa声卡的顶层目录，子目录包含各种isa声卡的代码\n- soc        针对system-on-chip体系的中间层代码\n- soc/codecs  针对soc体系的各种codec的代码，与平台无关\n\n \n","source":"_posts/linux驱动 alsa模型/1_ALSA架构简介.md","raw":"---\ntitle: 1_ALSA架构简介\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c\n- alsa\ncategories:\n- linux驱动 alsa模型\n---\n\nALSA架构简介\n\n![](./1_ALSA架构简介/alsa.png)\n\n**ALSA设备文件结构**\n\n  我们从alsa在linux中的设备文件结构开始我们的alsa之旅. 看看我的电脑中的alsa驱动的设备文件结构:\n\n```bash\n$ cd /dev/snd\n$ ls -l\ncrw-rw----+ 1 root audio 116, 8 2011-02-23 21:38 controlC0\ncrw-rw----+ 1 root audio 116, 4 2011-02-23 21:38 midiC0D0\ncrw-rw----+ 1 root audio 116, 7 2011-02-23 21:39 pcmC0D0c\ncrw-rw----+ 1 root audio 116, 6 2011-02-23 21:56 pcmC0D0p\ncrw-rw----+ 1 root audio 116, 5 2011-02-23 21:38 pcmC0D1p\ncrw-rw----+ 1 root audio 116, 3 2011-02-23 21:38 seq\ncrw-rw----+ 1 root audio 116, 2 2011-02-23 21:38 timer\n$\n```\n\n  我们可以看到以下设备文件:\n\n- controlC0 -->         用于声卡的控制，例如通道选择，混音，麦克风的控制等\n- midiC0D0 -->        用于播放midi音频\n- pcmC0D0c --〉        用于录音的pcm设备\n- pcmC0D0p --〉        用于播放的pcm设备\n- seq --〉            音序器\n- timer --〉            定时器\n\n其中，C0D0代表的是声卡0中的设备0，pcmC0D0c最后一个c代表capture，pcmC0D0p最后一个p代表playback，这些都是alsa-driver中的命名规则。\n\n在include/sound/core.h中，定义了以下设备类型：\n\n```c\n#define\tSNDRV_DEV_TOPLEVEL\t((__force snd_device_type_t) 0)\n#define\tSNDRV_DEV_CONTROL\t((__force snd_device_type_t) 1)\n#define\tSNDRV_DEV_LOWLEVEL_PRE\t((__force snd_device_type_t) 2)\n#define\tSNDRV_DEV_LOWLEVEL_NORMAL ((__force snd_device_type_t) 0x1000)\n#define\tSNDRV_DEV_PCM\t\t((__force snd_device_type_t) 0x1001)\n#define\tSNDRV_DEV_RAWMIDI\t((__force snd_device_type_t) 0x1002)\n#define\tSNDRV_DEV_TIMER\t\t((__force snd_device_type_t) 0x1003)\n#define\tSNDRV_DEV_SEQUENCER\t((__force snd_device_type_t) 0x1004)\n#define\tSNDRV_DEV_HWDEP\t\t((__force snd_device_type_t) 0x1005)\n#define\tSNDRV_DEV_INFO\t\t((__force snd_device_type_t) 0x1006)\n#define\tSNDRV_DEV_BUS\t\t((__force snd_device_type_t) 0x1007)\n#define\tSNDRV_DEV_CODEC\t\t((__force snd_device_type_t) 0x1008)\n#define\tSNDRV_DEV_JACK          ((__force snd_device_type_t) 0x1009)\n#define\tSNDRV_DEV_LOWLEVEL\t((__force snd_device_type_t) 0x2000)\n```\n\n通常，我们更关心的是pcm和control这两种设备。\n\n**驱动的代码文件结构**\n\n在Linux2.6代码树中，Alsa的代码文件结构如下：\n\n  \n\n```bash\nsound\n      /core\n           /oss\n           /seq\n      /ioctl32\n      /include\n      /drivers\n      /i2c\n      /synth\n          /emux\n      /pci\n          /(cards)\n      /isa\n          /(cards)\n      /arm\n      /ppc\n      /sparc\n      /usb\n      /pcmcia /(cards)\n      /oss\n      /soc\n          /codecs\n```\n\n\n\n- core        该目录包含了ALSA驱动的中间层，它是整个ALSA驱动的核心部分\n- core/oss    包含模拟旧的OSS架构的PCM和Mixer模块\n- core/seq    有关音序器相关的代码\n- include     ALSA驱动的公共头文件目录，该目录的头文件需要导出给用户空间的应用程序使用，通常，驱动模块私有的头文件不应放置在这里\n-  drivers      放置一些与CPU、BUS架构无关的公用代码\n- i2c         ALSA自己的I2C控制代码\n- pci         pci声卡的顶层目录，子目录包含各种pci声卡的代码\n- isa         isa声卡的顶层目录，子目录包含各种isa声卡的代码\n- soc        针对system-on-chip体系的中间层代码\n- soc/codecs  针对soc体系的各种codec的代码，与平台无关\n\n \n","slug":"linux驱动 alsa模型/1_ALSA架构简介","published":1,"date":"2025-02-09T15:24:15.835Z","updated":"2025-02-09T15:20:19.073Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbx001dr8tk3acxdpaz","content":"<p>ALSA架构简介</p>\n<p><img src=\"/./1_ALSA%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/alsa.png\"></p>\n<p><strong>ALSA设备文件结构</strong></p>\n<p>  我们从alsa在linux中的设备文件结构开始我们的alsa之旅. 看看我的电脑中的alsa驱动的设备文件结构:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /dev/snd</span><br><span class=\"line\">$ <span class=\"built_in\">ls</span> -l</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 8 2011-02-23 21:38 controlC0</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 4 2011-02-23 21:38 midiC0D0</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 7 2011-02-23 21:39 pcmC0D0c</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 6 2011-02-23 21:56 pcmC0D0p</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 5 2011-02-23 21:38 pcmC0D1p</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 3 2011-02-23 21:38 <span class=\"built_in\">seq</span></span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 2 2011-02-23 21:38 timer</span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure>\n\n<p>  我们可以看到以下设备文件:</p>\n<ul>\n<li>controlC0 –&gt;         用于声卡的控制，例如通道选择，混音，麦克风的控制等</li>\n<li>midiC0D0 –&gt;        用于播放midi音频</li>\n<li>pcmC0D0c –〉        用于录音的pcm设备</li>\n<li>pcmC0D0p –〉        用于播放的pcm设备</li>\n<li>seq –〉            音序器</li>\n<li>timer –〉            定时器</li>\n</ul>\n<p>其中，C0D0代表的是声卡0中的设备0，pcmC0D0c最后一个c代表capture，pcmC0D0p最后一个p代表playback，这些都是alsa-driver中的命名规则。</p>\n<p>在include&#x2F;sound&#x2F;core.h中，定义了以下设备类型：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_TOPLEVEL\t((__force snd_device_type_t) 0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_CONTROL\t((__force snd_device_type_t) 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_LOWLEVEL_PRE\t((__force snd_device_type_t) 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_LOWLEVEL_NORMAL ((__force snd_device_type_t) 0x1000)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_PCM\t\t((__force snd_device_type_t) 0x1001)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_RAWMIDI\t((__force snd_device_type_t) 0x1002)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_TIMER\t\t((__force snd_device_type_t) 0x1003)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_SEQUENCER\t((__force snd_device_type_t) 0x1004)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_HWDEP\t\t((__force snd_device_type_t) 0x1005)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_INFO\t\t((__force snd_device_type_t) 0x1006)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_BUS\t\t((__force snd_device_type_t) 0x1007)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_CODEC\t\t((__force snd_device_type_t) 0x1008)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_JACK          ((__force snd_device_type_t) 0x1009)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_LOWLEVEL\t((__force snd_device_type_t) 0x2000)</span></span><br></pre></td></tr></table></figure>\n\n<p>通常，我们更关心的是pcm和control这两种设备。</p>\n<p><strong>驱动的代码文件结构</strong></p>\n<p>在Linux2.6代码树中，Alsa的代码文件结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sound</span><br><span class=\"line\">      /core</span><br><span class=\"line\">           /oss</span><br><span class=\"line\">           /seq</span><br><span class=\"line\">      /ioctl32</span><br><span class=\"line\">      /include</span><br><span class=\"line\">      /drivers</span><br><span class=\"line\">      /i2c</span><br><span class=\"line\">      /synth</span><br><span class=\"line\">          /emux</span><br><span class=\"line\">      /pci</span><br><span class=\"line\">          /(cards)</span><br><span class=\"line\">      /isa</span><br><span class=\"line\">          /(cards)</span><br><span class=\"line\">      /arm</span><br><span class=\"line\">      /ppc</span><br><span class=\"line\">      /sparc</span><br><span class=\"line\">      /usb</span><br><span class=\"line\">      /pcmcia /(cards)</span><br><span class=\"line\">      /oss</span><br><span class=\"line\">      /soc</span><br><span class=\"line\">          /codecs</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>core        该目录包含了ALSA驱动的中间层，它是整个ALSA驱动的核心部分</li>\n<li>core&#x2F;oss    包含模拟旧的OSS架构的PCM和Mixer模块</li>\n<li>core&#x2F;seq    有关音序器相关的代码</li>\n<li>include     ALSA驱动的公共头文件目录，该目录的头文件需要导出给用户空间的应用程序使用，通常，驱动模块私有的头文件不应放置在这里</li>\n<li>drivers      放置一些与CPU、BUS架构无关的公用代码</li>\n<li>i2c         ALSA自己的I2C控制代码</li>\n<li>pci         pci声卡的顶层目录，子目录包含各种pci声卡的代码</li>\n<li>isa         isa声卡的顶层目录，子目录包含各种isa声卡的代码</li>\n<li>soc        针对system-on-chip体系的中间层代码</li>\n<li>soc&#x2F;codecs  针对soc体系的各种codec的代码，与平台无关</li>\n</ul>\n","excerpt":"","more":"<p>ALSA架构简介</p>\n<p><img src=\"/./1_ALSA%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/alsa.png\"></p>\n<p><strong>ALSA设备文件结构</strong></p>\n<p>  我们从alsa在linux中的设备文件结构开始我们的alsa之旅. 看看我的电脑中的alsa驱动的设备文件结构:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /dev/snd</span><br><span class=\"line\">$ <span class=\"built_in\">ls</span> -l</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 8 2011-02-23 21:38 controlC0</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 4 2011-02-23 21:38 midiC0D0</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 7 2011-02-23 21:39 pcmC0D0c</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 6 2011-02-23 21:56 pcmC0D0p</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 5 2011-02-23 21:38 pcmC0D1p</span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 3 2011-02-23 21:38 <span class=\"built_in\">seq</span></span><br><span class=\"line\">crw-rw----+ 1 root audio 116, 2 2011-02-23 21:38 timer</span><br><span class=\"line\">$</span><br></pre></td></tr></table></figure>\n\n<p>  我们可以看到以下设备文件:</p>\n<ul>\n<li>controlC0 –&gt;         用于声卡的控制，例如通道选择，混音，麦克风的控制等</li>\n<li>midiC0D0 –&gt;        用于播放midi音频</li>\n<li>pcmC0D0c –〉        用于录音的pcm设备</li>\n<li>pcmC0D0p –〉        用于播放的pcm设备</li>\n<li>seq –〉            音序器</li>\n<li>timer –〉            定时器</li>\n</ul>\n<p>其中，C0D0代表的是声卡0中的设备0，pcmC0D0c最后一个c代表capture，pcmC0D0p最后一个p代表playback，这些都是alsa-driver中的命名规则。</p>\n<p>在include&#x2F;sound&#x2F;core.h中，定义了以下设备类型：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_TOPLEVEL\t((__force snd_device_type_t) 0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_CONTROL\t((__force snd_device_type_t) 1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_LOWLEVEL_PRE\t((__force snd_device_type_t) 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_LOWLEVEL_NORMAL ((__force snd_device_type_t) 0x1000)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_PCM\t\t((__force snd_device_type_t) 0x1001)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_RAWMIDI\t((__force snd_device_type_t) 0x1002)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_TIMER\t\t((__force snd_device_type_t) 0x1003)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_SEQUENCER\t((__force snd_device_type_t) 0x1004)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_HWDEP\t\t((__force snd_device_type_t) 0x1005)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_INFO\t\t((__force snd_device_type_t) 0x1006)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_BUS\t\t((__force snd_device_type_t) 0x1007)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_CODEC\t\t((__force snd_device_type_t) 0x1008)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_JACK          ((__force snd_device_type_t) 0x1009)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tSNDRV_DEV_LOWLEVEL\t((__force snd_device_type_t) 0x2000)</span></span><br></pre></td></tr></table></figure>\n\n<p>通常，我们更关心的是pcm和control这两种设备。</p>\n<p><strong>驱动的代码文件结构</strong></p>\n<p>在Linux2.6代码树中，Alsa的代码文件结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sound</span><br><span class=\"line\">      /core</span><br><span class=\"line\">           /oss</span><br><span class=\"line\">           /seq</span><br><span class=\"line\">      /ioctl32</span><br><span class=\"line\">      /include</span><br><span class=\"line\">      /drivers</span><br><span class=\"line\">      /i2c</span><br><span class=\"line\">      /synth</span><br><span class=\"line\">          /emux</span><br><span class=\"line\">      /pci</span><br><span class=\"line\">          /(cards)</span><br><span class=\"line\">      /isa</span><br><span class=\"line\">          /(cards)</span><br><span class=\"line\">      /arm</span><br><span class=\"line\">      /ppc</span><br><span class=\"line\">      /sparc</span><br><span class=\"line\">      /usb</span><br><span class=\"line\">      /pcmcia /(cards)</span><br><span class=\"line\">      /oss</span><br><span class=\"line\">      /soc</span><br><span class=\"line\">          /codecs</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>core        该目录包含了ALSA驱动的中间层，它是整个ALSA驱动的核心部分</li>\n<li>core&#x2F;oss    包含模拟旧的OSS架构的PCM和Mixer模块</li>\n<li>core&#x2F;seq    有关音序器相关的代码</li>\n<li>include     ALSA驱动的公共头文件目录，该目录的头文件需要导出给用户空间的应用程序使用，通常，驱动模块私有的头文件不应放置在这里</li>\n<li>drivers      放置一些与CPU、BUS架构无关的公用代码</li>\n<li>i2c         ALSA自己的I2C控制代码</li>\n<li>pci         pci声卡的顶层目录，子目录包含各种pci声卡的代码</li>\n<li>isa         isa声卡的顶层目录，子目录包含各种isa声卡的代码</li>\n<li>soc        针对system-on-chip体系的中间层代码</li>\n<li>soc&#x2F;codecs  针对soc体系的各种codec的代码，与平台无关</li>\n</ul>\n"},{"title":"1015 德才论","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n**1015 德才论 (25 分)**\n\n宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”\n\n现给出一批考生的德才分数，请根据司马光的理论给出录取排名。\n\n输入格式：\n\n输入第一行给出 3 个正整数，分别为：*N*（≤105），即考生总数；*L*（≥60），为录取最低分数线，即德分和才分均不低于 *L* 的考生才有资格被考虑录取；*H*（<100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 *H*，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 *L* 的考生也按总分排序，但排在第三类考生之后。\n\n随后 *N* 行，每行给出一位考生的信息，包括：准考证号 德分 才分，其中准考证号为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。\n\n输出格式：\n\n输出第一行首先给出达到最低分数线的考生人数 *M*，随后 *M* 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。\n\n输入样例：\n\n14 60 80 10000001 64 90 10000002 90 60 10000011 85 80 10000003 85 80 10000004 80 85 10000005 82 77 10000006 83 76 10000007 90 78 10000008 75 79 10000009 59 90 10000010 88 45 10000012 80 100 10000013 90 99 10000014 66 60\n\n结尾无空行\n\n输出样例：\n\n12 10000013 90 99 10000012 80 100 10000003 85 80 10000011 85 80 10000004 80 85 10000007 90 78 10000006 83 76 10000005 82 77 10000002 90 60 10000014 66 60 10000008 75 79 10000001 64 90\n\n结尾无空行\n\n作者\n\n**CHEN, Li**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nstruct node{\n    int no;//准考证号 \n    int dscore;//德分 \n    int cscore;//才分 \n    int sumscore;//总分 \n};\n\nbool cmp(node a,node b) {\n    if (a.sumscore > b.sumscore) {\n        return true;//升序 \n    } else if (a.sumscore == b.sumscore) {//总分相同 \n        if (a.dscore > b.dscore) {\n            return true;//升序 \n        } else if (a.dscore == b.dscore) { //德分相同 \n                return a.no < b.no;//降序 \n        }\n    }\n    return false;\n}\n\nint main() {\n    int N, L, H;\n    int cnt = 0;//计数\n    cin >> N >> L >> H;\n    vector<node>v[4];//4个容器\n    for (int i = 0; i < N; i++) { \n        node stu;\n        cin >> stu.no >> stu.dscore >> stu.cscore;\n        stu.sumscore = stu.dscore + stu.cscore;//计算总分\n        if (stu.dscore >=L &&stu.cscore >= L) {\n            cnt++;\n            if (stu.dscore >= H && stu.cscore >= H) {\n                v[0].push_back(stu);      //第一类 \n            } else if (stu.dscore >= H) {\n                v[1].push_back(stu); //第二类 \n            } else if (stu.dscore >= stu.cscore){\n                v[2].push_back(stu);//第三类 \n            }else {\n                v[3].push_back(stu);//第四类 \n            }\n        }\n    }\n    cout << cnt << endl;\n    for (int i = 0; i < 4; i++) {\n        sort(v[i].begin(), v[i].end(), cmp);\n    }\n    for(int i = 0; i < 4; i++){\n        for(unsigned int j = 0; j < v[i].size(); j++){\n            printf(\"%d %d %d\\n\",v[i][j].no, v[i][j].dscore, v[i][j].cscore);\n        }\n    }\n    return 0;\n}\n```\n\n\n\n","source":"_posts/PAT Basic Level/1015 德才论.md","raw":"---\ntitle: 1015 德才论\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- c++\n- PAT\ncategories:\n- PAT(Basic Level)\n---\n\n**1015 德才论 (25 分)**\n\n宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”\n\n现给出一批考生的德才分数，请根据司马光的理论给出录取排名。\n\n输入格式：\n\n输入第一行给出 3 个正整数，分别为：*N*（≤105），即考生总数；*L*（≥60），为录取最低分数线，即德分和才分均不低于 *L* 的考生才有资格被考虑录取；*H*（<100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 *H*，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 *L* 的考生也按总分排序，但排在第三类考生之后。\n\n随后 *N* 行，每行给出一位考生的信息，包括：准考证号 德分 才分，其中准考证号为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。\n\n输出格式：\n\n输出第一行首先给出达到最低分数线的考生人数 *M*，随后 *M* 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。\n\n输入样例：\n\n14 60 80 10000001 64 90 10000002 90 60 10000011 85 80 10000003 85 80 10000004 80 85 10000005 82 77 10000006 83 76 10000007 90 78 10000008 75 79 10000009 59 90 10000010 88 45 10000012 80 100 10000013 90 99 10000014 66 60\n\n结尾无空行\n\n输出样例：\n\n12 10000013 90 99 10000012 80 100 10000003 85 80 10000011 85 80 10000004 80 85 10000007 90 78 10000006 83 76 10000005 82 77 10000002 90 60 10000014 66 60 10000008 75 79 10000001 64 90\n\n结尾无空行\n\n作者\n\n**CHEN, Li**\n\n单位\n\n浙江大学\n\n代码长度限制\n\n16 KB\n\n时间限制\n\n400 ms\n\n内存限制\n\n64 MB\n\nC++ (g++)\n\n```c++\n#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nstruct node{\n    int no;//准考证号 \n    int dscore;//德分 \n    int cscore;//才分 \n    int sumscore;//总分 \n};\n\nbool cmp(node a,node b) {\n    if (a.sumscore > b.sumscore) {\n        return true;//升序 \n    } else if (a.sumscore == b.sumscore) {//总分相同 \n        if (a.dscore > b.dscore) {\n            return true;//升序 \n        } else if (a.dscore == b.dscore) { //德分相同 \n                return a.no < b.no;//降序 \n        }\n    }\n    return false;\n}\n\nint main() {\n    int N, L, H;\n    int cnt = 0;//计数\n    cin >> N >> L >> H;\n    vector<node>v[4];//4个容器\n    for (int i = 0; i < N; i++) { \n        node stu;\n        cin >> stu.no >> stu.dscore >> stu.cscore;\n        stu.sumscore = stu.dscore + stu.cscore;//计算总分\n        if (stu.dscore >=L &&stu.cscore >= L) {\n            cnt++;\n            if (stu.dscore >= H && stu.cscore >= H) {\n                v[0].push_back(stu);      //第一类 \n            } else if (stu.dscore >= H) {\n                v[1].push_back(stu); //第二类 \n            } else if (stu.dscore >= stu.cscore){\n                v[2].push_back(stu);//第三类 \n            }else {\n                v[3].push_back(stu);//第四类 \n            }\n        }\n    }\n    cout << cnt << endl;\n    for (int i = 0; i < 4; i++) {\n        sort(v[i].begin(), v[i].end(), cmp);\n    }\n    for(int i = 0; i < 4; i++){\n        for(unsigned int j = 0; j < v[i].size(); j++){\n            printf(\"%d %d %d\\n\",v[i][j].no, v[i][j].dscore, v[i][j].cscore);\n        }\n    }\n    return 0;\n}\n```\n\n\n\n","slug":"PAT Basic Level/1015 德才论","published":1,"date":"2025-02-09T15:24:15.860Z","updated":"2025-02-09T15:20:19.072Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rbx001gr8tkhwma419j","content":"<p><strong>1015 德才论 (25 分)</strong></p>\n<p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p>\n<p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p>\n<p>输入格式：</p>\n<p>输入第一行给出 3 个正整数，分别为：<em>N</em>（≤105），即考生总数；<em>L</em>（≥60），为录取最低分数线，即德分和才分均不低于 <em>L</em> 的考生才有资格被考虑录取；<em>H</em>（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 <em>H</em>，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 <em>L</em> 的考生也按总分排序，但排在第三类考生之后。</p>\n<p>随后 <em>N</em> 行，每行给出一位考生的信息，包括：准考证号 德分 才分，其中准考证号为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p>\n<p>输出格式：</p>\n<p>输出第一行首先给出达到最低分数线的考生人数 <em>M</em>，随后 <em>M</em> 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。</p>\n<p>输入样例：</p>\n<p>14 60 80 10000001 64 90 10000002 90 60 10000011 85 80 10000003 85 80 10000004 80 85 10000005 82 77 10000006 83 76 10000007 90 78 10000008 75 79 10000009 59 90 10000010 88 45 10000012 80 100 10000013 90 99 10000014 66 60</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>12 10000013 90 99 10000012 80 100 10000003 85 80 10000011 85 80 10000004 80 85 10000007 90 78 10000006 83 76 10000005 82 77 10000002 90 60 10000014 66 60 10000008 75 79 10000001 64 90</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Li</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> no;<span class=\"comment\">//准考证号 </span></span><br><span class=\"line\">    <span class=\"type\">int</span> dscore;<span class=\"comment\">//德分 </span></span><br><span class=\"line\">    <span class=\"type\">int</span> cscore;<span class=\"comment\">//才分 </span></span><br><span class=\"line\">    <span class=\"type\">int</span> sumscore;<span class=\"comment\">//总分 </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(node a,node b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.sumscore &gt; b.sumscore) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//升序 </span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.sumscore == b.sumscore) &#123;<span class=\"comment\">//总分相同 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a.dscore &gt; b.dscore) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//升序 </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.dscore == b.dscore) &#123; <span class=\"comment\">//德分相同 </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> a.no &lt; b.no;<span class=\"comment\">//降序 </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N, L, H;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;<span class=\"comment\">//计数</span></span><br><span class=\"line\">    cin &gt;&gt; N &gt;&gt; L &gt;&gt; H;</span><br><span class=\"line\">    vector&lt;node&gt;v[<span class=\"number\">4</span>];<span class=\"comment\">//4个容器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123; </span><br><span class=\"line\">        node stu;</span><br><span class=\"line\">        cin &gt;&gt; stu.no &gt;&gt; stu.dscore &gt;&gt; stu.cscore;</span><br><span class=\"line\">        stu.sumscore = stu.dscore + stu.cscore;<span class=\"comment\">//计算总分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stu.dscore &gt;=L &amp;&amp;stu.cscore &gt;= L) &#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stu.dscore &gt;= H &amp;&amp; stu.cscore &gt;= H) &#123;</span><br><span class=\"line\">                v[<span class=\"number\">0</span>].<span class=\"built_in\">push_back</span>(stu);      <span class=\"comment\">//第一类 </span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stu.dscore &gt;= H) &#123;</span><br><span class=\"line\">                v[<span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(stu); <span class=\"comment\">//第二类 </span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stu.dscore &gt;= stu.cscore)&#123;</span><br><span class=\"line\">                v[<span class=\"number\">2</span>].<span class=\"built_in\">push_back</span>(stu);<span class=\"comment\">//第三类 </span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                v[<span class=\"number\">3</span>].<span class=\"built_in\">push_back</span>(stu);<span class=\"comment\">//第四类 </span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(v[i].<span class=\"built_in\">begin</span>(), v[i].<span class=\"built_in\">end</span>(), cmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; v[i].<span class=\"built_in\">size</span>(); j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d\\n&quot;</span>,v[i][j].no, v[i][j].dscore, v[i][j].cscore);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","excerpt":"","more":"<p><strong>1015 德才论 (25 分)</strong></p>\n<p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p>\n<p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p>\n<p>输入格式：</p>\n<p>输入第一行给出 3 个正整数，分别为：<em>N</em>（≤105），即考生总数；<em>L</em>（≥60），为录取最低分数线，即德分和才分均不低于 <em>L</em> 的考生才有资格被考虑录取；<em>H</em>（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 <em>H</em>，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 <em>L</em> 的考生也按总分排序，但排在第三类考生之后。</p>\n<p>随后 <em>N</em> 行，每行给出一位考生的信息，包括：准考证号 德分 才分，其中准考证号为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p>\n<p>输出格式：</p>\n<p>输出第一行首先给出达到最低分数线的考生人数 <em>M</em>，随后 <em>M</em> 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。</p>\n<p>输入样例：</p>\n<p>14 60 80 10000001 64 90 10000002 90 60 10000011 85 80 10000003 85 80 10000004 80 85 10000005 82 77 10000006 83 76 10000007 90 78 10000008 75 79 10000009 59 90 10000010 88 45 10000012 80 100 10000013 90 99 10000014 66 60</p>\n<p>结尾无空行</p>\n<p>输出样例：</p>\n<p>12 10000013 90 99 10000012 80 100 10000003 85 80 10000011 85 80 10000004 80 85 10000007 90 78 10000006 83 76 10000005 82 77 10000002 90 60 10000014 66 60 10000008 75 79 10000001 64 90</p>\n<p>结尾无空行</p>\n<p>作者</p>\n<p><strong>CHEN, Li</strong></p>\n<p>单位</p>\n<p>浙江大学</p>\n<p>代码长度限制</p>\n<p>16 KB</p>\n<p>时间限制</p>\n<p>400 ms</p>\n<p>内存限制</p>\n<p>64 MB</p>\n<p>C++ (g++)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> no;<span class=\"comment\">//准考证号 </span></span><br><span class=\"line\">    <span class=\"type\">int</span> dscore;<span class=\"comment\">//德分 </span></span><br><span class=\"line\">    <span class=\"type\">int</span> cscore;<span class=\"comment\">//才分 </span></span><br><span class=\"line\">    <span class=\"type\">int</span> sumscore;<span class=\"comment\">//总分 </span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(node a,node b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.sumscore &gt; b.sumscore) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//升序 </span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.sumscore == b.sumscore) &#123;<span class=\"comment\">//总分相同 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a.dscore &gt; b.dscore) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//升序 </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a.dscore == b.dscore) &#123; <span class=\"comment\">//德分相同 </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> a.no &lt; b.no;<span class=\"comment\">//降序 </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N, L, H;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;<span class=\"comment\">//计数</span></span><br><span class=\"line\">    cin &gt;&gt; N &gt;&gt; L &gt;&gt; H;</span><br><span class=\"line\">    vector&lt;node&gt;v[<span class=\"number\">4</span>];<span class=\"comment\">//4个容器</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123; </span><br><span class=\"line\">        node stu;</span><br><span class=\"line\">        cin &gt;&gt; stu.no &gt;&gt; stu.dscore &gt;&gt; stu.cscore;</span><br><span class=\"line\">        stu.sumscore = stu.dscore + stu.cscore;<span class=\"comment\">//计算总分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stu.dscore &gt;=L &amp;&amp;stu.cscore &gt;= L) &#123;</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stu.dscore &gt;= H &amp;&amp; stu.cscore &gt;= H) &#123;</span><br><span class=\"line\">                v[<span class=\"number\">0</span>].<span class=\"built_in\">push_back</span>(stu);      <span class=\"comment\">//第一类 </span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stu.dscore &gt;= H) &#123;</span><br><span class=\"line\">                v[<span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(stu); <span class=\"comment\">//第二类 </span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stu.dscore &gt;= stu.cscore)&#123;</span><br><span class=\"line\">                v[<span class=\"number\">2</span>].<span class=\"built_in\">push_back</span>(stu);<span class=\"comment\">//第三类 </span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                v[<span class=\"number\">3</span>].<span class=\"built_in\">push_back</span>(stu);<span class=\"comment\">//第四类 </span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(v[i].<span class=\"built_in\">begin</span>(), v[i].<span class=\"built_in\">end</span>(), cmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; v[i].<span class=\"built_in\">size</span>(); j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %d\\n&quot;</span>,v[i][j].no, v[i][j].dscore, v[i][j].cscore);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"搭建工作环境","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n本系列是我按照书籍《Orange S：一个操作系统的实现》，自己亲自动手写一个自己的操作系统，希望以此来提\n高自己的C语言的编程能力和对操作系统的认识。由于书出版时间比较早，和实际有点出入，我就按照我实际过\n程将它们总结下来。本章是将书中的第一二章合在一起。\n\n## 一、准备工作\n### 硬件\nWindows系统电脑\n### 软件\n虚拟机\nBochs-2.6.10\n汇编编译器NASM\n\n## 二、新建源代码文件夹\n我在虚拟机的Linux环境下新建的一个XOS，同时新建chapter2文件夹存放这章源文件，新建一个boot.asm文件，并将以下内容写到文件中。\n``` assembly\n        org     07c00h                  ; 告诉编译器程序加载到7c00处\n        mov     ax, cs\n        mov     ds, ax\n        mov     es, ax\n        call    DispStr                 ; 调用显示字符串例程\n        jmp     $                       ; 无限循环\nDispStr:\n        mov     ax, BootMessage\n        mov     bp, ax                  ; ES:BP = 串地址\n        mov     cx, 16                  ; CX = 串长度\n        mov     ax, 01301h              ; AH = 13,  AL = 01h\n        mov     bx, 000ch               ; 页号为0(BH = 0) 黑底红字(BL = 0Ch,高亮)\n        mov     dl, 0\n        int     10h                     ; 10h 号中断\n        ret\nBootMessage:            db      \"Hello, OS world!\"\ntimes   510-($-$$)      db      0       ; 填充剩下的空间，使生成的二进制代码恰好为512字节\ndw      0xaa55                          ; 结束标志\n```\n\n## 三、安装GCC和NASM\n``` bash\nsudo apt-get install build-essential nasm\n```\n\n## 四、编译生成bin文件\n安装好NASM后，执行下面指令将boot.asm编译成bin文件。\n``` bash\nnasm boot.asm -o boot.bin\n```\n\n## 五、安装Bochs\n文中使用的bochs是2.3.5版本，运行configure脚本时，即使安装了相关部件也会报错，我在网上查到是由于版本\n比较老，因此我换成了2.6.10版的。要安装带调试功能的bochs，要去官网下载压缩包bochs-2.6.10.tar.gz，按照\n下面指令进行安装，在安装过程中可能有些问题，具体可以参考https://my.oschina.net/liuzhihe/blog/794036\n``` bash\ntar vxzf bochs-2.6.10.tar.gz\ncd bochs-2.6.10\nsudo ./configure --enable-debugger --enable-disasm\nsudo make\nsudo make install \n```\n\n## 六、Bochs的使用\n使用bximage命令生成软盘a.img后，使用dd命令将引导扇区写进软盘，注意boot.bin是从文件夹XOS拷贝或者剪\n切到bash安装目录下的，后面类似操作就不赘叙，默认大家都了解。\n``` bash\nroot@xzr-virtual-machine:/home/xzr/download/bochs-2.6.10# bximage\n========================================================================\n                                bximage\n  Disk Image Creation / Conversion / Resize and Commit Tool for Bochs\n         $Id: bximage.cc 13481 2018-03-30 21:04:04Z vruppert $\n========================================================================\n\n1. Create new floppy or hard disk image\n2. Convert hard disk image to other format (mode)\n3. Resize hard disk image\n4. Commit 'undoable' redolog to base image\n5. Disk image info\n\n0. Quit\n\nPlease choose one [0] 1\n\nCreate image\n\nDo you want to create a floppy disk image or a hard disk image?\nPlease type hd or fd. [hd] fd\n\nChoose the size of floppy disk image to create.\nPlease type 160k, 180k, 320k, 360k, 720k, 1.2M, 1.44M, 1.68M, 1.72M, or 2.88M.\n [1.44M] \n\nWhat should be the name of the image?\n[a.img] \n\nThe disk image 'a.img' already exists.  Are you sure you want to replace it?\nPlease type yes or no. [no] yes\n\nCreating floppy image 'a.img' with 2880 sectors\n\nThe following line should appear in your bochsrc:\n  floppya: image=\"a.img\", status=inserted\nroot@xzr-virtual-machine:/home/xzr/download/bochs-2.6.10# dd if=boot.bin of=a.img bs=512 count=1 conv=notrunc\n```\n\n### Bochs的配置文件bochsrc\n新建一个bochsrc，并将以下内容写到文件中，注意和书中略有不同，主要是keyboard，具体原因可以百度。\n``` 配置\n###############################################################\n# Configuration file for Bochs\n###############################################################\n\n# how much memory the emulated machine will have\nmegs: 32\n\n# filename of ROM images\nromimage: file=$BXSHARE/BIOS-bochs-latest\nvgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest\n\n# what disk images will be used \nfloppya: 1_44=a.img, status=inserted\n\n# choose the boot disk.\nboot: floppy\n\n# where do we send log messages?\nlog: bochsout.txt\n\n# disable the mouse\nmouse: enabled=0\n\n# enable key mapping, using US layout as default.\nkeyboard: keymap=$BXSHARE/keymaps/x11-pc-us.map\n```\n\n### 启动，输入以下命令\n``` bash\n bochs -f bochsrc\n```\n\n### 调试系统\n\n按照书中的步骤就可以尝试着调试，需要注意的是dump_cpu命令，新版本不支持，可以使用r | fp | mmx |sse\n| dreg | sreg | creg 这些命令查看相关信息，或者使用help命令查看帮助。\n\n表 2 .1部 分Bochs调试指令<img src=\"./2_搭建环境/Capture.png\" style=\"zoom: 150%;\" />\n\n","source":"_posts/动手写操作系统/2_搭建环境.md","raw":"---\ntitle: 搭建工作环境\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- 汇编\n- 操作系统\ncategories:\n- 动手写操作系统\n---\n\n本系列是我按照书籍《Orange S：一个操作系统的实现》，自己亲自动手写一个自己的操作系统，希望以此来提\n高自己的C语言的编程能力和对操作系统的认识。由于书出版时间比较早，和实际有点出入，我就按照我实际过\n程将它们总结下来。本章是将书中的第一二章合在一起。\n\n## 一、准备工作\n### 硬件\nWindows系统电脑\n### 软件\n虚拟机\nBochs-2.6.10\n汇编编译器NASM\n\n## 二、新建源代码文件夹\n我在虚拟机的Linux环境下新建的一个XOS，同时新建chapter2文件夹存放这章源文件，新建一个boot.asm文件，并将以下内容写到文件中。\n``` assembly\n        org     07c00h                  ; 告诉编译器程序加载到7c00处\n        mov     ax, cs\n        mov     ds, ax\n        mov     es, ax\n        call    DispStr                 ; 调用显示字符串例程\n        jmp     $                       ; 无限循环\nDispStr:\n        mov     ax, BootMessage\n        mov     bp, ax                  ; ES:BP = 串地址\n        mov     cx, 16                  ; CX = 串长度\n        mov     ax, 01301h              ; AH = 13,  AL = 01h\n        mov     bx, 000ch               ; 页号为0(BH = 0) 黑底红字(BL = 0Ch,高亮)\n        mov     dl, 0\n        int     10h                     ; 10h 号中断\n        ret\nBootMessage:            db      \"Hello, OS world!\"\ntimes   510-($-$$)      db      0       ; 填充剩下的空间，使生成的二进制代码恰好为512字节\ndw      0xaa55                          ; 结束标志\n```\n\n## 三、安装GCC和NASM\n``` bash\nsudo apt-get install build-essential nasm\n```\n\n## 四、编译生成bin文件\n安装好NASM后，执行下面指令将boot.asm编译成bin文件。\n``` bash\nnasm boot.asm -o boot.bin\n```\n\n## 五、安装Bochs\n文中使用的bochs是2.3.5版本，运行configure脚本时，即使安装了相关部件也会报错，我在网上查到是由于版本\n比较老，因此我换成了2.6.10版的。要安装带调试功能的bochs，要去官网下载压缩包bochs-2.6.10.tar.gz，按照\n下面指令进行安装，在安装过程中可能有些问题，具体可以参考https://my.oschina.net/liuzhihe/blog/794036\n``` bash\ntar vxzf bochs-2.6.10.tar.gz\ncd bochs-2.6.10\nsudo ./configure --enable-debugger --enable-disasm\nsudo make\nsudo make install \n```\n\n## 六、Bochs的使用\n使用bximage命令生成软盘a.img后，使用dd命令将引导扇区写进软盘，注意boot.bin是从文件夹XOS拷贝或者剪\n切到bash安装目录下的，后面类似操作就不赘叙，默认大家都了解。\n``` bash\nroot@xzr-virtual-machine:/home/xzr/download/bochs-2.6.10# bximage\n========================================================================\n                                bximage\n  Disk Image Creation / Conversion / Resize and Commit Tool for Bochs\n         $Id: bximage.cc 13481 2018-03-30 21:04:04Z vruppert $\n========================================================================\n\n1. Create new floppy or hard disk image\n2. Convert hard disk image to other format (mode)\n3. Resize hard disk image\n4. Commit 'undoable' redolog to base image\n5. Disk image info\n\n0. Quit\n\nPlease choose one [0] 1\n\nCreate image\n\nDo you want to create a floppy disk image or a hard disk image?\nPlease type hd or fd. [hd] fd\n\nChoose the size of floppy disk image to create.\nPlease type 160k, 180k, 320k, 360k, 720k, 1.2M, 1.44M, 1.68M, 1.72M, or 2.88M.\n [1.44M] \n\nWhat should be the name of the image?\n[a.img] \n\nThe disk image 'a.img' already exists.  Are you sure you want to replace it?\nPlease type yes or no. [no] yes\n\nCreating floppy image 'a.img' with 2880 sectors\n\nThe following line should appear in your bochsrc:\n  floppya: image=\"a.img\", status=inserted\nroot@xzr-virtual-machine:/home/xzr/download/bochs-2.6.10# dd if=boot.bin of=a.img bs=512 count=1 conv=notrunc\n```\n\n### Bochs的配置文件bochsrc\n新建一个bochsrc，并将以下内容写到文件中，注意和书中略有不同，主要是keyboard，具体原因可以百度。\n``` 配置\n###############################################################\n# Configuration file for Bochs\n###############################################################\n\n# how much memory the emulated machine will have\nmegs: 32\n\n# filename of ROM images\nromimage: file=$BXSHARE/BIOS-bochs-latest\nvgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest\n\n# what disk images will be used \nfloppya: 1_44=a.img, status=inserted\n\n# choose the boot disk.\nboot: floppy\n\n# where do we send log messages?\nlog: bochsout.txt\n\n# disable the mouse\nmouse: enabled=0\n\n# enable key mapping, using US layout as default.\nkeyboard: keymap=$BXSHARE/keymaps/x11-pc-us.map\n```\n\n### 启动，输入以下命令\n``` bash\n bochs -f bochsrc\n```\n\n### 调试系统\n\n按照书中的步骤就可以尝试着调试，需要注意的是dump_cpu命令，新版本不支持，可以使用r | fp | mmx |sse\n| dreg | sreg | creg 这些命令查看相关信息，或者使用help命令查看帮助。\n\n表 2 .1部 分Bochs调试指令<img src=\"./2_搭建环境/Capture.png\" style=\"zoom: 150%;\" />\n\n","slug":"动手写操作系统/2_搭建环境","published":1,"date":"2025-02-09T15:24:15.867Z","updated":"2025-02-09T15:20:19.073Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rby001lr8tk1aifccea","content":"<p>本系列是我按照书籍《Orange S：一个操作系统的实现》，自己亲自动手写一个自己的操作系统，希望以此来提<br>高自己的C语言的编程能力和对操作系统的认识。由于书出版时间比较早，和实际有点出入，我就按照我实际过<br>程将它们总结下来。本章是将书中的第一二章合在一起。</p>\n<h2 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h2><h3 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h3><p>Windows系统电脑</p>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><p>虚拟机<br>Bochs-2.6.10<br>汇编编译器NASM</p>\n<h2 id=\"二、新建源代码文件夹\"><a href=\"#二、新建源代码文件夹\" class=\"headerlink\" title=\"二、新建源代码文件夹\"></a>二、新建源代码文件夹</h2><p>我在虚拟机的Linux环境下新建的一个XOS，同时新建chapter2文件夹存放这章源文件，新建一个boot.asm文件，并将以下内容写到文件中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">        org     07c00h                  ; 告诉编译器程序加载到7c00处</span><br><span class=\"line\">        mov     ax, cs</span><br><span class=\"line\">        mov     ds, ax</span><br><span class=\"line\">        mov     es, ax</span><br><span class=\"line\">        call    DispStr                 ; 调用显示字符串例程</span><br><span class=\"line\">        jmp     $                       ; 无限循环</span><br><span class=\"line\">DispStr:</span><br><span class=\"line\">        mov     ax, BootMessage</span><br><span class=\"line\">        mov     bp, ax                  ; ES:BP = 串地址</span><br><span class=\"line\">        mov     cx, 16                  ; CX = 串长度</span><br><span class=\"line\">        mov     ax, 01301h              ; AH = 13,  AL = 01h</span><br><span class=\"line\">        mov     bx, 000ch               ; 页号为0(BH = 0) 黑底红字(BL = 0Ch,高亮)</span><br><span class=\"line\">        mov     dl, 0</span><br><span class=\"line\">        int     10h                     ; 10h 号中断</span><br><span class=\"line\">        ret</span><br><span class=\"line\">BootMessage:            db      &quot;Hello, OS world!&quot;</span><br><span class=\"line\">times   510-($-$$)      db      0       ; 填充剩下的空间，使生成的二进制代码恰好为512字节</span><br><span class=\"line\">dw      0xaa55                          ; 结束标志</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、安装GCC和NASM\"><a href=\"#三、安装GCC和NASM\" class=\"headerlink\" title=\"三、安装GCC和NASM\"></a>三、安装GCC和NASM</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install build-essential nasm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、编译生成bin文件\"><a href=\"#四、编译生成bin文件\" class=\"headerlink\" title=\"四、编译生成bin文件\"></a>四、编译生成bin文件</h2><p>安装好NASM后，执行下面指令将boot.asm编译成bin文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nasm boot.asm -o boot.bin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、安装Bochs\"><a href=\"#五、安装Bochs\" class=\"headerlink\" title=\"五、安装Bochs\"></a>五、安装Bochs</h2><p>文中使用的bochs是2.3.5版本，运行configure脚本时，即使安装了相关部件也会报错，我在网上查到是由于版本<br>比较老，因此我换成了2.6.10版的。要安装带调试功能的bochs，要去官网下载压缩包bochs-2.6.10.tar.gz，按照<br>下面指令进行安装，在安装过程中可能有些问题，具体可以参考<a href=\"https://my.oschina.net/liuzhihe/blog/794036\">https://my.oschina.net/liuzhihe/blog/794036</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar vxzf bochs-2.6.10.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> bochs-2.6.10</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ./configure --enable-debugger --enable-disasm</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> make</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> make install </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、Bochs的使用\"><a href=\"#六、Bochs的使用\" class=\"headerlink\" title=\"六、Bochs的使用\"></a>六、Bochs的使用</h2><p>使用bximage命令生成软盘a.img后，使用dd命令将引导扇区写进软盘，注意boot.bin是从文件夹XOS拷贝或者剪<br>切到bash安装目录下的，后面类似操作就不赘叙，默认大家都了解。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@xzr-virtual-machine:/home/xzr/download/bochs-2.6.10# bximage</span><br><span class=\"line\">========================================================================</span><br><span class=\"line\">                                bximage</span><br><span class=\"line\">  Disk Image Creation / Conversion / Resize and Commit Tool <span class=\"keyword\">for</span> Bochs</span><br><span class=\"line\">         <span class=\"variable\">$Id</span>: bximage.cc 13481 2018-03-30 21:04:04Z vruppert $</span><br><span class=\"line\">========================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">1. Create new floppy or hard disk image</span><br><span class=\"line\">2. Convert hard disk image to other format (mode)</span><br><span class=\"line\">3. Resize hard disk image</span><br><span class=\"line\">4. Commit <span class=\"string\">&#x27;undoable&#x27;</span> redolog to base image</span><br><span class=\"line\">5. Disk image info</span><br><span class=\"line\"></span><br><span class=\"line\">0. Quit</span><br><span class=\"line\"></span><br><span class=\"line\">Please choose one [0] 1</span><br><span class=\"line\"></span><br><span class=\"line\">Create image</span><br><span class=\"line\"></span><br><span class=\"line\">Do you want to create a floppy disk image or a hard disk image?</span><br><span class=\"line\">Please <span class=\"built_in\">type</span> hd or fd. [hd] fd</span><br><span class=\"line\"></span><br><span class=\"line\">Choose the size of floppy disk image to create.</span><br><span class=\"line\">Please <span class=\"built_in\">type</span> 160k, 180k, 320k, 360k, 720k, 1.2M, 1.44M, 1.68M, 1.72M, or 2.88M.</span><br><span class=\"line\"> [1.44M] </span><br><span class=\"line\"></span><br><span class=\"line\">What should be the name of the image?</span><br><span class=\"line\">[a.img] </span><br><span class=\"line\"></span><br><span class=\"line\">The disk image <span class=\"string\">&#x27;a.img&#x27;</span> already exists.  Are you sure you want to replace it?</span><br><span class=\"line\">Please <span class=\"built_in\">type</span> <span class=\"built_in\">yes</span> or no. [no] <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">Creating floppy image <span class=\"string\">&#x27;a.img&#x27;</span> with 2880 sectors</span><br><span class=\"line\"></span><br><span class=\"line\">The following line should appear <span class=\"keyword\">in</span> your bochsrc:</span><br><span class=\"line\">  floppya: image=<span class=\"string\">&quot;a.img&quot;</span>, status=inserted</span><br><span class=\"line\">root@xzr-virtual-machine:/home/xzr/download/bochs-2.6.10# <span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=boot.bin of=a.img bs=512 count=1 conv=notrunc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bochs的配置文件bochsrc\"><a href=\"#Bochs的配置文件bochsrc\" class=\"headerlink\" title=\"Bochs的配置文件bochsrc\"></a>Bochs的配置文件bochsrc</h3><p>新建一个bochsrc，并将以下内容写到文件中，注意和书中略有不同，主要是keyboard，具体原因可以百度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">###############################################################</span><br><span class=\"line\"># Configuration file for Bochs</span><br><span class=\"line\">###############################################################</span><br><span class=\"line\"></span><br><span class=\"line\"># how much memory the emulated machine will have</span><br><span class=\"line\">megs: 32</span><br><span class=\"line\"></span><br><span class=\"line\"># filename of ROM images</span><br><span class=\"line\">romimage: file=$BXSHARE/BIOS-bochs-latest</span><br><span class=\"line\">vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest</span><br><span class=\"line\"></span><br><span class=\"line\"># what disk images will be used </span><br><span class=\"line\">floppya: 1_44=a.img, status=inserted</span><br><span class=\"line\"></span><br><span class=\"line\"># choose the boot disk.</span><br><span class=\"line\">boot: floppy</span><br><span class=\"line\"></span><br><span class=\"line\"># where do we send log messages?</span><br><span class=\"line\">log: bochsout.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># disable the mouse</span><br><span class=\"line\">mouse: enabled=0</span><br><span class=\"line\"></span><br><span class=\"line\"># enable key mapping, using US layout as default.</span><br><span class=\"line\">keyboard: keymap=$BXSHARE/keymaps/x11-pc-us.map</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动，输入以下命令\"><a href=\"#启动，输入以下命令\" class=\"headerlink\" title=\"启动，输入以下命令\"></a>启动，输入以下命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bochs -f bochsrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试系统\"><a href=\"#调试系统\" class=\"headerlink\" title=\"调试系统\"></a>调试系统</h3><p>按照书中的步骤就可以尝试着调试，需要注意的是dump_cpu命令，新版本不支持，可以使用r | fp | mmx |sse<br>| dreg | sreg | creg 这些命令查看相关信息，或者使用help命令查看帮助。</p>\n<p>表 2 .1部 分Bochs调试指令<img src=\"./2_搭建环境/Capture.png\" style=\"zoom: 150%;\" /></p>\n","excerpt":"","more":"<p>本系列是我按照书籍《Orange S：一个操作系统的实现》，自己亲自动手写一个自己的操作系统，希望以此来提<br>高自己的C语言的编程能力和对操作系统的认识。由于书出版时间比较早，和实际有点出入，我就按照我实际过<br>程将它们总结下来。本章是将书中的第一二章合在一起。</p>\n<h2 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h2><h3 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h3><p>Windows系统电脑</p>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><p>虚拟机<br>Bochs-2.6.10<br>汇编编译器NASM</p>\n<h2 id=\"二、新建源代码文件夹\"><a href=\"#二、新建源代码文件夹\" class=\"headerlink\" title=\"二、新建源代码文件夹\"></a>二、新建源代码文件夹</h2><p>我在虚拟机的Linux环境下新建的一个XOS，同时新建chapter2文件夹存放这章源文件，新建一个boot.asm文件，并将以下内容写到文件中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">        org     07c00h                  ; 告诉编译器程序加载到7c00处</span><br><span class=\"line\">        mov     ax, cs</span><br><span class=\"line\">        mov     ds, ax</span><br><span class=\"line\">        mov     es, ax</span><br><span class=\"line\">        call    DispStr                 ; 调用显示字符串例程</span><br><span class=\"line\">        jmp     $                       ; 无限循环</span><br><span class=\"line\">DispStr:</span><br><span class=\"line\">        mov     ax, BootMessage</span><br><span class=\"line\">        mov     bp, ax                  ; ES:BP = 串地址</span><br><span class=\"line\">        mov     cx, 16                  ; CX = 串长度</span><br><span class=\"line\">        mov     ax, 01301h              ; AH = 13,  AL = 01h</span><br><span class=\"line\">        mov     bx, 000ch               ; 页号为0(BH = 0) 黑底红字(BL = 0Ch,高亮)</span><br><span class=\"line\">        mov     dl, 0</span><br><span class=\"line\">        int     10h                     ; 10h 号中断</span><br><span class=\"line\">        ret</span><br><span class=\"line\">BootMessage:            db      &quot;Hello, OS world!&quot;</span><br><span class=\"line\">times   510-($-$$)      db      0       ; 填充剩下的空间，使生成的二进制代码恰好为512字节</span><br><span class=\"line\">dw      0xaa55                          ; 结束标志</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、安装GCC和NASM\"><a href=\"#三、安装GCC和NASM\" class=\"headerlink\" title=\"三、安装GCC和NASM\"></a>三、安装GCC和NASM</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install build-essential nasm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、编译生成bin文件\"><a href=\"#四、编译生成bin文件\" class=\"headerlink\" title=\"四、编译生成bin文件\"></a>四、编译生成bin文件</h2><p>安装好NASM后，执行下面指令将boot.asm编译成bin文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nasm boot.asm -o boot.bin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、安装Bochs\"><a href=\"#五、安装Bochs\" class=\"headerlink\" title=\"五、安装Bochs\"></a>五、安装Bochs</h2><p>文中使用的bochs是2.3.5版本，运行configure脚本时，即使安装了相关部件也会报错，我在网上查到是由于版本<br>比较老，因此我换成了2.6.10版的。要安装带调试功能的bochs，要去官网下载压缩包bochs-2.6.10.tar.gz，按照<br>下面指令进行安装，在安装过程中可能有些问题，具体可以参考<a href=\"https://my.oschina.net/liuzhihe/blog/794036\">https://my.oschina.net/liuzhihe/blog/794036</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar vxzf bochs-2.6.10.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> bochs-2.6.10</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> ./configure --enable-debugger --enable-disasm</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> make</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> make install </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、Bochs的使用\"><a href=\"#六、Bochs的使用\" class=\"headerlink\" title=\"六、Bochs的使用\"></a>六、Bochs的使用</h2><p>使用bximage命令生成软盘a.img后，使用dd命令将引导扇区写进软盘，注意boot.bin是从文件夹XOS拷贝或者剪<br>切到bash安装目录下的，后面类似操作就不赘叙，默认大家都了解。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@xzr-virtual-machine:/home/xzr/download/bochs-2.6.10# bximage</span><br><span class=\"line\">========================================================================</span><br><span class=\"line\">                                bximage</span><br><span class=\"line\">  Disk Image Creation / Conversion / Resize and Commit Tool <span class=\"keyword\">for</span> Bochs</span><br><span class=\"line\">         <span class=\"variable\">$Id</span>: bximage.cc 13481 2018-03-30 21:04:04Z vruppert $</span><br><span class=\"line\">========================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">1. Create new floppy or hard disk image</span><br><span class=\"line\">2. Convert hard disk image to other format (mode)</span><br><span class=\"line\">3. Resize hard disk image</span><br><span class=\"line\">4. Commit <span class=\"string\">&#x27;undoable&#x27;</span> redolog to base image</span><br><span class=\"line\">5. Disk image info</span><br><span class=\"line\"></span><br><span class=\"line\">0. Quit</span><br><span class=\"line\"></span><br><span class=\"line\">Please choose one [0] 1</span><br><span class=\"line\"></span><br><span class=\"line\">Create image</span><br><span class=\"line\"></span><br><span class=\"line\">Do you want to create a floppy disk image or a hard disk image?</span><br><span class=\"line\">Please <span class=\"built_in\">type</span> hd or fd. [hd] fd</span><br><span class=\"line\"></span><br><span class=\"line\">Choose the size of floppy disk image to create.</span><br><span class=\"line\">Please <span class=\"built_in\">type</span> 160k, 180k, 320k, 360k, 720k, 1.2M, 1.44M, 1.68M, 1.72M, or 2.88M.</span><br><span class=\"line\"> [1.44M] </span><br><span class=\"line\"></span><br><span class=\"line\">What should be the name of the image?</span><br><span class=\"line\">[a.img] </span><br><span class=\"line\"></span><br><span class=\"line\">The disk image <span class=\"string\">&#x27;a.img&#x27;</span> already exists.  Are you sure you want to replace it?</span><br><span class=\"line\">Please <span class=\"built_in\">type</span> <span class=\"built_in\">yes</span> or no. [no] <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">Creating floppy image <span class=\"string\">&#x27;a.img&#x27;</span> with 2880 sectors</span><br><span class=\"line\"></span><br><span class=\"line\">The following line should appear <span class=\"keyword\">in</span> your bochsrc:</span><br><span class=\"line\">  floppya: image=<span class=\"string\">&quot;a.img&quot;</span>, status=inserted</span><br><span class=\"line\">root@xzr-virtual-machine:/home/xzr/download/bochs-2.6.10# <span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=boot.bin of=a.img bs=512 count=1 conv=notrunc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bochs的配置文件bochsrc\"><a href=\"#Bochs的配置文件bochsrc\" class=\"headerlink\" title=\"Bochs的配置文件bochsrc\"></a>Bochs的配置文件bochsrc</h3><p>新建一个bochsrc，并将以下内容写到文件中，注意和书中略有不同，主要是keyboard，具体原因可以百度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">###############################################################</span><br><span class=\"line\"># Configuration file for Bochs</span><br><span class=\"line\">###############################################################</span><br><span class=\"line\"></span><br><span class=\"line\"># how much memory the emulated machine will have</span><br><span class=\"line\">megs: 32</span><br><span class=\"line\"></span><br><span class=\"line\"># filename of ROM images</span><br><span class=\"line\">romimage: file=$BXSHARE/BIOS-bochs-latest</span><br><span class=\"line\">vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest</span><br><span class=\"line\"></span><br><span class=\"line\"># what disk images will be used </span><br><span class=\"line\">floppya: 1_44=a.img, status=inserted</span><br><span class=\"line\"></span><br><span class=\"line\"># choose the boot disk.</span><br><span class=\"line\">boot: floppy</span><br><span class=\"line\"></span><br><span class=\"line\"># where do we send log messages?</span><br><span class=\"line\">log: bochsout.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># disable the mouse</span><br><span class=\"line\">mouse: enabled=0</span><br><span class=\"line\"></span><br><span class=\"line\"># enable key mapping, using US layout as default.</span><br><span class=\"line\">keyboard: keymap=$BXSHARE/keymaps/x11-pc-us.map</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动，输入以下命令\"><a href=\"#启动，输入以下命令\" class=\"headerlink\" title=\"启动，输入以下命令\"></a>启动，输入以下命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bochs -f bochsrc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调试系统\"><a href=\"#调试系统\" class=\"headerlink\" title=\"调试系统\"></a>调试系统</h3><p>按照书中的步骤就可以尝试着调试，需要注意的是dump_cpu命令，新版本不支持，可以使用r | fp | mmx |sse<br>| dreg | sreg | creg 这些命令查看相关信息，或者使用help命令查看帮助。</p>\n<p>表 2 .1部 分Bochs调试指令<img src=\"./2_搭建环境/Capture.png\" style=\"zoom: 150%;\" /></p>\n"},{"title":"保护模式_part1","cover":false,"toc":true,"mathjax":true,"password":null,"_content":"\n\n\n在XOS下新建chapter3/a文件夹，并把下面内容写到文件pmtest1.asm中\n\n```assembly\n; ==========================================\n; pmtest1.asm\n; 编译方法：nasm pmtest1.asm -o pmtest1.bin\n; ==========================================\n\n%include\t\"pm.inc\"\t; 常量, 宏, 以及一些说明\n\norg\t07c00h\n\tjmp\tLABEL_BEGIN\n\n[SECTION .gdt]\n; GDT\n;                              段基址,       段界限     , 属性\nLABEL_GDT:\t   Descriptor       0,                0, 0           ; 空描述符\nLABEL_DESC_CODE32: Descriptor       0, SegCode32Len - 1, DA_C + DA_32; 非一致代码段\nLABEL_DESC_VIDEO:  Descriptor 0B8000h,           0ffffh, DA_DRW\t     ; 显存首地址\n; GDT 结束\n\nGdtLen\t\tequ\t$ - LABEL_GDT\t; GDT长度\nGdtPtr\t\tdw\tGdtLen - 1\t; GDT界限\n\t\tdd\t0\t\t; GDT基地址\n\n; GDT 选择子\nSelectorCode32\t\tequ\tLABEL_DESC_CODE32\t- LABEL_GDT\nSelectorVideo\t\tequ\tLABEL_DESC_VIDEO\t- LABEL_GDT\n; END of [SECTION .gdt]\n\n[SECTION .s16]\n[BITS\t16]\nLABEL_BEGIN:\n\tmov\tax, cs\n\tmov\tds, ax\n\tmov\tes, ax\n\tmov\tss, ax\n\tmov\tsp, 0100h\n\n\t; 初始化 32 位代码段描述符\n\txor\teax, eax\n\tmov\tax, cs\n\tshl\teax, 4\n\tadd\teax, LABEL_SEG_CODE32\n\tmov\tword [LABEL_DESC_CODE32 + 2], ax\n\tshr\teax, 16\n\tmov\tbyte [LABEL_DESC_CODE32 + 4], al\n\tmov\tbyte [LABEL_DESC_CODE32 + 7], ah\n\t\n\t; 为加载 GDTR 作准备\n\txor\teax, eax\n\tmov\tax, ds\n\tshl\teax, 4\n\tadd\teax, LABEL_GDT\t\t; eax <- gdt 基地址\n\tmov\tdword [GdtPtr + 2], eax\t; [GdtPtr + 2] <- gdt 基地址\n\t\n\t; 加载 GDTR\n\tlgdt\t[GdtPtr]\n\t\n\t; 关中断\n\tcli\n\t\n\t; 打开地址线A20\n\tin\tal, 92h\n\tor\tal, 00000010b\n\tout\t92h, al\n\t\n\t; 准备切换到保护模式\n\tmov\teax, cr0\n\tor\teax, 1\n\tmov\tcr0, eax\n\t\n\t; 真正进入保护模式\n\tjmp\tdword SelectorCode32:0\t; 执行这一句会把 SelectorCode32 装入 cs,\n\t\t\t\t\t; 并跳转到 Code32Selector:0  处\n\n; END of [SECTION .s16]\n\n\n[SECTION .s32]; 32 位代码段. 由实模式跳入.\n[BITS\t32]\n\nLABEL_SEG_CODE32:\n\tmov\tax, SelectorVideo\n\tmov\tgs, ax\t\t\t; 视频段选择子(目的)\n\n\tmov\tedi, (80 * 11 + 79) * 2\t; 屏幕第 11 行, 第 79 列。\n\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字\n\tmov\tal, 'P'\n\tmov\t[gs:edi], ax\n\t\n\t; 到此停止\n\tjmp\t$\n\nSegCode32Len\tequ\t$ - LABEL_SEG_CODE32\n; END of [SECTION .s32] \n```\n\n编译\n```bash\nnasm pmtest1.asm -o pmtest1.bin\n```\n\n  pm.inc\n\n```assembly\n; 描述符图示\n\n; 图示一\n;\n;  ------ ┏━━┳━━┓高地址\n;         ┃ 7  ┃ 段 ┃\n;         ┣━━┫    ┃\n;                  基\n;  字节 7 ┆    ┆    ┆\n;                  址\n;         ┣━━┫ ② ┃\n;         ┃ 0  ┃    ┃\n;  ------ ┣━━╋━━┫\n;         ┃ 7  ┃ G  ┃\n;         ┣━━╉──┨\n;         ┃ 6  ┃ D  ┃\n;         ┣━━╉──┨\n;         ┃ 5  ┃ 0  ┃\n;         ┣━━╉──┨\n;         ┃ 4  ┃ AVL┃\n;  字节 6 ┣━━╉──┨\n;         ┃ 3  ┃    ┃\n;         ┣━━┫ 段 ┃\n;         ┃ 2  ┃ 界 ┃\n;         ┣━━┫ 限 ┃\n;         ┃ 1  ┃    ┃\n;         ┣━━┫ ② ┃\n;         ┃ 0  ┃    ┃\n;  ------ ┣━━╋━━┫\n;         ┃ 7  ┃ P  ┃\n;         ┣━━╉──┨\n;         ┃ 6  ┃    ┃\n;         ┣━━┫ DPL┃\n;         ┃ 5  ┃    ┃\n;         ┣━━╉──┨\n;         ┃ 4  ┃ S  ┃\n;  字节 5 ┣━━╉──┨\n;         ┃ 3  ┃    ┃\n;         ┣━━┫ T  ┃\n;         ┃ 2  ┃ Y  ┃\n;         ┣━━┫ P  ┃\n;         ┃ 1  ┃ E  ┃\n;         ┣━━┫    ┃\n;         ┃ 0  ┃    ┃\n;  ------ ┣━━╋━━┫\n;         ┃ 23 ┃    ┃\n;         ┣━━┫    ┃\n;         ┃ 22 ┃    ┃\n;         ┣━━┫ 段 ┃\n;\n;   字节  ┆    ┆ 基 ┆\n; 2, 3, 4\n;         ┣━━┫ 址 ┃\n;         ┃ 1  ┃ ① ┃\n;         ┣━━┫    ┃\n;         ┃ 0  ┃    ┃\n;  ------ ┣━━╋━━┫\n;         ┃ 15 ┃    ┃\n;         ┣━━┫    ┃\n;         ┃ 14 ┃    ┃\n;         ┣━━┫ 段 ┃\n;\n; 字节 0,1┆    ┆ 界 ┆\n;\n;         ┣━━┫ 限 ┃\n;         ┃ 1  ┃ ① ┃\n;         ┣━━┫    ┃\n;         ┃ 0  ┃    ┃\n;  ------ ┗━━┻━━┛低地址\n;\n\n\n; 图示二\n\n; 高地址………………………………………………………………………低地址\n\n; |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0    |\n; |7654321076543210765432107654321076543210765432107654321076543210|\t<- 共 8 字节\n; |--------========--------========--------========--------========|\n; ┏━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓\n; ┃31..24┃   (见下图)   ┃     段基址(23..0)    ┃ 段界限(15..0)┃\n; ┃      ┃              ┃                      ┃              ┃\n; ┃ 基址2┃③│②│    ①┃基址1b│   基址1a     ┃    段界限1   ┃\n; ┣━━━╋━━━┳━━━╋━━━━━━━━━━━╋━━━━━━━┫\n; ┃   %6 ┃  %5  ┃  %4  ┃  %3  ┃     %2       ┃       %1     ┃\n; ┗━━━┻━━━┻━━━┻━━━┻━━━━━━━┻━━━━━━━┛\n;         │                \\_________\n;         │                          \\__________________\n;         │                                             \\________________________________________________\n;         │                                                                                              \\\n;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓\n;         ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃\n;         ┣━━╋━━╋━━╋━━╋━━┻━━┻━━┻━━╋━━╋━━┻━━╋━━╋━━┻━━┻━━┻━━┫\n;         ┃ G  ┃ D  ┃ 0  ┃ AVL┃   段界限 2 (19..16)  ┃  P ┃   DPL    ┃ S  ┃       TYPE           ┃\n;         ┣━━┻━━┻━━┻━━╋━━━━━━━━━━━╋━━┻━━━━━┻━━┻━━━━━━━━━━━┫\n;         ┃      ③: 属性 2      ┃    ②: 段界限 2      ┃                   ①: 属性1                  ┃\n;         ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━┛\n;       高地址                                                                                          低地址\n;\n;\n\n; 说明:\n;\n; (1) P:    存在(Present)位。\n;\t\tP=1 表示描述符对地址转换是有效的，或者说该描述符所描述的段存在，即在内存中；\n;\t\tP=0 表示描述符对地址转换无效，即该段不存在。使用该描述符进行内存访问时会引起异常。\n;\n; (2) DPL:  表示描述符特权级(Descriptor Privilege level)，共2位。它规定了所描述段的特权级，用于特权检查，以决定对该段能否访问。 \n;\n; (3) S:   说明描述符的类型。\n;\t\t对于存储段描述符而言，S=1，以区别与系统段描述符和门描述符(S=0)。 \n;\n; (4) TYPE: 说明存储段描述符所描述的存储段的具体属性。\n;\n;\t\t \n;\t数据段类型\t类型值\t\t说明\n;\t\t\t----------------------------------\n;\t\t\t0\t\t只读 \n;\t\t\t1\t\t只读、已访问 \n;\t\t\t2\t\t读/写 \n;\t\t\t3\t\t读/写、已访问 \n;\t\t\t4\t\t只读、向下扩展 \n;\t\t\t5\t\t只读、向下扩展、已访问 \n;\t\t\t6\t\t读/写、向下扩展 \n;\t\t\t7\t\t读/写、向下扩展、已访问 \n;\n;\t\t\n;\t\t\t类型值\t\t说明\n;\t代码段类型\t----------------------------------\n;\t\t\t8\t\t只执行 \n;\t\t\t9\t\t只执行、已访问 \n;\t\t\tA\t\t执行/读 \n;\t\t\tB\t\t执行/读、已访问 \n;\t\t\tC\t\t只执行、一致码段 \n;\t\t\tD\t\t只执行、一致码段、已访问 \n;\t\t\tE\t\t执行/读、一致码段 \n;\t\t\tF\t\t执行/读、一致码段、已访问 \n;\n;\t\t\n;\t系统段类型\t类型编码\t说明\n;\t\t\t----------------------------------\n;\t\t\t0\t\t<未定义>\n;\t\t\t1\t\t可用286TSS\n;\t\t\t2\t\tLDT\n;\t\t\t3\t\t忙的286TSS\n;\t\t\t4\t\t286调用门\n;\t\t\t5\t\t任务门\n;\t\t\t6\t\t286中断门\n;\t\t\t7\t\t286陷阱门\n;\t\t\t8\t\t未定义\n;\t\t\t9\t\t可用386TSS\n;\t\t\tA\t\t<未定义>\n;\t\t\tB\t\t忙的386TSS\n;\t\t\tC\t\t386调用门\n;\t\t\tD\t\t<未定义>\n;\t\t\tE\t\t386中断门\n;\t\t\tF\t\t386陷阱门\n;\n; (5) G:    段界限粒度(Granularity)位。\n;\t\tG=0 表示界限粒度为字节；\n;\t\tG=1 表示界限粒度为4K 字节。\n;           注意，界限粒度只对段界限有效，对段基地址无效，段基地址总是以字节为单位。 \n;\n; (6) D:    D位是一个很特殊的位，在描述可执行段、向下扩展数据段或由SS寄存器寻址的段(通常是堆栈段)的三种描述符中的意义各不相同。 \n;           ⑴ 在描述可执行段的描述符中，D位决定了指令使用的地址及操作数所默认的大小。\n;\t\t① D=1表示默认情况下指令使用32位地址及32位或8位操作数，这样的代码段也称为32位代码段；\n;\t\t② D=0 表示默认情况下，使用16位地址及16位或8位操作数，这样的代码段也称为16位代码段，它与80286兼容。可以使用地址大小前缀和操作数大小前缀分别改变默认的地址或操作数的大小。 \n;           ⑵ 在向下扩展数据段的描述符中，D位决定段的上部边界。\n;\t\t① D=1表示段的上部界限为4G；\n;\t\t② D=0表示段的上部界限为64K，这是为了与80286兼容。 \n;           ⑶ 在描述由SS寄存器寻址的段描述符中，D位决定隐式的堆栈访问指令(如PUSH和POP指令)使用何种堆栈指针寄存器。\n;\t\t① D=1表示使用32位堆栈指针寄存器ESP；\n;\t\t② D=0表示使用16位堆栈指针寄存器SP，这与80286兼容。 \n;\n; (7) AVL:  软件可利用位。80386对该位的使用未左规定，Intel公司也保证今后开发生产的处理器只要与80386兼容，就不会对该位的使用做任何定义或规定。 \n;\n\n\n;----------------------------------------------------------------------------\n; 在下列类型值命名中：\n;       DA_  : Descriptor Attribute\n;       D    : 数据段\n;       C    : 代码段\n;       S    : 系统段\n;       R    : 只读\n;       RW   : 读写\n;       A    : 已访问\n;       其它 : 可按照字面意思理解\n;----------------------------------------------------------------------------\n\n; 描述符类型\nDA_32\t\tEQU\t4000h\t; 32 位段\n\nDA_DPL0\t\tEQU\t  00h\t; DPL = 0\nDA_DPL1\t\tEQU\t  20h\t; DPL = 1\nDA_DPL2\t\tEQU\t  40h\t; DPL = 2\nDA_DPL3\t\tEQU\t  60h\t; DPL = 3\n\n; 存储段描述符类型\nDA_DR\t\tEQU\t90h\t; 存在的只读数据段类型值\nDA_DRW\t\tEQU\t92h\t; 存在的可读写数据段属性值\nDA_DRWA\t\tEQU\t93h\t; 存在的已访问可读写数据段类型值\nDA_C\t\tEQU\t98h\t; 存在的只执行代码段属性值\nDA_CR\t\tEQU\t9Ah\t; 存在的可执行可读代码段属性值\nDA_CCO\t\tEQU\t9Ch\t; 存在的只执行一致代码段属性值\nDA_CCOR\t\tEQU\t9Eh\t; 存在的可执行可读一致代码段属性值\n\n; 系统段描述符类型\nDA_LDT\t\tEQU\t  82h\t; 局部描述符表段类型值\nDA_TaskGate\tEQU\t  85h\t; 任务门类型值\nDA_386TSS\tEQU\t  89h\t; 可用 386 任务状态段类型值\nDA_386CGate\tEQU\t  8Ch\t; 386 调用门类型值\nDA_386IGate\tEQU\t  8Eh\t; 386 中断门类型值\nDA_386TGate\tEQU\t  8Fh\t; 386 陷阱门类型值\n\n\n; 选择子图示:\n;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓\n;         ┃ 15 ┃ 14 ┃ 13 ┃ 12 ┃ 11 ┃ 10 ┃ 9  ┃ 8  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃\n;         ┣━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━╋━━╋━━┻━━┫\n;         ┃                                 描述符索引                                 ┃ TI ┃   RPL    ┃\n;         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━┻━━━━━┛\n;\n; RPL(Requested Privilege Level): 请求特权级，用于特权检查。\n;\n; TI(Table Indicator): 引用描述符表指示位\n;\tTI=0 指示从全局描述符表GDT中读取描述符；\n;\tTI=1 指示从局部描述符表LDT中读取描述符。\n;\n\n;----------------------------------------------------------------------------\n; 选择子类型值说明\n; 其中:\n;       SA_  : Selector Attribute\n\nSA_RPL0\t\tEQU\t0\t; ┓\nSA_RPL1\t\tEQU\t1\t; ┣ RPL\nSA_RPL2\t\tEQU\t2\t; ┃\nSA_RPL3\t\tEQU\t3\t; ┛\n\nSA_TIG\t\tEQU\t0\t; ┓TI\nSA_TIL\t\tEQU\t4\t; ┛\n;----------------------------------------------------------------------------\n\n\n\n; 宏 ------------------------------------------------------------------------------------------------------\n;\n; 描述符\n; usage: Descriptor Base, Limit, Attr\n;        Base:  dd\n;        Limit: dd (low 20 bits available)\n;        Attr:  dw (lower 4 bits of higher byte are always 0)\n%macro Descriptor 3\n\tdw\t%2 & 0FFFFh\t\t\t\t; 段界限1\n\tdw\t%1 & 0FFFFh\t\t\t\t; 段基址1\n\tdb\t(%1 >> 16) & 0FFh\t\t\t; 段基址2\n\tdw\t((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)\t; 属性1 + 段界限2 + 属性2\n\tdb\t(%1 >> 24) & 0FFh\t\t\t; 段基址3\n%endmacro ; 共 8 字节\n;\n; 门\n; usage: Gate Selector, Offset, DCount, Attr\n;        Selector:  dw\n;        Offset:    dd\n;        DCount:    db\n;        Attr:      db\n%macro Gate 4\n\tdw\t(%2 & 0FFFFh)\t\t\t\t; 偏移1\n\tdw\t%1\t\t\t\t\t; 选择子\n\tdw\t(%3 & 1Fh) | ((%4 << 8) & 0FF00h)\t; 属性\n\tdw\t((%2 >> 16) & 0FFFFh)\t\t\t; 偏移2\n%endmacro ; 共 8 字节\n; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\n将第二章的a.img和bochsrc复制过来，并执行下面命令生成软盘映像\n\n```bash\ndd if=pmtest1.bin of=a.img bs=512 count=1 conv=notrunc  \n```\n\n运行Bochs,可以看到， 在屏幕中部右侧， 出现了一个红色的字母“ P” ， 然后再也不动了。  \n\n第二部分\n\n在chapter3下新建b文件夹，复制a文件夹中的bochsrc，pm.inc，pmtest1.asm\n\n1. 到Bochs官方网站下载一个FreeDos。 解压后将其中的a.img复制到我们的工作目录中， 并改名为freedos.img。\n2. 用bximage生成一个软盘映像， 起名为pm.img。\n3. 修改我们的bochsrc， 确保其中有以下三行：\n```配置\nfloppya: 1_44=freedos.img, status=inserted\nfloppyb: 1_44=pm.img, status=inserted\nboot: a \n```\n4.启动Bochs， 待FreeDos启动完毕后用下面命令格式化B:盘   \n```\nformat b:\n```\n5. 将代码3.1的第8行中的07c00h改为0100h， 并重新编译：\n```bash\nnasm pmtest1.asm -o pmtest1.com\n```\n6. 将pmtest1.com复制到虚拟软盘pm.img上：\n注意按照书中命令，进行虚拟软盘的挂载时\n```bash\nsudo mount -o loop pm.img /mnt/floppy\n```\n会出现了错误\n```bash\nmount point /mnt/floppy does not exist\n```\n解决办法：\n先用mkdir指令在mnt目录下生成一个floppy 然后执行下面命令：\n```bash\nsudo losetup /dev/loop0 pm.img\nsudo mount /dev/loop0 /mnt/floppy\nsudo cp pmtest1.com /mnt/floppy\nsudo umount /mnt/floppy\n```\n7. 到FreeDos中执行如下命令：\n```\ndir b:\nb:pmtest1.com\n```\n\n这样pmtest1.com就运行起来了, 一个红色的字母“ P” 出现了。\n\n第三部分\n在b文件夹下，新建pmtest2.asm，并把下面内容写到文件中\n\n```assembly\n; ==========================================\n; pmtest2.asm\n; 编译方法：nasm pmtest2.asm -o pmtest2.com\n; ==========================================\n\n%include\t\"pm.inc\"\t; 常量, 宏, 以及一些说明\n\norg\t0100h\n\tjmp\tLABEL_BEGIN\n\n[SECTION .gdt]\n; GDT\n;                            段基址,        段界限 , 属性\nLABEL_GDT:         Descriptor    0,              0, 0         ; 空描述符\nLABEL_DESC_NORMAL: Descriptor    0,         0ffffh, DA_DRW    ; Normal 描述符\nLABEL_DESC_CODE32: Descriptor    0, SegCode32Len-1, DA_C+DA_32; 非一致代码段, 32\nLABEL_DESC_CODE16: Descriptor    0,         0ffffh, DA_C      ; 非一致代码段, 16\nLABEL_DESC_DATA:   Descriptor    0,      DataLen-1, DA_DRW    ; Data\nLABEL_DESC_STACK:  Descriptor    0,     TopOfStack, DA_DRWA+DA_32; Stack, 32 位\nLABEL_DESC_TEST:   Descriptor 0500000h,     0ffffh, DA_DRW\nLABEL_DESC_VIDEO:  Descriptor  0B8000h,     0ffffh, DA_DRW    ; 显存首地址\n; GDT 结束\n\nGdtLen\t\tequ\t$ - LABEL_GDT\t; GDT长度\nGdtPtr\t\tdw\tGdtLen - 1\t; GDT界限\n\t\tdd\t0\t\t; GDT基地址\n\n; GDT 选择子\nSelectorNormal\t\tequ\tLABEL_DESC_NORMAL\t- LABEL_GDT\nSelectorCode32\t\tequ\tLABEL_DESC_CODE32\t- LABEL_GDT\nSelectorCode16\t\tequ\tLABEL_DESC_CODE16\t- LABEL_GDT\nSelectorData\t\tequ\tLABEL_DESC_DATA\t\t- LABEL_GDT\nSelectorStack\t\tequ\tLABEL_DESC_STACK\t- LABEL_GDT\nSelectorTest\t\tequ\tLABEL_DESC_TEST\t\t- LABEL_GDT\nSelectorVideo\t\tequ\tLABEL_DESC_VIDEO\t- LABEL_GDT\n; END of [SECTION .gdt]\n\n[SECTION .data1]\t ; 数据段\nALIGN\t32\n[BITS\t32]\nLABEL_DATA:\nSPValueInRealMode\tdw\t0\n; 字符串\nPMMessage:\t\tdb\t\"In Protect Mode now. ^-^\", 0\t; 在保护模式中显示\nOffsetPMMessage\t\tequ\tPMMessage - $$\nStrTest:\t\tdb\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", 0\nOffsetStrTest\t\tequ\tStrTest - $$\nDataLen\t\t\tequ\t$ - LABEL_DATA\n; END of [SECTION .data1]\n\n\n; 全局堆栈段\n[SECTION .gs]\nALIGN\t32\n[BITS\t32]\nLABEL_STACK:\n\ttimes 512 db 0\n\nTopOfStack\tequ\t$ - LABEL_STACK - 1\n\n; END of [SECTION .gs]\n\n\n[SECTION .s16]\n[BITS\t16]\nLABEL_BEGIN:\n\tmov\tax, cs\n\tmov\tds, ax\n\tmov\tes, ax\n\tmov\tss, ax\n\tmov\tsp, 0100h\n\n\tmov\t[LABEL_GO_BACK_TO_REAL+3], ax\n\tmov\t[SPValueInRealMode], sp\n\t\n\t; 初始化 16 位代码段描述符\n\tmov\tax, cs\n\tmovzx\teax, ax\n\tshl\teax, 4\n\tadd\teax, LABEL_SEG_CODE16\n\tmov\tword [LABEL_DESC_CODE16 + 2], ax\n\tshr\teax, 16\n\tmov\tbyte [LABEL_DESC_CODE16 + 4], al\n\tmov\tbyte [LABEL_DESC_CODE16 + 7], ah\n\t\n\t; 初始化 32 位代码段描述符\n\txor\teax, eax\n\tmov\tax, cs\n\tshl\teax, 4\n\tadd\teax, LABEL_SEG_CODE32\n\tmov\tword [LABEL_DESC_CODE32 + 2], ax\n\tshr\teax, 16\n\tmov\tbyte [LABEL_DESC_CODE32 + 4], al\n\tmov\tbyte [LABEL_DESC_CODE32 + 7], ah\n\t\n\t; 初始化数据段描述符\n\txor\teax, eax\n\tmov\tax, ds\n\tshl\teax, 4\n\tadd\teax, LABEL_DATA\n\tmov\tword [LABEL_DESC_DATA + 2], ax\n\tshr\teax, 16\n\tmov\tbyte [LABEL_DESC_DATA + 4], al\n\tmov\tbyte [LABEL_DESC_DATA + 7], ah\n\t\n\t; 初始化堆栈段描述符\n\txor\teax, eax\n\tmov\tax, ds\n\tshl\teax, 4\n\tadd\teax, LABEL_STACK\n\tmov\tword [LABEL_DESC_STACK + 2], ax\n\tshr\teax, 16\n\tmov\tbyte [LABEL_DESC_STACK + 4], al\n\tmov\tbyte [LABEL_DESC_STACK + 7], ah\n\t\n\t; 为加载 GDTR 作准备\n\txor\teax, eax\n\tmov\tax, ds\n\tshl\teax, 4\n\tadd\teax, LABEL_GDT\t\t; eax <- gdt 基地址\n\tmov\tdword [GdtPtr + 2], eax\t; [GdtPtr + 2] <- gdt 基地址\n\t\n\t; 加载 GDTR\n\tlgdt\t[GdtPtr]\n\t\n\t; 关中断\n\tcli\n\t\n\t; 打开地址线A20\n\tin\tal, 92h\n\tor\tal, 00000010b\n\tout\t92h, al\n\t\n\t; 准备切换到保护模式\n\tmov\teax, cr0\n\tor\teax, 1\n\tmov\tcr0, eax\n\t\n\t; 真正进入保护模式\n\tjmp\tdword SelectorCode32:0\t; 执行这一句会把 SelectorCode32 装入 cs, 并跳转到 Code32Selector:0  处\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nLABEL_REAL_ENTRY:\t\t; 从保护模式跳回到实模式就到了这里\n\tmov\tax, cs\n\tmov\tds, ax\n\tmov\tes, ax\n\tmov\tss, ax\n\n\tmov\tsp, [SPValueInRealMode]\n\t\n\tin\tal, 92h\t\t; `.\n\tand\tal, 11111101b\t;  | 关闭 A20 地址线\n\tout\t92h, al\t\t; /\n\t\n\tsti\t\t\t; 开中断\n\t\n\tmov\tax, 4c00h\t; `.\n\tint\t21h\t\t; /  回到 DOS\n\n; END of [SECTION .s16]\n\n\n[SECTION .s32]; 32 位代码段. 由实模式跳入.\n[BITS\t32]\n\nLABEL_SEG_CODE32:\n\tmov\tax, SelectorData\n\tmov\tds, ax\t\t\t; 数据段选择子\n\tmov\tax, SelectorTest\n\tmov\tes, ax\t\t\t; 测试段选择子\n\tmov\tax, SelectorVideo\n\tmov\tgs, ax\t\t\t; 视频段选择子\n\n\tmov\tax, SelectorStack\n\tmov\tss, ax\t\t\t; 堆栈段选择子\n\t\n\tmov\tesp, TopOfStack\n\n\n\t; 下面显示一个字符串\n\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字\n\txor\tesi, esi\n\txor\tedi, edi\n\tmov\tesi, OffsetPMMessage\t; 源数据偏移\n\tmov\tedi, (80 * 10 + 0) * 2\t; 目的数据偏移。屏幕第 10 行, 第 0 列。\n\tcld\n\n.1:\n\tlodsb\n\ttest\tal, al\n\tjz\t.2\n\tmov\t[gs:edi], ax\n\tadd\tedi, 2\n\tjmp\t.1\n.2:\t; 显示完毕\n\n\tcall\tDispReturn\n\t\n\tcall\tTestRead\n\tcall\tTestWrite\n\tcall\tTestRead\n\t\n\t; 到此停止\n\tjmp\tSelectorCode16:0\n\n; ------------------------------------------------------------------------\nTestRead:\n\txor\tesi, esi\n\tmov\tecx, 8\n.loop:\n\tmov\tal, [es:esi]\n\tcall\tDispAL\n\tinc\tesi\n\tloop\t.loop\n\n\tcall\tDispReturn\n\t\n\tret\n\n; TestRead 结束-----------------------------------------------------------\n\n\n; ------------------------------------------------------------------------\nTestWrite:\n\tpush\tesi\n\tpush\tedi\n\txor\tesi, esi\n\txor\tedi, edi\n\tmov\tesi, OffsetStrTest\t; 源数据偏移\n\tcld\n.1:\n\tlodsb\n\ttest\tal, al\n\tjz\t.2\n\tmov\t[es:edi], al\n\tinc\tedi\n\tjmp\t.1\n.2:\n\n\tpop\tedi\n\tpop\tesi\n\t\n\tret\n\n; TestWrite 结束----------------------------------------------------------\n\n\n; ------------------------------------------------------------------------\n; 显示 AL 中的数字\n; 默认地:\n;\t数字已经存在 AL 中\n;\tedi 始终指向要显示的下一个字符的位置\n; 被改变的寄存器:\n;\tax, edi\n; ------------------------------------------------------------------------\nDispAL:\n\tpush\tecx\n\tpush\tedx\n\n\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字\n\tmov\tdl, al\n\tshr\tal, 4\n\tmov\tecx, 2\n\n.begin:\n\tand\tal, 01111b\n\tcmp\tal, 9\n\tja\t.1\n\tadd\tal, '0'\n\tjmp\t.2\n.1:\n\tsub\tal, 0Ah\n\tadd\tal, 'A'\n.2:\n\tmov\t[gs:edi], ax\n\tadd\tedi, 2\n\n\tmov\tal, dl\n\tloop\t.begin\n\tadd\tedi, 2\n\t\n\tpop\tedx\n\tpop\tecx\n\t\n\tret\n\n; DispAL 结束-------------------------------------------------------------\n\n\n; ------------------------------------------------------------------------\nDispReturn:\n\tpush\teax\n\tpush\tebx\n\tmov\teax, edi\n\tmov\tbl, 160\n\tdiv\tbl\n\tand\teax, 0FFh\n\tinc\teax\n\tmov\tbl, 160\n\tmul\tbl\n\tmov\tedi, eax\n\tpop\tebx\n\tpop\teax\n\n\tret\n\n; DispReturn 结束---------------------------------------------------------\n\nSegCode32Len\tequ\t$ - LABEL_SEG_CODE32\n; END of [SECTION .s32]\n\n\n; 16 位代码段. 由 32 位代码段跳入, 跳出后到实模式\n[SECTION .s16code]\nALIGN\t32\n[BITS\t16]\nLABEL_SEG_CODE16:\n\t; 跳回实模式:\n\tmov\tax, SelectorNormal\n\tmov\tds, ax\n\tmov\tes, ax\n\tmov\tfs, ax\n\tmov\tgs, ax\n\tmov\tss, ax\n\n\tmov\teax, cr0\n\tand\tal, 11111110b\n\tmov\tcr0, eax\n\nLABEL_GO_BACK_TO_REAL:\n\tjmp\t0:LABEL_REAL_ENTRY\t; 段地址会在程序开始处被设置成正确的值\n\nCode16Len\tequ\t$ - LABEL_SEG_CODE16\n\n; END of [SECTION .s16code]\n```\n\n编译：\n```bash\nnasm pmtest2.asm -o pmtest2.com\n```\n\n运行\n\n我们清晰地看到， 程序打印出两行数字， 第一行全部是零， 说明开始内存地址5MB处都是0， 而下一行已经变成了41 42 43…，说明写操作成功。 十六进制的41、 42、 43、 …、 48正是A、 B、 C、 …、 H。同时看到， 程序执行结束后不再像上一个程序那样进入死循环， 而是重新出现了DOS提示符。 这说明我们重新回到了实模式下的DOS。\n\n","source":"_posts/动手写操作系统/3_保护模式_part1.md","raw":"---\ntitle: 保护模式_part1\ncover: false\ntoc: true\nmathjax: true\npassword:\ntags:\n- 汇编\n- 操作系统\ncategories:\n- 动手写操作系统\n---\n\n\n\n在XOS下新建chapter3/a文件夹，并把下面内容写到文件pmtest1.asm中\n\n```assembly\n; ==========================================\n; pmtest1.asm\n; 编译方法：nasm pmtest1.asm -o pmtest1.bin\n; ==========================================\n\n%include\t\"pm.inc\"\t; 常量, 宏, 以及一些说明\n\norg\t07c00h\n\tjmp\tLABEL_BEGIN\n\n[SECTION .gdt]\n; GDT\n;                              段基址,       段界限     , 属性\nLABEL_GDT:\t   Descriptor       0,                0, 0           ; 空描述符\nLABEL_DESC_CODE32: Descriptor       0, SegCode32Len - 1, DA_C + DA_32; 非一致代码段\nLABEL_DESC_VIDEO:  Descriptor 0B8000h,           0ffffh, DA_DRW\t     ; 显存首地址\n; GDT 结束\n\nGdtLen\t\tequ\t$ - LABEL_GDT\t; GDT长度\nGdtPtr\t\tdw\tGdtLen - 1\t; GDT界限\n\t\tdd\t0\t\t; GDT基地址\n\n; GDT 选择子\nSelectorCode32\t\tequ\tLABEL_DESC_CODE32\t- LABEL_GDT\nSelectorVideo\t\tequ\tLABEL_DESC_VIDEO\t- LABEL_GDT\n; END of [SECTION .gdt]\n\n[SECTION .s16]\n[BITS\t16]\nLABEL_BEGIN:\n\tmov\tax, cs\n\tmov\tds, ax\n\tmov\tes, ax\n\tmov\tss, ax\n\tmov\tsp, 0100h\n\n\t; 初始化 32 位代码段描述符\n\txor\teax, eax\n\tmov\tax, cs\n\tshl\teax, 4\n\tadd\teax, LABEL_SEG_CODE32\n\tmov\tword [LABEL_DESC_CODE32 + 2], ax\n\tshr\teax, 16\n\tmov\tbyte [LABEL_DESC_CODE32 + 4], al\n\tmov\tbyte [LABEL_DESC_CODE32 + 7], ah\n\t\n\t; 为加载 GDTR 作准备\n\txor\teax, eax\n\tmov\tax, ds\n\tshl\teax, 4\n\tadd\teax, LABEL_GDT\t\t; eax <- gdt 基地址\n\tmov\tdword [GdtPtr + 2], eax\t; [GdtPtr + 2] <- gdt 基地址\n\t\n\t; 加载 GDTR\n\tlgdt\t[GdtPtr]\n\t\n\t; 关中断\n\tcli\n\t\n\t; 打开地址线A20\n\tin\tal, 92h\n\tor\tal, 00000010b\n\tout\t92h, al\n\t\n\t; 准备切换到保护模式\n\tmov\teax, cr0\n\tor\teax, 1\n\tmov\tcr0, eax\n\t\n\t; 真正进入保护模式\n\tjmp\tdword SelectorCode32:0\t; 执行这一句会把 SelectorCode32 装入 cs,\n\t\t\t\t\t; 并跳转到 Code32Selector:0  处\n\n; END of [SECTION .s16]\n\n\n[SECTION .s32]; 32 位代码段. 由实模式跳入.\n[BITS\t32]\n\nLABEL_SEG_CODE32:\n\tmov\tax, SelectorVideo\n\tmov\tgs, ax\t\t\t; 视频段选择子(目的)\n\n\tmov\tedi, (80 * 11 + 79) * 2\t; 屏幕第 11 行, 第 79 列。\n\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字\n\tmov\tal, 'P'\n\tmov\t[gs:edi], ax\n\t\n\t; 到此停止\n\tjmp\t$\n\nSegCode32Len\tequ\t$ - LABEL_SEG_CODE32\n; END of [SECTION .s32] \n```\n\n编译\n```bash\nnasm pmtest1.asm -o pmtest1.bin\n```\n\n  pm.inc\n\n```assembly\n; 描述符图示\n\n; 图示一\n;\n;  ------ ┏━━┳━━┓高地址\n;         ┃ 7  ┃ 段 ┃\n;         ┣━━┫    ┃\n;                  基\n;  字节 7 ┆    ┆    ┆\n;                  址\n;         ┣━━┫ ② ┃\n;         ┃ 0  ┃    ┃\n;  ------ ┣━━╋━━┫\n;         ┃ 7  ┃ G  ┃\n;         ┣━━╉──┨\n;         ┃ 6  ┃ D  ┃\n;         ┣━━╉──┨\n;         ┃ 5  ┃ 0  ┃\n;         ┣━━╉──┨\n;         ┃ 4  ┃ AVL┃\n;  字节 6 ┣━━╉──┨\n;         ┃ 3  ┃    ┃\n;         ┣━━┫ 段 ┃\n;         ┃ 2  ┃ 界 ┃\n;         ┣━━┫ 限 ┃\n;         ┃ 1  ┃    ┃\n;         ┣━━┫ ② ┃\n;         ┃ 0  ┃    ┃\n;  ------ ┣━━╋━━┫\n;         ┃ 7  ┃ P  ┃\n;         ┣━━╉──┨\n;         ┃ 6  ┃    ┃\n;         ┣━━┫ DPL┃\n;         ┃ 5  ┃    ┃\n;         ┣━━╉──┨\n;         ┃ 4  ┃ S  ┃\n;  字节 5 ┣━━╉──┨\n;         ┃ 3  ┃    ┃\n;         ┣━━┫ T  ┃\n;         ┃ 2  ┃ Y  ┃\n;         ┣━━┫ P  ┃\n;         ┃ 1  ┃ E  ┃\n;         ┣━━┫    ┃\n;         ┃ 0  ┃    ┃\n;  ------ ┣━━╋━━┫\n;         ┃ 23 ┃    ┃\n;         ┣━━┫    ┃\n;         ┃ 22 ┃    ┃\n;         ┣━━┫ 段 ┃\n;\n;   字节  ┆    ┆ 基 ┆\n; 2, 3, 4\n;         ┣━━┫ 址 ┃\n;         ┃ 1  ┃ ① ┃\n;         ┣━━┫    ┃\n;         ┃ 0  ┃    ┃\n;  ------ ┣━━╋━━┫\n;         ┃ 15 ┃    ┃\n;         ┣━━┫    ┃\n;         ┃ 14 ┃    ┃\n;         ┣━━┫ 段 ┃\n;\n; 字节 0,1┆    ┆ 界 ┆\n;\n;         ┣━━┫ 限 ┃\n;         ┃ 1  ┃ ① ┃\n;         ┣━━┫    ┃\n;         ┃ 0  ┃    ┃\n;  ------ ┗━━┻━━┛低地址\n;\n\n\n; 图示二\n\n; 高地址………………………………………………………………………低地址\n\n; |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0    |\n; |7654321076543210765432107654321076543210765432107654321076543210|\t<- 共 8 字节\n; |--------========--------========--------========--------========|\n; ┏━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓\n; ┃31..24┃   (见下图)   ┃     段基址(23..0)    ┃ 段界限(15..0)┃\n; ┃      ┃              ┃                      ┃              ┃\n; ┃ 基址2┃③│②│    ①┃基址1b│   基址1a     ┃    段界限1   ┃\n; ┣━━━╋━━━┳━━━╋━━━━━━━━━━━╋━━━━━━━┫\n; ┃   %6 ┃  %5  ┃  %4  ┃  %3  ┃     %2       ┃       %1     ┃\n; ┗━━━┻━━━┻━━━┻━━━┻━━━━━━━┻━━━━━━━┛\n;         │                \\_________\n;         │                          \\__________________\n;         │                                             \\________________________________________________\n;         │                                                                                              \\\n;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓\n;         ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃\n;         ┣━━╋━━╋━━╋━━╋━━┻━━┻━━┻━━╋━━╋━━┻━━╋━━╋━━┻━━┻━━┻━━┫\n;         ┃ G  ┃ D  ┃ 0  ┃ AVL┃   段界限 2 (19..16)  ┃  P ┃   DPL    ┃ S  ┃       TYPE           ┃\n;         ┣━━┻━━┻━━┻━━╋━━━━━━━━━━━╋━━┻━━━━━┻━━┻━━━━━━━━━━━┫\n;         ┃      ③: 属性 2      ┃    ②: 段界限 2      ┃                   ①: 属性1                  ┃\n;         ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━┛\n;       高地址                                                                                          低地址\n;\n;\n\n; 说明:\n;\n; (1) P:    存在(Present)位。\n;\t\tP=1 表示描述符对地址转换是有效的，或者说该描述符所描述的段存在，即在内存中；\n;\t\tP=0 表示描述符对地址转换无效，即该段不存在。使用该描述符进行内存访问时会引起异常。\n;\n; (2) DPL:  表示描述符特权级(Descriptor Privilege level)，共2位。它规定了所描述段的特权级，用于特权检查，以决定对该段能否访问。 \n;\n; (3) S:   说明描述符的类型。\n;\t\t对于存储段描述符而言，S=1，以区别与系统段描述符和门描述符(S=0)。 \n;\n; (4) TYPE: 说明存储段描述符所描述的存储段的具体属性。\n;\n;\t\t \n;\t数据段类型\t类型值\t\t说明\n;\t\t\t----------------------------------\n;\t\t\t0\t\t只读 \n;\t\t\t1\t\t只读、已访问 \n;\t\t\t2\t\t读/写 \n;\t\t\t3\t\t读/写、已访问 \n;\t\t\t4\t\t只读、向下扩展 \n;\t\t\t5\t\t只读、向下扩展、已访问 \n;\t\t\t6\t\t读/写、向下扩展 \n;\t\t\t7\t\t读/写、向下扩展、已访问 \n;\n;\t\t\n;\t\t\t类型值\t\t说明\n;\t代码段类型\t----------------------------------\n;\t\t\t8\t\t只执行 \n;\t\t\t9\t\t只执行、已访问 \n;\t\t\tA\t\t执行/读 \n;\t\t\tB\t\t执行/读、已访问 \n;\t\t\tC\t\t只执行、一致码段 \n;\t\t\tD\t\t只执行、一致码段、已访问 \n;\t\t\tE\t\t执行/读、一致码段 \n;\t\t\tF\t\t执行/读、一致码段、已访问 \n;\n;\t\t\n;\t系统段类型\t类型编码\t说明\n;\t\t\t----------------------------------\n;\t\t\t0\t\t<未定义>\n;\t\t\t1\t\t可用286TSS\n;\t\t\t2\t\tLDT\n;\t\t\t3\t\t忙的286TSS\n;\t\t\t4\t\t286调用门\n;\t\t\t5\t\t任务门\n;\t\t\t6\t\t286中断门\n;\t\t\t7\t\t286陷阱门\n;\t\t\t8\t\t未定义\n;\t\t\t9\t\t可用386TSS\n;\t\t\tA\t\t<未定义>\n;\t\t\tB\t\t忙的386TSS\n;\t\t\tC\t\t386调用门\n;\t\t\tD\t\t<未定义>\n;\t\t\tE\t\t386中断门\n;\t\t\tF\t\t386陷阱门\n;\n; (5) G:    段界限粒度(Granularity)位。\n;\t\tG=0 表示界限粒度为字节；\n;\t\tG=1 表示界限粒度为4K 字节。\n;           注意，界限粒度只对段界限有效，对段基地址无效，段基地址总是以字节为单位。 \n;\n; (6) D:    D位是一个很特殊的位，在描述可执行段、向下扩展数据段或由SS寄存器寻址的段(通常是堆栈段)的三种描述符中的意义各不相同。 \n;           ⑴ 在描述可执行段的描述符中，D位决定了指令使用的地址及操作数所默认的大小。\n;\t\t① D=1表示默认情况下指令使用32位地址及32位或8位操作数，这样的代码段也称为32位代码段；\n;\t\t② D=0 表示默认情况下，使用16位地址及16位或8位操作数，这样的代码段也称为16位代码段，它与80286兼容。可以使用地址大小前缀和操作数大小前缀分别改变默认的地址或操作数的大小。 \n;           ⑵ 在向下扩展数据段的描述符中，D位决定段的上部边界。\n;\t\t① D=1表示段的上部界限为4G；\n;\t\t② D=0表示段的上部界限为64K，这是为了与80286兼容。 \n;           ⑶ 在描述由SS寄存器寻址的段描述符中，D位决定隐式的堆栈访问指令(如PUSH和POP指令)使用何种堆栈指针寄存器。\n;\t\t① D=1表示使用32位堆栈指针寄存器ESP；\n;\t\t② D=0表示使用16位堆栈指针寄存器SP，这与80286兼容。 \n;\n; (7) AVL:  软件可利用位。80386对该位的使用未左规定，Intel公司也保证今后开发生产的处理器只要与80386兼容，就不会对该位的使用做任何定义或规定。 \n;\n\n\n;----------------------------------------------------------------------------\n; 在下列类型值命名中：\n;       DA_  : Descriptor Attribute\n;       D    : 数据段\n;       C    : 代码段\n;       S    : 系统段\n;       R    : 只读\n;       RW   : 读写\n;       A    : 已访问\n;       其它 : 可按照字面意思理解\n;----------------------------------------------------------------------------\n\n; 描述符类型\nDA_32\t\tEQU\t4000h\t; 32 位段\n\nDA_DPL0\t\tEQU\t  00h\t; DPL = 0\nDA_DPL1\t\tEQU\t  20h\t; DPL = 1\nDA_DPL2\t\tEQU\t  40h\t; DPL = 2\nDA_DPL3\t\tEQU\t  60h\t; DPL = 3\n\n; 存储段描述符类型\nDA_DR\t\tEQU\t90h\t; 存在的只读数据段类型值\nDA_DRW\t\tEQU\t92h\t; 存在的可读写数据段属性值\nDA_DRWA\t\tEQU\t93h\t; 存在的已访问可读写数据段类型值\nDA_C\t\tEQU\t98h\t; 存在的只执行代码段属性值\nDA_CR\t\tEQU\t9Ah\t; 存在的可执行可读代码段属性值\nDA_CCO\t\tEQU\t9Ch\t; 存在的只执行一致代码段属性值\nDA_CCOR\t\tEQU\t9Eh\t; 存在的可执行可读一致代码段属性值\n\n; 系统段描述符类型\nDA_LDT\t\tEQU\t  82h\t; 局部描述符表段类型值\nDA_TaskGate\tEQU\t  85h\t; 任务门类型值\nDA_386TSS\tEQU\t  89h\t; 可用 386 任务状态段类型值\nDA_386CGate\tEQU\t  8Ch\t; 386 调用门类型值\nDA_386IGate\tEQU\t  8Eh\t; 386 中断门类型值\nDA_386TGate\tEQU\t  8Fh\t; 386 陷阱门类型值\n\n\n; 选择子图示:\n;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓\n;         ┃ 15 ┃ 14 ┃ 13 ┃ 12 ┃ 11 ┃ 10 ┃ 9  ┃ 8  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃\n;         ┣━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━╋━━╋━━┻━━┫\n;         ┃                                 描述符索引                                 ┃ TI ┃   RPL    ┃\n;         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━┻━━━━━┛\n;\n; RPL(Requested Privilege Level): 请求特权级，用于特权检查。\n;\n; TI(Table Indicator): 引用描述符表指示位\n;\tTI=0 指示从全局描述符表GDT中读取描述符；\n;\tTI=1 指示从局部描述符表LDT中读取描述符。\n;\n\n;----------------------------------------------------------------------------\n; 选择子类型值说明\n; 其中:\n;       SA_  : Selector Attribute\n\nSA_RPL0\t\tEQU\t0\t; ┓\nSA_RPL1\t\tEQU\t1\t; ┣ RPL\nSA_RPL2\t\tEQU\t2\t; ┃\nSA_RPL3\t\tEQU\t3\t; ┛\n\nSA_TIG\t\tEQU\t0\t; ┓TI\nSA_TIL\t\tEQU\t4\t; ┛\n;----------------------------------------------------------------------------\n\n\n\n; 宏 ------------------------------------------------------------------------------------------------------\n;\n; 描述符\n; usage: Descriptor Base, Limit, Attr\n;        Base:  dd\n;        Limit: dd (low 20 bits available)\n;        Attr:  dw (lower 4 bits of higher byte are always 0)\n%macro Descriptor 3\n\tdw\t%2 & 0FFFFh\t\t\t\t; 段界限1\n\tdw\t%1 & 0FFFFh\t\t\t\t; 段基址1\n\tdb\t(%1 >> 16) & 0FFh\t\t\t; 段基址2\n\tdw\t((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)\t; 属性1 + 段界限2 + 属性2\n\tdb\t(%1 >> 24) & 0FFh\t\t\t; 段基址3\n%endmacro ; 共 8 字节\n;\n; 门\n; usage: Gate Selector, Offset, DCount, Attr\n;        Selector:  dw\n;        Offset:    dd\n;        DCount:    db\n;        Attr:      db\n%macro Gate 4\n\tdw\t(%2 & 0FFFFh)\t\t\t\t; 偏移1\n\tdw\t%1\t\t\t\t\t; 选择子\n\tdw\t(%3 & 1Fh) | ((%4 << 8) & 0FF00h)\t; 属性\n\tdw\t((%2 >> 16) & 0FFFFh)\t\t\t; 偏移2\n%endmacro ; 共 8 字节\n; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\n将第二章的a.img和bochsrc复制过来，并执行下面命令生成软盘映像\n\n```bash\ndd if=pmtest1.bin of=a.img bs=512 count=1 conv=notrunc  \n```\n\n运行Bochs,可以看到， 在屏幕中部右侧， 出现了一个红色的字母“ P” ， 然后再也不动了。  \n\n第二部分\n\n在chapter3下新建b文件夹，复制a文件夹中的bochsrc，pm.inc，pmtest1.asm\n\n1. 到Bochs官方网站下载一个FreeDos。 解压后将其中的a.img复制到我们的工作目录中， 并改名为freedos.img。\n2. 用bximage生成一个软盘映像， 起名为pm.img。\n3. 修改我们的bochsrc， 确保其中有以下三行：\n```配置\nfloppya: 1_44=freedos.img, status=inserted\nfloppyb: 1_44=pm.img, status=inserted\nboot: a \n```\n4.启动Bochs， 待FreeDos启动完毕后用下面命令格式化B:盘   \n```\nformat b:\n```\n5. 将代码3.1的第8行中的07c00h改为0100h， 并重新编译：\n```bash\nnasm pmtest1.asm -o pmtest1.com\n```\n6. 将pmtest1.com复制到虚拟软盘pm.img上：\n注意按照书中命令，进行虚拟软盘的挂载时\n```bash\nsudo mount -o loop pm.img /mnt/floppy\n```\n会出现了错误\n```bash\nmount point /mnt/floppy does not exist\n```\n解决办法：\n先用mkdir指令在mnt目录下生成一个floppy 然后执行下面命令：\n```bash\nsudo losetup /dev/loop0 pm.img\nsudo mount /dev/loop0 /mnt/floppy\nsudo cp pmtest1.com /mnt/floppy\nsudo umount /mnt/floppy\n```\n7. 到FreeDos中执行如下命令：\n```\ndir b:\nb:pmtest1.com\n```\n\n这样pmtest1.com就运行起来了, 一个红色的字母“ P” 出现了。\n\n第三部分\n在b文件夹下，新建pmtest2.asm，并把下面内容写到文件中\n\n```assembly\n; ==========================================\n; pmtest2.asm\n; 编译方法：nasm pmtest2.asm -o pmtest2.com\n; ==========================================\n\n%include\t\"pm.inc\"\t; 常量, 宏, 以及一些说明\n\norg\t0100h\n\tjmp\tLABEL_BEGIN\n\n[SECTION .gdt]\n; GDT\n;                            段基址,        段界限 , 属性\nLABEL_GDT:         Descriptor    0,              0, 0         ; 空描述符\nLABEL_DESC_NORMAL: Descriptor    0,         0ffffh, DA_DRW    ; Normal 描述符\nLABEL_DESC_CODE32: Descriptor    0, SegCode32Len-1, DA_C+DA_32; 非一致代码段, 32\nLABEL_DESC_CODE16: Descriptor    0,         0ffffh, DA_C      ; 非一致代码段, 16\nLABEL_DESC_DATA:   Descriptor    0,      DataLen-1, DA_DRW    ; Data\nLABEL_DESC_STACK:  Descriptor    0,     TopOfStack, DA_DRWA+DA_32; Stack, 32 位\nLABEL_DESC_TEST:   Descriptor 0500000h,     0ffffh, DA_DRW\nLABEL_DESC_VIDEO:  Descriptor  0B8000h,     0ffffh, DA_DRW    ; 显存首地址\n; GDT 结束\n\nGdtLen\t\tequ\t$ - LABEL_GDT\t; GDT长度\nGdtPtr\t\tdw\tGdtLen - 1\t; GDT界限\n\t\tdd\t0\t\t; GDT基地址\n\n; GDT 选择子\nSelectorNormal\t\tequ\tLABEL_DESC_NORMAL\t- LABEL_GDT\nSelectorCode32\t\tequ\tLABEL_DESC_CODE32\t- LABEL_GDT\nSelectorCode16\t\tequ\tLABEL_DESC_CODE16\t- LABEL_GDT\nSelectorData\t\tequ\tLABEL_DESC_DATA\t\t- LABEL_GDT\nSelectorStack\t\tequ\tLABEL_DESC_STACK\t- LABEL_GDT\nSelectorTest\t\tequ\tLABEL_DESC_TEST\t\t- LABEL_GDT\nSelectorVideo\t\tequ\tLABEL_DESC_VIDEO\t- LABEL_GDT\n; END of [SECTION .gdt]\n\n[SECTION .data1]\t ; 数据段\nALIGN\t32\n[BITS\t32]\nLABEL_DATA:\nSPValueInRealMode\tdw\t0\n; 字符串\nPMMessage:\t\tdb\t\"In Protect Mode now. ^-^\", 0\t; 在保护模式中显示\nOffsetPMMessage\t\tequ\tPMMessage - $$\nStrTest:\t\tdb\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", 0\nOffsetStrTest\t\tequ\tStrTest - $$\nDataLen\t\t\tequ\t$ - LABEL_DATA\n; END of [SECTION .data1]\n\n\n; 全局堆栈段\n[SECTION .gs]\nALIGN\t32\n[BITS\t32]\nLABEL_STACK:\n\ttimes 512 db 0\n\nTopOfStack\tequ\t$ - LABEL_STACK - 1\n\n; END of [SECTION .gs]\n\n\n[SECTION .s16]\n[BITS\t16]\nLABEL_BEGIN:\n\tmov\tax, cs\n\tmov\tds, ax\n\tmov\tes, ax\n\tmov\tss, ax\n\tmov\tsp, 0100h\n\n\tmov\t[LABEL_GO_BACK_TO_REAL+3], ax\n\tmov\t[SPValueInRealMode], sp\n\t\n\t; 初始化 16 位代码段描述符\n\tmov\tax, cs\n\tmovzx\teax, ax\n\tshl\teax, 4\n\tadd\teax, LABEL_SEG_CODE16\n\tmov\tword [LABEL_DESC_CODE16 + 2], ax\n\tshr\teax, 16\n\tmov\tbyte [LABEL_DESC_CODE16 + 4], al\n\tmov\tbyte [LABEL_DESC_CODE16 + 7], ah\n\t\n\t; 初始化 32 位代码段描述符\n\txor\teax, eax\n\tmov\tax, cs\n\tshl\teax, 4\n\tadd\teax, LABEL_SEG_CODE32\n\tmov\tword [LABEL_DESC_CODE32 + 2], ax\n\tshr\teax, 16\n\tmov\tbyte [LABEL_DESC_CODE32 + 4], al\n\tmov\tbyte [LABEL_DESC_CODE32 + 7], ah\n\t\n\t; 初始化数据段描述符\n\txor\teax, eax\n\tmov\tax, ds\n\tshl\teax, 4\n\tadd\teax, LABEL_DATA\n\tmov\tword [LABEL_DESC_DATA + 2], ax\n\tshr\teax, 16\n\tmov\tbyte [LABEL_DESC_DATA + 4], al\n\tmov\tbyte [LABEL_DESC_DATA + 7], ah\n\t\n\t; 初始化堆栈段描述符\n\txor\teax, eax\n\tmov\tax, ds\n\tshl\teax, 4\n\tadd\teax, LABEL_STACK\n\tmov\tword [LABEL_DESC_STACK + 2], ax\n\tshr\teax, 16\n\tmov\tbyte [LABEL_DESC_STACK + 4], al\n\tmov\tbyte [LABEL_DESC_STACK + 7], ah\n\t\n\t; 为加载 GDTR 作准备\n\txor\teax, eax\n\tmov\tax, ds\n\tshl\teax, 4\n\tadd\teax, LABEL_GDT\t\t; eax <- gdt 基地址\n\tmov\tdword [GdtPtr + 2], eax\t; [GdtPtr + 2] <- gdt 基地址\n\t\n\t; 加载 GDTR\n\tlgdt\t[GdtPtr]\n\t\n\t; 关中断\n\tcli\n\t\n\t; 打开地址线A20\n\tin\tal, 92h\n\tor\tal, 00000010b\n\tout\t92h, al\n\t\n\t; 准备切换到保护模式\n\tmov\teax, cr0\n\tor\teax, 1\n\tmov\tcr0, eax\n\t\n\t; 真正进入保护模式\n\tjmp\tdword SelectorCode32:0\t; 执行这一句会把 SelectorCode32 装入 cs, 并跳转到 Code32Selector:0  处\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nLABEL_REAL_ENTRY:\t\t; 从保护模式跳回到实模式就到了这里\n\tmov\tax, cs\n\tmov\tds, ax\n\tmov\tes, ax\n\tmov\tss, ax\n\n\tmov\tsp, [SPValueInRealMode]\n\t\n\tin\tal, 92h\t\t; `.\n\tand\tal, 11111101b\t;  | 关闭 A20 地址线\n\tout\t92h, al\t\t; /\n\t\n\tsti\t\t\t; 开中断\n\t\n\tmov\tax, 4c00h\t; `.\n\tint\t21h\t\t; /  回到 DOS\n\n; END of [SECTION .s16]\n\n\n[SECTION .s32]; 32 位代码段. 由实模式跳入.\n[BITS\t32]\n\nLABEL_SEG_CODE32:\n\tmov\tax, SelectorData\n\tmov\tds, ax\t\t\t; 数据段选择子\n\tmov\tax, SelectorTest\n\tmov\tes, ax\t\t\t; 测试段选择子\n\tmov\tax, SelectorVideo\n\tmov\tgs, ax\t\t\t; 视频段选择子\n\n\tmov\tax, SelectorStack\n\tmov\tss, ax\t\t\t; 堆栈段选择子\n\t\n\tmov\tesp, TopOfStack\n\n\n\t; 下面显示一个字符串\n\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字\n\txor\tesi, esi\n\txor\tedi, edi\n\tmov\tesi, OffsetPMMessage\t; 源数据偏移\n\tmov\tedi, (80 * 10 + 0) * 2\t; 目的数据偏移。屏幕第 10 行, 第 0 列。\n\tcld\n\n.1:\n\tlodsb\n\ttest\tal, al\n\tjz\t.2\n\tmov\t[gs:edi], ax\n\tadd\tedi, 2\n\tjmp\t.1\n.2:\t; 显示完毕\n\n\tcall\tDispReturn\n\t\n\tcall\tTestRead\n\tcall\tTestWrite\n\tcall\tTestRead\n\t\n\t; 到此停止\n\tjmp\tSelectorCode16:0\n\n; ------------------------------------------------------------------------\nTestRead:\n\txor\tesi, esi\n\tmov\tecx, 8\n.loop:\n\tmov\tal, [es:esi]\n\tcall\tDispAL\n\tinc\tesi\n\tloop\t.loop\n\n\tcall\tDispReturn\n\t\n\tret\n\n; TestRead 结束-----------------------------------------------------------\n\n\n; ------------------------------------------------------------------------\nTestWrite:\n\tpush\tesi\n\tpush\tedi\n\txor\tesi, esi\n\txor\tedi, edi\n\tmov\tesi, OffsetStrTest\t; 源数据偏移\n\tcld\n.1:\n\tlodsb\n\ttest\tal, al\n\tjz\t.2\n\tmov\t[es:edi], al\n\tinc\tedi\n\tjmp\t.1\n.2:\n\n\tpop\tedi\n\tpop\tesi\n\t\n\tret\n\n; TestWrite 结束----------------------------------------------------------\n\n\n; ------------------------------------------------------------------------\n; 显示 AL 中的数字\n; 默认地:\n;\t数字已经存在 AL 中\n;\tedi 始终指向要显示的下一个字符的位置\n; 被改变的寄存器:\n;\tax, edi\n; ------------------------------------------------------------------------\nDispAL:\n\tpush\tecx\n\tpush\tedx\n\n\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字\n\tmov\tdl, al\n\tshr\tal, 4\n\tmov\tecx, 2\n\n.begin:\n\tand\tal, 01111b\n\tcmp\tal, 9\n\tja\t.1\n\tadd\tal, '0'\n\tjmp\t.2\n.1:\n\tsub\tal, 0Ah\n\tadd\tal, 'A'\n.2:\n\tmov\t[gs:edi], ax\n\tadd\tedi, 2\n\n\tmov\tal, dl\n\tloop\t.begin\n\tadd\tedi, 2\n\t\n\tpop\tedx\n\tpop\tecx\n\t\n\tret\n\n; DispAL 结束-------------------------------------------------------------\n\n\n; ------------------------------------------------------------------------\nDispReturn:\n\tpush\teax\n\tpush\tebx\n\tmov\teax, edi\n\tmov\tbl, 160\n\tdiv\tbl\n\tand\teax, 0FFh\n\tinc\teax\n\tmov\tbl, 160\n\tmul\tbl\n\tmov\tedi, eax\n\tpop\tebx\n\tpop\teax\n\n\tret\n\n; DispReturn 结束---------------------------------------------------------\n\nSegCode32Len\tequ\t$ - LABEL_SEG_CODE32\n; END of [SECTION .s32]\n\n\n; 16 位代码段. 由 32 位代码段跳入, 跳出后到实模式\n[SECTION .s16code]\nALIGN\t32\n[BITS\t16]\nLABEL_SEG_CODE16:\n\t; 跳回实模式:\n\tmov\tax, SelectorNormal\n\tmov\tds, ax\n\tmov\tes, ax\n\tmov\tfs, ax\n\tmov\tgs, ax\n\tmov\tss, ax\n\n\tmov\teax, cr0\n\tand\tal, 11111110b\n\tmov\tcr0, eax\n\nLABEL_GO_BACK_TO_REAL:\n\tjmp\t0:LABEL_REAL_ENTRY\t; 段地址会在程序开始处被设置成正确的值\n\nCode16Len\tequ\t$ - LABEL_SEG_CODE16\n\n; END of [SECTION .s16code]\n```\n\n编译：\n```bash\nnasm pmtest2.asm -o pmtest2.com\n```\n\n运行\n\n我们清晰地看到， 程序打印出两行数字， 第一行全部是零， 说明开始内存地址5MB处都是0， 而下一行已经变成了41 42 43…，说明写操作成功。 十六进制的41、 42、 43、 …、 48正是A、 B、 C、 …、 H。同时看到， 程序执行结束后不再像上一个程序那样进入死循环， 而是重新出现了DOS提示符。 这说明我们重新回到了实模式下的DOS。\n\n","slug":"动手写操作系统/3_保护模式_part1","published":1,"date":"2025-02-09T15:24:15.868Z","updated":"2025-02-09T15:20:19.074Z","comments":1,"layout":"post","photos":[],"_id":"cm6xt9rby001or8tk2wfaagi0","content":"<p>在XOS下新建chapter3&#x2F;a文件夹，并把下面内容写到文件pmtest1.asm中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">; ==========================================</span><br><span class=\"line\">; pmtest1.asm</span><br><span class=\"line\">; 编译方法：nasm pmtest1.asm -o pmtest1.bin</span><br><span class=\"line\">; ==========================================</span><br><span class=\"line\"></span><br><span class=\"line\">%include\t&quot;pm.inc&quot;\t; 常量, 宏, 以及一些说明</span><br><span class=\"line\"></span><br><span class=\"line\">org\t07c00h</span><br><span class=\"line\">\tjmp\tLABEL_BEGIN</span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .gdt]</span><br><span class=\"line\">; GDT</span><br><span class=\"line\">;                              段基址,       段界限     , 属性</span><br><span class=\"line\">LABEL_GDT:\t   Descriptor       0,                0, 0           ; 空描述符</span><br><span class=\"line\">LABEL_DESC_CODE32: Descriptor       0, SegCode32Len - 1, DA_C + DA_32; 非一致代码段</span><br><span class=\"line\">LABEL_DESC_VIDEO:  Descriptor 0B8000h,           0ffffh, DA_DRW\t     ; 显存首地址</span><br><span class=\"line\">; GDT 结束</span><br><span class=\"line\"></span><br><span class=\"line\">GdtLen\t\tequ\t$ - LABEL_GDT\t; GDT长度</span><br><span class=\"line\">GdtPtr\t\tdw\tGdtLen - 1\t; GDT界限</span><br><span class=\"line\">\t\tdd\t0\t\t; GDT基地址</span><br><span class=\"line\"></span><br><span class=\"line\">; GDT 选择子</span><br><span class=\"line\">SelectorCode32\t\tequ\tLABEL_DESC_CODE32\t- LABEL_GDT</span><br><span class=\"line\">SelectorVideo\t\tequ\tLABEL_DESC_VIDEO\t- LABEL_GDT</span><br><span class=\"line\">; END of [SECTION .gdt]</span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .s16]</span><br><span class=\"line\">[BITS\t16]</span><br><span class=\"line\">LABEL_BEGIN:</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tmov\tds, ax</span><br><span class=\"line\">\tmov\tes, ax</span><br><span class=\"line\">\tmov\tss, ax</span><br><span class=\"line\">\tmov\tsp, 0100h</span><br><span class=\"line\"></span><br><span class=\"line\">\t; 初始化 32 位代码段描述符</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_SEG_CODE32</span><br><span class=\"line\">\tmov\tword [LABEL_DESC_CODE32 + 2], ax</span><br><span class=\"line\">\tshr\teax, 16</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE32 + 4], al</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE32 + 7], ah</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 为加载 GDTR 作准备</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, ds</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_GDT\t\t; eax &lt;- gdt 基地址</span><br><span class=\"line\">\tmov\tdword [GdtPtr + 2], eax\t; [GdtPtr + 2] &lt;- gdt 基地址</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 加载 GDTR</span><br><span class=\"line\">\tlgdt\t[GdtPtr]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 关中断</span><br><span class=\"line\">\tcli</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 打开地址线A20</span><br><span class=\"line\">\tin\tal, 92h</span><br><span class=\"line\">\tor\tal, 00000010b</span><br><span class=\"line\">\tout\t92h, al</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 准备切换到保护模式</span><br><span class=\"line\">\tmov\teax, cr0</span><br><span class=\"line\">\tor\teax, 1</span><br><span class=\"line\">\tmov\tcr0, eax</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 真正进入保护模式</span><br><span class=\"line\">\tjmp\tdword SelectorCode32:0\t; 执行这一句会把 SelectorCode32 装入 cs,</span><br><span class=\"line\">\t\t\t\t\t; 并跳转到 Code32Selector:0  处</span><br><span class=\"line\"></span><br><span class=\"line\">; END of [SECTION .s16]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .s32]; 32 位代码段. 由实模式跳入.</span><br><span class=\"line\">[BITS\t32]</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL_SEG_CODE32:</span><br><span class=\"line\">\tmov\tax, SelectorVideo</span><br><span class=\"line\">\tmov\tgs, ax\t\t\t; 视频段选择子(目的)</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\tedi, (80 * 11 + 79) * 2\t; 屏幕第 11 行, 第 79 列。</span><br><span class=\"line\">\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字</span><br><span class=\"line\">\tmov\tal, &#x27;P&#x27;</span><br><span class=\"line\">\tmov\t[gs:edi], ax</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 到此停止</span><br><span class=\"line\">\tjmp\t$</span><br><span class=\"line\"></span><br><span class=\"line\">SegCode32Len\tequ\t$ - LABEL_SEG_CODE32</span><br><span class=\"line\">; END of [SECTION .s32] </span><br></pre></td></tr></table></figure>\n\n<p>编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nasm pmtest1.asm -o pmtest1.bin</span><br></pre></td></tr></table></figure>\n\n<p>  pm.inc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">; 描述符图示</span><br><span class=\"line\"></span><br><span class=\"line\">; 图示一</span><br><span class=\"line\">;</span><br><span class=\"line\">;  ------ ┏━━┳━━┓高地址</span><br><span class=\"line\">;         ┃ 7  ┃ 段 ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;                  基</span><br><span class=\"line\">;  字节 7 ┆    ┆    ┆</span><br><span class=\"line\">;                  址</span><br><span class=\"line\">;         ┣━━┫ ② ┃</span><br><span class=\"line\">;         ┃ 0  ┃    ┃</span><br><span class=\"line\">;  ------ ┣━━╋━━┫</span><br><span class=\"line\">;         ┃ 7  ┃ G  ┃</span><br><span class=\"line\">;         ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 6  ┃ D  ┃</span><br><span class=\"line\">;         ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 5  ┃ 0  ┃</span><br><span class=\"line\">;         ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 4  ┃ AVL┃</span><br><span class=\"line\">;  字节 6 ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 3  ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ 段 ┃</span><br><span class=\"line\">;         ┃ 2  ┃ 界 ┃</span><br><span class=\"line\">;         ┣━━┫ 限 ┃</span><br><span class=\"line\">;         ┃ 1  ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ ② ┃</span><br><span class=\"line\">;         ┃ 0  ┃    ┃</span><br><span class=\"line\">;  ------ ┣━━╋━━┫</span><br><span class=\"line\">;         ┃ 7  ┃ P  ┃</span><br><span class=\"line\">;         ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 6  ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ DPL┃</span><br><span class=\"line\">;         ┃ 5  ┃    ┃</span><br><span class=\"line\">;         ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 4  ┃ S  ┃</span><br><span class=\"line\">;  字节 5 ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 3  ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ T  ┃</span><br><span class=\"line\">;         ┃ 2  ┃ Y  ┃</span><br><span class=\"line\">;         ┣━━┫ P  ┃</span><br><span class=\"line\">;         ┃ 1  ┃ E  ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;         ┃ 0  ┃    ┃</span><br><span class=\"line\">;  ------ ┣━━╋━━┫</span><br><span class=\"line\">;         ┃ 23 ┃    ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;         ┃ 22 ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ 段 ┃</span><br><span class=\"line\">;</span><br><span class=\"line\">;   字节  ┆    ┆ 基 ┆</span><br><span class=\"line\">; 2, 3, 4</span><br><span class=\"line\">;         ┣━━┫ 址 ┃</span><br><span class=\"line\">;         ┃ 1  ┃ ① ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;         ┃ 0  ┃    ┃</span><br><span class=\"line\">;  ------ ┣━━╋━━┫</span><br><span class=\"line\">;         ┃ 15 ┃    ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;         ┃ 14 ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ 段 ┃</span><br><span class=\"line\">;</span><br><span class=\"line\">; 字节 0,1┆    ┆ 界 ┆</span><br><span class=\"line\">;</span><br><span class=\"line\">;         ┣━━┫ 限 ┃</span><br><span class=\"line\">;         ┃ 1  ┃ ① ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;         ┃ 0  ┃    ┃</span><br><span class=\"line\">;  ------ ┗━━┻━━┛低地址</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; 图示二</span><br><span class=\"line\"></span><br><span class=\"line\">; 高地址………………………………………………………………………低地址</span><br><span class=\"line\"></span><br><span class=\"line\">; |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0    |</span><br><span class=\"line\">; |7654321076543210765432107654321076543210765432107654321076543210|\t&lt;- 共 8 字节</span><br><span class=\"line\">; |--------========--------========--------========--------========|</span><br><span class=\"line\">; ┏━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓</span><br><span class=\"line\">; ┃31..24┃   (见下图)   ┃     段基址(23..0)    ┃ 段界限(15..0)┃</span><br><span class=\"line\">; ┃      ┃              ┃                      ┃              ┃</span><br><span class=\"line\">; ┃ 基址2┃③│②│    ①┃基址1b│   基址1a     ┃    段界限1   ┃</span><br><span class=\"line\">; ┣━━━╋━━━┳━━━╋━━━━━━━━━━━╋━━━━━━━┫</span><br><span class=\"line\">; ┃   %6 ┃  %5  ┃  %4  ┃  %3  ┃     %2       ┃       %1     ┃</span><br><span class=\"line\">; ┗━━━┻━━━┻━━━┻━━━┻━━━━━━━┻━━━━━━━┛</span><br><span class=\"line\">;         │                \\_________</span><br><span class=\"line\">;         │                          \\__________________</span><br><span class=\"line\">;         │                                             \\________________________________________________</span><br><span class=\"line\">;         │                                                                                              \\</span><br><span class=\"line\">;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓</span><br><span class=\"line\">;         ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃</span><br><span class=\"line\">;         ┣━━╋━━╋━━╋━━╋━━┻━━┻━━┻━━╋━━╋━━┻━━╋━━╋━━┻━━┻━━┻━━┫</span><br><span class=\"line\">;         ┃ G  ┃ D  ┃ 0  ┃ AVL┃   段界限 2 (19..16)  ┃  P ┃   DPL    ┃ S  ┃       TYPE           ┃</span><br><span class=\"line\">;         ┣━━┻━━┻━━┻━━╋━━━━━━━━━━━╋━━┻━━━━━┻━━┻━━━━━━━━━━━┫</span><br><span class=\"line\">;         ┃      ③: 属性 2      ┃    ②: 段界限 2      ┃                   ①: 属性1                  ┃</span><br><span class=\"line\">;         ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━┛</span><br><span class=\"line\">;       高地址                                                                                          低地址</span><br><span class=\"line\">;</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\">; 说明:</span><br><span class=\"line\">;</span><br><span class=\"line\">; (1) P:    存在(Present)位。</span><br><span class=\"line\">;\t\tP=1 表示描述符对地址转换是有效的，或者说该描述符所描述的段存在，即在内存中；</span><br><span class=\"line\">;\t\tP=0 表示描述符对地址转换无效，即该段不存在。使用该描述符进行内存访问时会引起异常。</span><br><span class=\"line\">;</span><br><span class=\"line\">; (2) DPL:  表示描述符特权级(Descriptor Privilege level)，共2位。它规定了所描述段的特权级，用于特权检查，以决定对该段能否访问。 </span><br><span class=\"line\">;</span><br><span class=\"line\">; (3) S:   说明描述符的类型。</span><br><span class=\"line\">;\t\t对于存储段描述符而言，S=1，以区别与系统段描述符和门描述符(S=0)。 </span><br><span class=\"line\">;</span><br><span class=\"line\">; (4) TYPE: 说明存储段描述符所描述的存储段的具体属性。</span><br><span class=\"line\">;</span><br><span class=\"line\">;\t\t </span><br><span class=\"line\">;\t数据段类型\t类型值\t\t说明</span><br><span class=\"line\">;\t\t\t----------------------------------</span><br><span class=\"line\">;\t\t\t0\t\t只读 </span><br><span class=\"line\">;\t\t\t1\t\t只读、已访问 </span><br><span class=\"line\">;\t\t\t2\t\t读/写 </span><br><span class=\"line\">;\t\t\t3\t\t读/写、已访问 </span><br><span class=\"line\">;\t\t\t4\t\t只读、向下扩展 </span><br><span class=\"line\">;\t\t\t5\t\t只读、向下扩展、已访问 </span><br><span class=\"line\">;\t\t\t6\t\t读/写、向下扩展 </span><br><span class=\"line\">;\t\t\t7\t\t读/写、向下扩展、已访问 </span><br><span class=\"line\">;</span><br><span class=\"line\">;\t\t</span><br><span class=\"line\">;\t\t\t类型值\t\t说明</span><br><span class=\"line\">;\t代码段类型\t----------------------------------</span><br><span class=\"line\">;\t\t\t8\t\t只执行 </span><br><span class=\"line\">;\t\t\t9\t\t只执行、已访问 </span><br><span class=\"line\">;\t\t\tA\t\t执行/读 </span><br><span class=\"line\">;\t\t\tB\t\t执行/读、已访问 </span><br><span class=\"line\">;\t\t\tC\t\t只执行、一致码段 </span><br><span class=\"line\">;\t\t\tD\t\t只执行、一致码段、已访问 </span><br><span class=\"line\">;\t\t\tE\t\t执行/读、一致码段 </span><br><span class=\"line\">;\t\t\tF\t\t执行/读、一致码段、已访问 </span><br><span class=\"line\">;</span><br><span class=\"line\">;\t\t</span><br><span class=\"line\">;\t系统段类型\t类型编码\t说明</span><br><span class=\"line\">;\t\t\t----------------------------------</span><br><span class=\"line\">;\t\t\t0\t\t&lt;未定义&gt;</span><br><span class=\"line\">;\t\t\t1\t\t可用286TSS</span><br><span class=\"line\">;\t\t\t2\t\tLDT</span><br><span class=\"line\">;\t\t\t3\t\t忙的286TSS</span><br><span class=\"line\">;\t\t\t4\t\t286调用门</span><br><span class=\"line\">;\t\t\t5\t\t任务门</span><br><span class=\"line\">;\t\t\t6\t\t286中断门</span><br><span class=\"line\">;\t\t\t7\t\t286陷阱门</span><br><span class=\"line\">;\t\t\t8\t\t未定义</span><br><span class=\"line\">;\t\t\t9\t\t可用386TSS</span><br><span class=\"line\">;\t\t\tA\t\t&lt;未定义&gt;</span><br><span class=\"line\">;\t\t\tB\t\t忙的386TSS</span><br><span class=\"line\">;\t\t\tC\t\t386调用门</span><br><span class=\"line\">;\t\t\tD\t\t&lt;未定义&gt;</span><br><span class=\"line\">;\t\t\tE\t\t386中断门</span><br><span class=\"line\">;\t\t\tF\t\t386陷阱门</span><br><span class=\"line\">;</span><br><span class=\"line\">; (5) G:    段界限粒度(Granularity)位。</span><br><span class=\"line\">;\t\tG=0 表示界限粒度为字节；</span><br><span class=\"line\">;\t\tG=1 表示界限粒度为4K 字节。</span><br><span class=\"line\">;           注意，界限粒度只对段界限有效，对段基地址无效，段基地址总是以字节为单位。 </span><br><span class=\"line\">;</span><br><span class=\"line\">; (6) D:    D位是一个很特殊的位，在描述可执行段、向下扩展数据段或由SS寄存器寻址的段(通常是堆栈段)的三种描述符中的意义各不相同。 </span><br><span class=\"line\">;           ⑴ 在描述可执行段的描述符中，D位决定了指令使用的地址及操作数所默认的大小。</span><br><span class=\"line\">;\t\t① D=1表示默认情况下指令使用32位地址及32位或8位操作数，这样的代码段也称为32位代码段；</span><br><span class=\"line\">;\t\t② D=0 表示默认情况下，使用16位地址及16位或8位操作数，这样的代码段也称为16位代码段，它与80286兼容。可以使用地址大小前缀和操作数大小前缀分别改变默认的地址或操作数的大小。 </span><br><span class=\"line\">;           ⑵ 在向下扩展数据段的描述符中，D位决定段的上部边界。</span><br><span class=\"line\">;\t\t① D=1表示段的上部界限为4G；</span><br><span class=\"line\">;\t\t② D=0表示段的上部界限为64K，这是为了与80286兼容。 </span><br><span class=\"line\">;           ⑶ 在描述由SS寄存器寻址的段描述符中，D位决定隐式的堆栈访问指令(如PUSH和POP指令)使用何种堆栈指针寄存器。</span><br><span class=\"line\">;\t\t① D=1表示使用32位堆栈指针寄存器ESP；</span><br><span class=\"line\">;\t\t② D=0表示使用16位堆栈指针寄存器SP，这与80286兼容。 </span><br><span class=\"line\">;</span><br><span class=\"line\">; (7) AVL:  软件可利用位。80386对该位的使用未左规定，Intel公司也保证今后开发生产的处理器只要与80386兼容，就不会对该位的使用做任何定义或规定。 </span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;----------------------------------------------------------------------------</span><br><span class=\"line\">; 在下列类型值命名中：</span><br><span class=\"line\">;       DA_  : Descriptor Attribute</span><br><span class=\"line\">;       D    : 数据段</span><br><span class=\"line\">;       C    : 代码段</span><br><span class=\"line\">;       S    : 系统段</span><br><span class=\"line\">;       R    : 只读</span><br><span class=\"line\">;       RW   : 读写</span><br><span class=\"line\">;       A    : 已访问</span><br><span class=\"line\">;       其它 : 可按照字面意思理解</span><br><span class=\"line\">;----------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">; 描述符类型</span><br><span class=\"line\">DA_32\t\tEQU\t4000h\t; 32 位段</span><br><span class=\"line\"></span><br><span class=\"line\">DA_DPL0\t\tEQU\t  00h\t; DPL = 0</span><br><span class=\"line\">DA_DPL1\t\tEQU\t  20h\t; DPL = 1</span><br><span class=\"line\">DA_DPL2\t\tEQU\t  40h\t; DPL = 2</span><br><span class=\"line\">DA_DPL3\t\tEQU\t  60h\t; DPL = 3</span><br><span class=\"line\"></span><br><span class=\"line\">; 存储段描述符类型</span><br><span class=\"line\">DA_DR\t\tEQU\t90h\t; 存在的只读数据段类型值</span><br><span class=\"line\">DA_DRW\t\tEQU\t92h\t; 存在的可读写数据段属性值</span><br><span class=\"line\">DA_DRWA\t\tEQU\t93h\t; 存在的已访问可读写数据段类型值</span><br><span class=\"line\">DA_C\t\tEQU\t98h\t; 存在的只执行代码段属性值</span><br><span class=\"line\">DA_CR\t\tEQU\t9Ah\t; 存在的可执行可读代码段属性值</span><br><span class=\"line\">DA_CCO\t\tEQU\t9Ch\t; 存在的只执行一致代码段属性值</span><br><span class=\"line\">DA_CCOR\t\tEQU\t9Eh\t; 存在的可执行可读一致代码段属性值</span><br><span class=\"line\"></span><br><span class=\"line\">; 系统段描述符类型</span><br><span class=\"line\">DA_LDT\t\tEQU\t  82h\t; 局部描述符表段类型值</span><br><span class=\"line\">DA_TaskGate\tEQU\t  85h\t; 任务门类型值</span><br><span class=\"line\">DA_386TSS\tEQU\t  89h\t; 可用 386 任务状态段类型值</span><br><span class=\"line\">DA_386CGate\tEQU\t  8Ch\t; 386 调用门类型值</span><br><span class=\"line\">DA_386IGate\tEQU\t  8Eh\t; 386 中断门类型值</span><br><span class=\"line\">DA_386TGate\tEQU\t  8Fh\t; 386 陷阱门类型值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; 选择子图示:</span><br><span class=\"line\">;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓</span><br><span class=\"line\">;         ┃ 15 ┃ 14 ┃ 13 ┃ 12 ┃ 11 ┃ 10 ┃ 9  ┃ 8  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃</span><br><span class=\"line\">;         ┣━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━╋━━╋━━┻━━┫</span><br><span class=\"line\">;         ┃                                 描述符索引                                 ┃ TI ┃   RPL    ┃</span><br><span class=\"line\">;         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━┻━━━━━┛</span><br><span class=\"line\">;</span><br><span class=\"line\">; RPL(Requested Privilege Level): 请求特权级，用于特权检查。</span><br><span class=\"line\">;</span><br><span class=\"line\">; TI(Table Indicator): 引用描述符表指示位</span><br><span class=\"line\">;\tTI=0 指示从全局描述符表GDT中读取描述符；</span><br><span class=\"line\">;\tTI=1 指示从局部描述符表LDT中读取描述符。</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\">;----------------------------------------------------------------------------</span><br><span class=\"line\">; 选择子类型值说明</span><br><span class=\"line\">; 其中:</span><br><span class=\"line\">;       SA_  : Selector Attribute</span><br><span class=\"line\"></span><br><span class=\"line\">SA_RPL0\t\tEQU\t0\t; ┓</span><br><span class=\"line\">SA_RPL1\t\tEQU\t1\t; ┣ RPL</span><br><span class=\"line\">SA_RPL2\t\tEQU\t2\t; ┃</span><br><span class=\"line\">SA_RPL3\t\tEQU\t3\t; ┛</span><br><span class=\"line\"></span><br><span class=\"line\">SA_TIG\t\tEQU\t0\t; ┓TI</span><br><span class=\"line\">SA_TIL\t\tEQU\t4\t; ┛</span><br><span class=\"line\">;----------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; 宏 ------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">;</span><br><span class=\"line\">; 描述符</span><br><span class=\"line\">; usage: Descriptor Base, Limit, Attr</span><br><span class=\"line\">;        Base:  dd</span><br><span class=\"line\">;        Limit: dd (low 20 bits available)</span><br><span class=\"line\">;        Attr:  dw (lower 4 bits of higher byte are always 0)</span><br><span class=\"line\">%macro Descriptor 3</span><br><span class=\"line\">\tdw\t%2 &amp; 0FFFFh\t\t\t\t; 段界限1</span><br><span class=\"line\">\tdw\t%1 &amp; 0FFFFh\t\t\t\t; 段基址1</span><br><span class=\"line\">\tdb\t(%1 &gt;&gt; 16) &amp; 0FFh\t\t\t; 段基址2</span><br><span class=\"line\">\tdw\t((%2 &gt;&gt; 8) &amp; 0F00h) | (%3 &amp; 0F0FFh)\t; 属性1 + 段界限2 + 属性2</span><br><span class=\"line\">\tdb\t(%1 &gt;&gt; 24) &amp; 0FFh\t\t\t; 段基址3</span><br><span class=\"line\">%endmacro ; 共 8 字节</span><br><span class=\"line\">;</span><br><span class=\"line\">; 门</span><br><span class=\"line\">; usage: Gate Selector, Offset, DCount, Attr</span><br><span class=\"line\">;        Selector:  dw</span><br><span class=\"line\">;        Offset:    dd</span><br><span class=\"line\">;        DCount:    db</span><br><span class=\"line\">;        Attr:      db</span><br><span class=\"line\">%macro Gate 4</span><br><span class=\"line\">\tdw\t(%2 &amp; 0FFFFh)\t\t\t\t; 偏移1</span><br><span class=\"line\">\tdw\t%1\t\t\t\t\t; 选择子</span><br><span class=\"line\">\tdw\t(%3 &amp; 1Fh) | ((%4 &lt;&lt; 8) &amp; 0FF00h)\t; 属性</span><br><span class=\"line\">\tdw\t((%2 &gt;&gt; 16) &amp; 0FFFFh)\t\t\t; 偏移2</span><br><span class=\"line\">%endmacro ; 共 8 字节</span><br><span class=\"line\">; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br></pre></td></tr></table></figure>\n\n<p>将第二章的a.img和bochsrc复制过来，并执行下面命令生成软盘映像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=pmtest1.bin of=a.img bs=512 count=1 conv=notrunc  </span><br></pre></td></tr></table></figure>\n\n<p>运行Bochs,可以看到， 在屏幕中部右侧， 出现了一个红色的字母“ P” ， 然后再也不动了。  </p>\n<p>第二部分</p>\n<p>在chapter3下新建b文件夹，复制a文件夹中的bochsrc，pm.inc，pmtest1.asm</p>\n<ol>\n<li>到Bochs官方网站下载一个FreeDos。 解压后将其中的a.img复制到我们的工作目录中， 并改名为freedos.img。</li>\n<li>用bximage生成一个软盘映像， 起名为pm.img。</li>\n<li>修改我们的bochsrc， 确保其中有以下三行：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">floppya: 1_44=freedos.img, status=inserted</span><br><span class=\"line\">floppyb: 1_44=pm.img, status=inserted</span><br><span class=\"line\">boot: a </span><br></pre></td></tr></table></figure>\n<p>4.启动Bochs， 待FreeDos启动完毕后用下面命令格式化B:盘   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">format b:</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>将代码3.1的第8行中的07c00h改为0100h， 并重新编译：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nasm pmtest1.asm -o pmtest1.com</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>将pmtest1.com复制到虚拟软盘pm.img上：<br>注意按照书中命令，进行虚拟软盘的挂载时</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mount -o loop pm.img /mnt/floppy</span><br></pre></td></tr></table></figure>\n<p>会出现了错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount point /mnt/floppy does not exist</span><br></pre></td></tr></table></figure>\n<p>解决办法：<br>先用mkdir指令在mnt目录下生成一个floppy 然后执行下面命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> losetup /dev/loop0 pm.img</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> mount /dev/loop0 /mnt/floppy</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> pmtest1.com /mnt/floppy</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> umount /mnt/floppy</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>到FreeDos中执行如下命令：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dir b:</span><br><span class=\"line\">b:pmtest1.com</span><br></pre></td></tr></table></figure>\n\n<p>这样pmtest1.com就运行起来了, 一个红色的字母“ P” 出现了。</p>\n<p>第三部分<br>在b文件夹下，新建pmtest2.asm，并把下面内容写到文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">; ==========================================</span><br><span class=\"line\">; pmtest2.asm</span><br><span class=\"line\">; 编译方法：nasm pmtest2.asm -o pmtest2.com</span><br><span class=\"line\">; ==========================================</span><br><span class=\"line\"></span><br><span class=\"line\">%include\t&quot;pm.inc&quot;\t; 常量, 宏, 以及一些说明</span><br><span class=\"line\"></span><br><span class=\"line\">org\t0100h</span><br><span class=\"line\">\tjmp\tLABEL_BEGIN</span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .gdt]</span><br><span class=\"line\">; GDT</span><br><span class=\"line\">;                            段基址,        段界限 , 属性</span><br><span class=\"line\">LABEL_GDT:         Descriptor    0,              0, 0         ; 空描述符</span><br><span class=\"line\">LABEL_DESC_NORMAL: Descriptor    0,         0ffffh, DA_DRW    ; Normal 描述符</span><br><span class=\"line\">LABEL_DESC_CODE32: Descriptor    0, SegCode32Len-1, DA_C+DA_32; 非一致代码段, 32</span><br><span class=\"line\">LABEL_DESC_CODE16: Descriptor    0,         0ffffh, DA_C      ; 非一致代码段, 16</span><br><span class=\"line\">LABEL_DESC_DATA:   Descriptor    0,      DataLen-1, DA_DRW    ; Data</span><br><span class=\"line\">LABEL_DESC_STACK:  Descriptor    0,     TopOfStack, DA_DRWA+DA_32; Stack, 32 位</span><br><span class=\"line\">LABEL_DESC_TEST:   Descriptor 0500000h,     0ffffh, DA_DRW</span><br><span class=\"line\">LABEL_DESC_VIDEO:  Descriptor  0B8000h,     0ffffh, DA_DRW    ; 显存首地址</span><br><span class=\"line\">; GDT 结束</span><br><span class=\"line\"></span><br><span class=\"line\">GdtLen\t\tequ\t$ - LABEL_GDT\t; GDT长度</span><br><span class=\"line\">GdtPtr\t\tdw\tGdtLen - 1\t; GDT界限</span><br><span class=\"line\">\t\tdd\t0\t\t; GDT基地址</span><br><span class=\"line\"></span><br><span class=\"line\">; GDT 选择子</span><br><span class=\"line\">SelectorNormal\t\tequ\tLABEL_DESC_NORMAL\t- LABEL_GDT</span><br><span class=\"line\">SelectorCode32\t\tequ\tLABEL_DESC_CODE32\t- LABEL_GDT</span><br><span class=\"line\">SelectorCode16\t\tequ\tLABEL_DESC_CODE16\t- LABEL_GDT</span><br><span class=\"line\">SelectorData\t\tequ\tLABEL_DESC_DATA\t\t- LABEL_GDT</span><br><span class=\"line\">SelectorStack\t\tequ\tLABEL_DESC_STACK\t- LABEL_GDT</span><br><span class=\"line\">SelectorTest\t\tequ\tLABEL_DESC_TEST\t\t- LABEL_GDT</span><br><span class=\"line\">SelectorVideo\t\tequ\tLABEL_DESC_VIDEO\t- LABEL_GDT</span><br><span class=\"line\">; END of [SECTION .gdt]</span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .data1]\t ; 数据段</span><br><span class=\"line\">ALIGN\t32</span><br><span class=\"line\">[BITS\t32]</span><br><span class=\"line\">LABEL_DATA:</span><br><span class=\"line\">SPValueInRealMode\tdw\t0</span><br><span class=\"line\">; 字符串</span><br><span class=\"line\">PMMessage:\t\tdb\t&quot;In Protect Mode now. ^-^&quot;, 0\t; 在保护模式中显示</span><br><span class=\"line\">OffsetPMMessage\t\tequ\tPMMessage - $$</span><br><span class=\"line\">StrTest:\t\tdb\t&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, 0</span><br><span class=\"line\">OffsetStrTest\t\tequ\tStrTest - $$</span><br><span class=\"line\">DataLen\t\t\tequ\t$ - LABEL_DATA</span><br><span class=\"line\">; END of [SECTION .data1]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; 全局堆栈段</span><br><span class=\"line\">[SECTION .gs]</span><br><span class=\"line\">ALIGN\t32</span><br><span class=\"line\">[BITS\t32]</span><br><span class=\"line\">LABEL_STACK:</span><br><span class=\"line\">\ttimes 512 db 0</span><br><span class=\"line\"></span><br><span class=\"line\">TopOfStack\tequ\t$ - LABEL_STACK - 1</span><br><span class=\"line\"></span><br><span class=\"line\">; END of [SECTION .gs]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .s16]</span><br><span class=\"line\">[BITS\t16]</span><br><span class=\"line\">LABEL_BEGIN:</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tmov\tds, ax</span><br><span class=\"line\">\tmov\tes, ax</span><br><span class=\"line\">\tmov\tss, ax</span><br><span class=\"line\">\tmov\tsp, 0100h</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\t[LABEL_GO_BACK_TO_REAL+3], ax</span><br><span class=\"line\">\tmov\t[SPValueInRealMode], sp</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 初始化 16 位代码段描述符</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tmovzx\teax, ax</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_SEG_CODE16</span><br><span class=\"line\">\tmov\tword [LABEL_DESC_CODE16 + 2], ax</span><br><span class=\"line\">\tshr\teax, 16</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE16 + 4], al</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE16 + 7], ah</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 初始化 32 位代码段描述符</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_SEG_CODE32</span><br><span class=\"line\">\tmov\tword [LABEL_DESC_CODE32 + 2], ax</span><br><span class=\"line\">\tshr\teax, 16</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE32 + 4], al</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE32 + 7], ah</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 初始化数据段描述符</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, ds</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_DATA</span><br><span class=\"line\">\tmov\tword [LABEL_DESC_DATA + 2], ax</span><br><span class=\"line\">\tshr\teax, 16</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_DATA + 4], al</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_DATA + 7], ah</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 初始化堆栈段描述符</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, ds</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_STACK</span><br><span class=\"line\">\tmov\tword [LABEL_DESC_STACK + 2], ax</span><br><span class=\"line\">\tshr\teax, 16</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_STACK + 4], al</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_STACK + 7], ah</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 为加载 GDTR 作准备</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, ds</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_GDT\t\t; eax &lt;- gdt 基地址</span><br><span class=\"line\">\tmov\tdword [GdtPtr + 2], eax\t; [GdtPtr + 2] &lt;- gdt 基地址</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 加载 GDTR</span><br><span class=\"line\">\tlgdt\t[GdtPtr]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 关中断</span><br><span class=\"line\">\tcli</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 打开地址线A20</span><br><span class=\"line\">\tin\tal, 92h</span><br><span class=\"line\">\tor\tal, 00000010b</span><br><span class=\"line\">\tout\t92h, al</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 准备切换到保护模式</span><br><span class=\"line\">\tmov\teax, cr0</span><br><span class=\"line\">\tor\teax, 1</span><br><span class=\"line\">\tmov\tcr0, eax</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 真正进入保护模式</span><br><span class=\"line\">\tjmp\tdword SelectorCode32:0\t; 执行这一句会把 SelectorCode32 装入 cs, 并跳转到 Code32Selector:0  处</span><br><span class=\"line\"></span><br><span class=\"line\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL_REAL_ENTRY:\t\t; 从保护模式跳回到实模式就到了这里</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tmov\tds, ax</span><br><span class=\"line\">\tmov\tes, ax</span><br><span class=\"line\">\tmov\tss, ax</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\tsp, [SPValueInRealMode]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tin\tal, 92h\t\t; `.</span><br><span class=\"line\">\tand\tal, 11111101b\t;  | 关闭 A20 地址线</span><br><span class=\"line\">\tout\t92h, al\t\t; /</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsti\t\t\t; 开中断</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmov\tax, 4c00h\t; `.</span><br><span class=\"line\">\tint\t21h\t\t; /  回到 DOS</span><br><span class=\"line\"></span><br><span class=\"line\">; END of [SECTION .s16]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .s32]; 32 位代码段. 由实模式跳入.</span><br><span class=\"line\">[BITS\t32]</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL_SEG_CODE32:</span><br><span class=\"line\">\tmov\tax, SelectorData</span><br><span class=\"line\">\tmov\tds, ax\t\t\t; 数据段选择子</span><br><span class=\"line\">\tmov\tax, SelectorTest</span><br><span class=\"line\">\tmov\tes, ax\t\t\t; 测试段选择子</span><br><span class=\"line\">\tmov\tax, SelectorVideo</span><br><span class=\"line\">\tmov\tgs, ax\t\t\t; 视频段选择子</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\tax, SelectorStack</span><br><span class=\"line\">\tmov\tss, ax\t\t\t; 堆栈段选择子</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmov\tesp, TopOfStack</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t; 下面显示一个字符串</span><br><span class=\"line\">\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字</span><br><span class=\"line\">\txor\tesi, esi</span><br><span class=\"line\">\txor\tedi, edi</span><br><span class=\"line\">\tmov\tesi, OffsetPMMessage\t; 源数据偏移</span><br><span class=\"line\">\tmov\tedi, (80 * 10 + 0) * 2\t; 目的数据偏移。屏幕第 10 行, 第 0 列。</span><br><span class=\"line\">\tcld</span><br><span class=\"line\"></span><br><span class=\"line\">.1:</span><br><span class=\"line\">\tlodsb</span><br><span class=\"line\">\ttest\tal, al</span><br><span class=\"line\">\tjz\t.2</span><br><span class=\"line\">\tmov\t[gs:edi], ax</span><br><span class=\"line\">\tadd\tedi, 2</span><br><span class=\"line\">\tjmp\t.1</span><br><span class=\"line\">.2:\t; 显示完毕</span><br><span class=\"line\"></span><br><span class=\"line\">\tcall\tDispReturn</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcall\tTestRead</span><br><span class=\"line\">\tcall\tTestWrite</span><br><span class=\"line\">\tcall\tTestRead</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 到此停止</span><br><span class=\"line\">\tjmp\tSelectorCode16:0</span><br><span class=\"line\"></span><br><span class=\"line\">; ------------------------------------------------------------------------</span><br><span class=\"line\">TestRead:</span><br><span class=\"line\">\txor\tesi, esi</span><br><span class=\"line\">\tmov\tecx, 8</span><br><span class=\"line\">.loop:</span><br><span class=\"line\">\tmov\tal, [es:esi]</span><br><span class=\"line\">\tcall\tDispAL</span><br><span class=\"line\">\tinc\tesi</span><br><span class=\"line\">\tloop\t.loop</span><br><span class=\"line\"></span><br><span class=\"line\">\tcall\tDispReturn</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tret</span><br><span class=\"line\"></span><br><span class=\"line\">; TestRead 结束-----------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; ------------------------------------------------------------------------</span><br><span class=\"line\">TestWrite:</span><br><span class=\"line\">\tpush\tesi</span><br><span class=\"line\">\tpush\tedi</span><br><span class=\"line\">\txor\tesi, esi</span><br><span class=\"line\">\txor\tedi, edi</span><br><span class=\"line\">\tmov\tesi, OffsetStrTest\t; 源数据偏移</span><br><span class=\"line\">\tcld</span><br><span class=\"line\">.1:</span><br><span class=\"line\">\tlodsb</span><br><span class=\"line\">\ttest\tal, al</span><br><span class=\"line\">\tjz\t.2</span><br><span class=\"line\">\tmov\t[es:edi], al</span><br><span class=\"line\">\tinc\tedi</span><br><span class=\"line\">\tjmp\t.1</span><br><span class=\"line\">.2:</span><br><span class=\"line\"></span><br><span class=\"line\">\tpop\tedi</span><br><span class=\"line\">\tpop\tesi</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tret</span><br><span class=\"line\"></span><br><span class=\"line\">; TestWrite 结束----------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; ------------------------------------------------------------------------</span><br><span class=\"line\">; 显示 AL 中的数字</span><br><span class=\"line\">; 默认地:</span><br><span class=\"line\">;\t数字已经存在 AL 中</span><br><span class=\"line\">;\tedi 始终指向要显示的下一个字符的位置</span><br><span class=\"line\">; 被改变的寄存器:</span><br><span class=\"line\">;\tax, edi</span><br><span class=\"line\">; ------------------------------------------------------------------------</span><br><span class=\"line\">DispAL:</span><br><span class=\"line\">\tpush\tecx</span><br><span class=\"line\">\tpush\tedx</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字</span><br><span class=\"line\">\tmov\tdl, al</span><br><span class=\"line\">\tshr\tal, 4</span><br><span class=\"line\">\tmov\tecx, 2</span><br><span class=\"line\"></span><br><span class=\"line\">.begin:</span><br><span class=\"line\">\tand\tal, 01111b</span><br><span class=\"line\">\tcmp\tal, 9</span><br><span class=\"line\">\tja\t.1</span><br><span class=\"line\">\tadd\tal, &#x27;0&#x27;</span><br><span class=\"line\">\tjmp\t.2</span><br><span class=\"line\">.1:</span><br><span class=\"line\">\tsub\tal, 0Ah</span><br><span class=\"line\">\tadd\tal, &#x27;A&#x27;</span><br><span class=\"line\">.2:</span><br><span class=\"line\">\tmov\t[gs:edi], ax</span><br><span class=\"line\">\tadd\tedi, 2</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\tal, dl</span><br><span class=\"line\">\tloop\t.begin</span><br><span class=\"line\">\tadd\tedi, 2</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpop\tedx</span><br><span class=\"line\">\tpop\tecx</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tret</span><br><span class=\"line\"></span><br><span class=\"line\">; DispAL 结束-------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; ------------------------------------------------------------------------</span><br><span class=\"line\">DispReturn:</span><br><span class=\"line\">\tpush\teax</span><br><span class=\"line\">\tpush\tebx</span><br><span class=\"line\">\tmov\teax, edi</span><br><span class=\"line\">\tmov\tbl, 160</span><br><span class=\"line\">\tdiv\tbl</span><br><span class=\"line\">\tand\teax, 0FFh</span><br><span class=\"line\">\tinc\teax</span><br><span class=\"line\">\tmov\tbl, 160</span><br><span class=\"line\">\tmul\tbl</span><br><span class=\"line\">\tmov\tedi, eax</span><br><span class=\"line\">\tpop\tebx</span><br><span class=\"line\">\tpop\teax</span><br><span class=\"line\"></span><br><span class=\"line\">\tret</span><br><span class=\"line\"></span><br><span class=\"line\">; DispReturn 结束---------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">SegCode32Len\tequ\t$ - LABEL_SEG_CODE32</span><br><span class=\"line\">; END of [SECTION .s32]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; 16 位代码段. 由 32 位代码段跳入, 跳出后到实模式</span><br><span class=\"line\">[SECTION .s16code]</span><br><span class=\"line\">ALIGN\t32</span><br><span class=\"line\">[BITS\t16]</span><br><span class=\"line\">LABEL_SEG_CODE16:</span><br><span class=\"line\">\t; 跳回实模式:</span><br><span class=\"line\">\tmov\tax, SelectorNormal</span><br><span class=\"line\">\tmov\tds, ax</span><br><span class=\"line\">\tmov\tes, ax</span><br><span class=\"line\">\tmov\tfs, ax</span><br><span class=\"line\">\tmov\tgs, ax</span><br><span class=\"line\">\tmov\tss, ax</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\teax, cr0</span><br><span class=\"line\">\tand\tal, 11111110b</span><br><span class=\"line\">\tmov\tcr0, eax</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL_GO_BACK_TO_REAL:</span><br><span class=\"line\">\tjmp\t0:LABEL_REAL_ENTRY\t; 段地址会在程序开始处被设置成正确的值</span><br><span class=\"line\"></span><br><span class=\"line\">Code16Len\tequ\t$ - LABEL_SEG_CODE16</span><br><span class=\"line\"></span><br><span class=\"line\">; END of [SECTION .s16code]</span><br></pre></td></tr></table></figure>\n\n<p>编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nasm pmtest2.asm -o pmtest2.com</span><br></pre></td></tr></table></figure>\n\n<p>运行</p>\n<p>我们清晰地看到， 程序打印出两行数字， 第一行全部是零， 说明开始内存地址5MB处都是0， 而下一行已经变成了41 42 43…，说明写操作成功。 十六进制的41、 42、 43、 …、 48正是A、 B、 C、 …、 H。同时看到， 程序执行结束后不再像上一个程序那样进入死循环， 而是重新出现了DOS提示符。 这说明我们重新回到了实模式下的DOS。</p>\n","excerpt":"","more":"<p>在XOS下新建chapter3&#x2F;a文件夹，并把下面内容写到文件pmtest1.asm中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">; ==========================================</span><br><span class=\"line\">; pmtest1.asm</span><br><span class=\"line\">; 编译方法：nasm pmtest1.asm -o pmtest1.bin</span><br><span class=\"line\">; ==========================================</span><br><span class=\"line\"></span><br><span class=\"line\">%include\t&quot;pm.inc&quot;\t; 常量, 宏, 以及一些说明</span><br><span class=\"line\"></span><br><span class=\"line\">org\t07c00h</span><br><span class=\"line\">\tjmp\tLABEL_BEGIN</span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .gdt]</span><br><span class=\"line\">; GDT</span><br><span class=\"line\">;                              段基址,       段界限     , 属性</span><br><span class=\"line\">LABEL_GDT:\t   Descriptor       0,                0, 0           ; 空描述符</span><br><span class=\"line\">LABEL_DESC_CODE32: Descriptor       0, SegCode32Len - 1, DA_C + DA_32; 非一致代码段</span><br><span class=\"line\">LABEL_DESC_VIDEO:  Descriptor 0B8000h,           0ffffh, DA_DRW\t     ; 显存首地址</span><br><span class=\"line\">; GDT 结束</span><br><span class=\"line\"></span><br><span class=\"line\">GdtLen\t\tequ\t$ - LABEL_GDT\t; GDT长度</span><br><span class=\"line\">GdtPtr\t\tdw\tGdtLen - 1\t; GDT界限</span><br><span class=\"line\">\t\tdd\t0\t\t; GDT基地址</span><br><span class=\"line\"></span><br><span class=\"line\">; GDT 选择子</span><br><span class=\"line\">SelectorCode32\t\tequ\tLABEL_DESC_CODE32\t- LABEL_GDT</span><br><span class=\"line\">SelectorVideo\t\tequ\tLABEL_DESC_VIDEO\t- LABEL_GDT</span><br><span class=\"line\">; END of [SECTION .gdt]</span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .s16]</span><br><span class=\"line\">[BITS\t16]</span><br><span class=\"line\">LABEL_BEGIN:</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tmov\tds, ax</span><br><span class=\"line\">\tmov\tes, ax</span><br><span class=\"line\">\tmov\tss, ax</span><br><span class=\"line\">\tmov\tsp, 0100h</span><br><span class=\"line\"></span><br><span class=\"line\">\t; 初始化 32 位代码段描述符</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_SEG_CODE32</span><br><span class=\"line\">\tmov\tword [LABEL_DESC_CODE32 + 2], ax</span><br><span class=\"line\">\tshr\teax, 16</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE32 + 4], al</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE32 + 7], ah</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 为加载 GDTR 作准备</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, ds</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_GDT\t\t; eax &lt;- gdt 基地址</span><br><span class=\"line\">\tmov\tdword [GdtPtr + 2], eax\t; [GdtPtr + 2] &lt;- gdt 基地址</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 加载 GDTR</span><br><span class=\"line\">\tlgdt\t[GdtPtr]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 关中断</span><br><span class=\"line\">\tcli</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 打开地址线A20</span><br><span class=\"line\">\tin\tal, 92h</span><br><span class=\"line\">\tor\tal, 00000010b</span><br><span class=\"line\">\tout\t92h, al</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 准备切换到保护模式</span><br><span class=\"line\">\tmov\teax, cr0</span><br><span class=\"line\">\tor\teax, 1</span><br><span class=\"line\">\tmov\tcr0, eax</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 真正进入保护模式</span><br><span class=\"line\">\tjmp\tdword SelectorCode32:0\t; 执行这一句会把 SelectorCode32 装入 cs,</span><br><span class=\"line\">\t\t\t\t\t; 并跳转到 Code32Selector:0  处</span><br><span class=\"line\"></span><br><span class=\"line\">; END of [SECTION .s16]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .s32]; 32 位代码段. 由实模式跳入.</span><br><span class=\"line\">[BITS\t32]</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL_SEG_CODE32:</span><br><span class=\"line\">\tmov\tax, SelectorVideo</span><br><span class=\"line\">\tmov\tgs, ax\t\t\t; 视频段选择子(目的)</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\tedi, (80 * 11 + 79) * 2\t; 屏幕第 11 行, 第 79 列。</span><br><span class=\"line\">\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字</span><br><span class=\"line\">\tmov\tal, &#x27;P&#x27;</span><br><span class=\"line\">\tmov\t[gs:edi], ax</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 到此停止</span><br><span class=\"line\">\tjmp\t$</span><br><span class=\"line\"></span><br><span class=\"line\">SegCode32Len\tequ\t$ - LABEL_SEG_CODE32</span><br><span class=\"line\">; END of [SECTION .s32] </span><br></pre></td></tr></table></figure>\n\n<p>编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nasm pmtest1.asm -o pmtest1.bin</span><br></pre></td></tr></table></figure>\n\n<p>  pm.inc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">; 描述符图示</span><br><span class=\"line\"></span><br><span class=\"line\">; 图示一</span><br><span class=\"line\">;</span><br><span class=\"line\">;  ------ ┏━━┳━━┓高地址</span><br><span class=\"line\">;         ┃ 7  ┃ 段 ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;                  基</span><br><span class=\"line\">;  字节 7 ┆    ┆    ┆</span><br><span class=\"line\">;                  址</span><br><span class=\"line\">;         ┣━━┫ ② ┃</span><br><span class=\"line\">;         ┃ 0  ┃    ┃</span><br><span class=\"line\">;  ------ ┣━━╋━━┫</span><br><span class=\"line\">;         ┃ 7  ┃ G  ┃</span><br><span class=\"line\">;         ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 6  ┃ D  ┃</span><br><span class=\"line\">;         ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 5  ┃ 0  ┃</span><br><span class=\"line\">;         ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 4  ┃ AVL┃</span><br><span class=\"line\">;  字节 6 ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 3  ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ 段 ┃</span><br><span class=\"line\">;         ┃ 2  ┃ 界 ┃</span><br><span class=\"line\">;         ┣━━┫ 限 ┃</span><br><span class=\"line\">;         ┃ 1  ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ ② ┃</span><br><span class=\"line\">;         ┃ 0  ┃    ┃</span><br><span class=\"line\">;  ------ ┣━━╋━━┫</span><br><span class=\"line\">;         ┃ 7  ┃ P  ┃</span><br><span class=\"line\">;         ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 6  ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ DPL┃</span><br><span class=\"line\">;         ┃ 5  ┃    ┃</span><br><span class=\"line\">;         ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 4  ┃ S  ┃</span><br><span class=\"line\">;  字节 5 ┣━━╉──┨</span><br><span class=\"line\">;         ┃ 3  ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ T  ┃</span><br><span class=\"line\">;         ┃ 2  ┃ Y  ┃</span><br><span class=\"line\">;         ┣━━┫ P  ┃</span><br><span class=\"line\">;         ┃ 1  ┃ E  ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;         ┃ 0  ┃    ┃</span><br><span class=\"line\">;  ------ ┣━━╋━━┫</span><br><span class=\"line\">;         ┃ 23 ┃    ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;         ┃ 22 ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ 段 ┃</span><br><span class=\"line\">;</span><br><span class=\"line\">;   字节  ┆    ┆ 基 ┆</span><br><span class=\"line\">; 2, 3, 4</span><br><span class=\"line\">;         ┣━━┫ 址 ┃</span><br><span class=\"line\">;         ┃ 1  ┃ ① ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;         ┃ 0  ┃    ┃</span><br><span class=\"line\">;  ------ ┣━━╋━━┫</span><br><span class=\"line\">;         ┃ 15 ┃    ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;         ┃ 14 ┃    ┃</span><br><span class=\"line\">;         ┣━━┫ 段 ┃</span><br><span class=\"line\">;</span><br><span class=\"line\">; 字节 0,1┆    ┆ 界 ┆</span><br><span class=\"line\">;</span><br><span class=\"line\">;         ┣━━┫ 限 ┃</span><br><span class=\"line\">;         ┃ 1  ┃ ① ┃</span><br><span class=\"line\">;         ┣━━┫    ┃</span><br><span class=\"line\">;         ┃ 0  ┃    ┃</span><br><span class=\"line\">;  ------ ┗━━┻━━┛低地址</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; 图示二</span><br><span class=\"line\"></span><br><span class=\"line\">; 高地址………………………………………………………………………低地址</span><br><span class=\"line\"></span><br><span class=\"line\">; |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0    |</span><br><span class=\"line\">; |7654321076543210765432107654321076543210765432107654321076543210|\t&lt;- 共 8 字节</span><br><span class=\"line\">; |--------========--------========--------========--------========|</span><br><span class=\"line\">; ┏━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓</span><br><span class=\"line\">; ┃31..24┃   (见下图)   ┃     段基址(23..0)    ┃ 段界限(15..0)┃</span><br><span class=\"line\">; ┃      ┃              ┃                      ┃              ┃</span><br><span class=\"line\">; ┃ 基址2┃③│②│    ①┃基址1b│   基址1a     ┃    段界限1   ┃</span><br><span class=\"line\">; ┣━━━╋━━━┳━━━╋━━━━━━━━━━━╋━━━━━━━┫</span><br><span class=\"line\">; ┃   %6 ┃  %5  ┃  %4  ┃  %3  ┃     %2       ┃       %1     ┃</span><br><span class=\"line\">; ┗━━━┻━━━┻━━━┻━━━┻━━━━━━━┻━━━━━━━┛</span><br><span class=\"line\">;         │                \\_________</span><br><span class=\"line\">;         │                          \\__________________</span><br><span class=\"line\">;         │                                             \\________________________________________________</span><br><span class=\"line\">;         │                                                                                              \\</span><br><span class=\"line\">;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓</span><br><span class=\"line\">;         ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃</span><br><span class=\"line\">;         ┣━━╋━━╋━━╋━━╋━━┻━━┻━━┻━━╋━━╋━━┻━━╋━━╋━━┻━━┻━━┻━━┫</span><br><span class=\"line\">;         ┃ G  ┃ D  ┃ 0  ┃ AVL┃   段界限 2 (19..16)  ┃  P ┃   DPL    ┃ S  ┃       TYPE           ┃</span><br><span class=\"line\">;         ┣━━┻━━┻━━┻━━╋━━━━━━━━━━━╋━━┻━━━━━┻━━┻━━━━━━━━━━━┫</span><br><span class=\"line\">;         ┃      ③: 属性 2      ┃    ②: 段界限 2      ┃                   ①: 属性1                  ┃</span><br><span class=\"line\">;         ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━┛</span><br><span class=\"line\">;       高地址                                                                                          低地址</span><br><span class=\"line\">;</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\">; 说明:</span><br><span class=\"line\">;</span><br><span class=\"line\">; (1) P:    存在(Present)位。</span><br><span class=\"line\">;\t\tP=1 表示描述符对地址转换是有效的，或者说该描述符所描述的段存在，即在内存中；</span><br><span class=\"line\">;\t\tP=0 表示描述符对地址转换无效，即该段不存在。使用该描述符进行内存访问时会引起异常。</span><br><span class=\"line\">;</span><br><span class=\"line\">; (2) DPL:  表示描述符特权级(Descriptor Privilege level)，共2位。它规定了所描述段的特权级，用于特权检查，以决定对该段能否访问。 </span><br><span class=\"line\">;</span><br><span class=\"line\">; (3) S:   说明描述符的类型。</span><br><span class=\"line\">;\t\t对于存储段描述符而言，S=1，以区别与系统段描述符和门描述符(S=0)。 </span><br><span class=\"line\">;</span><br><span class=\"line\">; (4) TYPE: 说明存储段描述符所描述的存储段的具体属性。</span><br><span class=\"line\">;</span><br><span class=\"line\">;\t\t </span><br><span class=\"line\">;\t数据段类型\t类型值\t\t说明</span><br><span class=\"line\">;\t\t\t----------------------------------</span><br><span class=\"line\">;\t\t\t0\t\t只读 </span><br><span class=\"line\">;\t\t\t1\t\t只读、已访问 </span><br><span class=\"line\">;\t\t\t2\t\t读/写 </span><br><span class=\"line\">;\t\t\t3\t\t读/写、已访问 </span><br><span class=\"line\">;\t\t\t4\t\t只读、向下扩展 </span><br><span class=\"line\">;\t\t\t5\t\t只读、向下扩展、已访问 </span><br><span class=\"line\">;\t\t\t6\t\t读/写、向下扩展 </span><br><span class=\"line\">;\t\t\t7\t\t读/写、向下扩展、已访问 </span><br><span class=\"line\">;</span><br><span class=\"line\">;\t\t</span><br><span class=\"line\">;\t\t\t类型值\t\t说明</span><br><span class=\"line\">;\t代码段类型\t----------------------------------</span><br><span class=\"line\">;\t\t\t8\t\t只执行 </span><br><span class=\"line\">;\t\t\t9\t\t只执行、已访问 </span><br><span class=\"line\">;\t\t\tA\t\t执行/读 </span><br><span class=\"line\">;\t\t\tB\t\t执行/读、已访问 </span><br><span class=\"line\">;\t\t\tC\t\t只执行、一致码段 </span><br><span class=\"line\">;\t\t\tD\t\t只执行、一致码段、已访问 </span><br><span class=\"line\">;\t\t\tE\t\t执行/读、一致码段 </span><br><span class=\"line\">;\t\t\tF\t\t执行/读、一致码段、已访问 </span><br><span class=\"line\">;</span><br><span class=\"line\">;\t\t</span><br><span class=\"line\">;\t系统段类型\t类型编码\t说明</span><br><span class=\"line\">;\t\t\t----------------------------------</span><br><span class=\"line\">;\t\t\t0\t\t&lt;未定义&gt;</span><br><span class=\"line\">;\t\t\t1\t\t可用286TSS</span><br><span class=\"line\">;\t\t\t2\t\tLDT</span><br><span class=\"line\">;\t\t\t3\t\t忙的286TSS</span><br><span class=\"line\">;\t\t\t4\t\t286调用门</span><br><span class=\"line\">;\t\t\t5\t\t任务门</span><br><span class=\"line\">;\t\t\t6\t\t286中断门</span><br><span class=\"line\">;\t\t\t7\t\t286陷阱门</span><br><span class=\"line\">;\t\t\t8\t\t未定义</span><br><span class=\"line\">;\t\t\t9\t\t可用386TSS</span><br><span class=\"line\">;\t\t\tA\t\t&lt;未定义&gt;</span><br><span class=\"line\">;\t\t\tB\t\t忙的386TSS</span><br><span class=\"line\">;\t\t\tC\t\t386调用门</span><br><span class=\"line\">;\t\t\tD\t\t&lt;未定义&gt;</span><br><span class=\"line\">;\t\t\tE\t\t386中断门</span><br><span class=\"line\">;\t\t\tF\t\t386陷阱门</span><br><span class=\"line\">;</span><br><span class=\"line\">; (5) G:    段界限粒度(Granularity)位。</span><br><span class=\"line\">;\t\tG=0 表示界限粒度为字节；</span><br><span class=\"line\">;\t\tG=1 表示界限粒度为4K 字节。</span><br><span class=\"line\">;           注意，界限粒度只对段界限有效，对段基地址无效，段基地址总是以字节为单位。 </span><br><span class=\"line\">;</span><br><span class=\"line\">; (6) D:    D位是一个很特殊的位，在描述可执行段、向下扩展数据段或由SS寄存器寻址的段(通常是堆栈段)的三种描述符中的意义各不相同。 </span><br><span class=\"line\">;           ⑴ 在描述可执行段的描述符中，D位决定了指令使用的地址及操作数所默认的大小。</span><br><span class=\"line\">;\t\t① D=1表示默认情况下指令使用32位地址及32位或8位操作数，这样的代码段也称为32位代码段；</span><br><span class=\"line\">;\t\t② D=0 表示默认情况下，使用16位地址及16位或8位操作数，这样的代码段也称为16位代码段，它与80286兼容。可以使用地址大小前缀和操作数大小前缀分别改变默认的地址或操作数的大小。 </span><br><span class=\"line\">;           ⑵ 在向下扩展数据段的描述符中，D位决定段的上部边界。</span><br><span class=\"line\">;\t\t① D=1表示段的上部界限为4G；</span><br><span class=\"line\">;\t\t② D=0表示段的上部界限为64K，这是为了与80286兼容。 </span><br><span class=\"line\">;           ⑶ 在描述由SS寄存器寻址的段描述符中，D位决定隐式的堆栈访问指令(如PUSH和POP指令)使用何种堆栈指针寄存器。</span><br><span class=\"line\">;\t\t① D=1表示使用32位堆栈指针寄存器ESP；</span><br><span class=\"line\">;\t\t② D=0表示使用16位堆栈指针寄存器SP，这与80286兼容。 </span><br><span class=\"line\">;</span><br><span class=\"line\">; (7) AVL:  软件可利用位。80386对该位的使用未左规定，Intel公司也保证今后开发生产的处理器只要与80386兼容，就不会对该位的使用做任何定义或规定。 </span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;----------------------------------------------------------------------------</span><br><span class=\"line\">; 在下列类型值命名中：</span><br><span class=\"line\">;       DA_  : Descriptor Attribute</span><br><span class=\"line\">;       D    : 数据段</span><br><span class=\"line\">;       C    : 代码段</span><br><span class=\"line\">;       S    : 系统段</span><br><span class=\"line\">;       R    : 只读</span><br><span class=\"line\">;       RW   : 读写</span><br><span class=\"line\">;       A    : 已访问</span><br><span class=\"line\">;       其它 : 可按照字面意思理解</span><br><span class=\"line\">;----------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">; 描述符类型</span><br><span class=\"line\">DA_32\t\tEQU\t4000h\t; 32 位段</span><br><span class=\"line\"></span><br><span class=\"line\">DA_DPL0\t\tEQU\t  00h\t; DPL = 0</span><br><span class=\"line\">DA_DPL1\t\tEQU\t  20h\t; DPL = 1</span><br><span class=\"line\">DA_DPL2\t\tEQU\t  40h\t; DPL = 2</span><br><span class=\"line\">DA_DPL3\t\tEQU\t  60h\t; DPL = 3</span><br><span class=\"line\"></span><br><span class=\"line\">; 存储段描述符类型</span><br><span class=\"line\">DA_DR\t\tEQU\t90h\t; 存在的只读数据段类型值</span><br><span class=\"line\">DA_DRW\t\tEQU\t92h\t; 存在的可读写数据段属性值</span><br><span class=\"line\">DA_DRWA\t\tEQU\t93h\t; 存在的已访问可读写数据段类型值</span><br><span class=\"line\">DA_C\t\tEQU\t98h\t; 存在的只执行代码段属性值</span><br><span class=\"line\">DA_CR\t\tEQU\t9Ah\t; 存在的可执行可读代码段属性值</span><br><span class=\"line\">DA_CCO\t\tEQU\t9Ch\t; 存在的只执行一致代码段属性值</span><br><span class=\"line\">DA_CCOR\t\tEQU\t9Eh\t; 存在的可执行可读一致代码段属性值</span><br><span class=\"line\"></span><br><span class=\"line\">; 系统段描述符类型</span><br><span class=\"line\">DA_LDT\t\tEQU\t  82h\t; 局部描述符表段类型值</span><br><span class=\"line\">DA_TaskGate\tEQU\t  85h\t; 任务门类型值</span><br><span class=\"line\">DA_386TSS\tEQU\t  89h\t; 可用 386 任务状态段类型值</span><br><span class=\"line\">DA_386CGate\tEQU\t  8Ch\t; 386 调用门类型值</span><br><span class=\"line\">DA_386IGate\tEQU\t  8Eh\t; 386 中断门类型值</span><br><span class=\"line\">DA_386TGate\tEQU\t  8Fh\t; 386 陷阱门类型值</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; 选择子图示:</span><br><span class=\"line\">;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓</span><br><span class=\"line\">;         ┃ 15 ┃ 14 ┃ 13 ┃ 12 ┃ 11 ┃ 10 ┃ 9  ┃ 8  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃</span><br><span class=\"line\">;         ┣━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━╋━━╋━━┻━━┫</span><br><span class=\"line\">;         ┃                                 描述符索引                                 ┃ TI ┃   RPL    ┃</span><br><span class=\"line\">;         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━┻━━━━━┛</span><br><span class=\"line\">;</span><br><span class=\"line\">; RPL(Requested Privilege Level): 请求特权级，用于特权检查。</span><br><span class=\"line\">;</span><br><span class=\"line\">; TI(Table Indicator): 引用描述符表指示位</span><br><span class=\"line\">;\tTI=0 指示从全局描述符表GDT中读取描述符；</span><br><span class=\"line\">;\tTI=1 指示从局部描述符表LDT中读取描述符。</span><br><span class=\"line\">;</span><br><span class=\"line\"></span><br><span class=\"line\">;----------------------------------------------------------------------------</span><br><span class=\"line\">; 选择子类型值说明</span><br><span class=\"line\">; 其中:</span><br><span class=\"line\">;       SA_  : Selector Attribute</span><br><span class=\"line\"></span><br><span class=\"line\">SA_RPL0\t\tEQU\t0\t; ┓</span><br><span class=\"line\">SA_RPL1\t\tEQU\t1\t; ┣ RPL</span><br><span class=\"line\">SA_RPL2\t\tEQU\t2\t; ┃</span><br><span class=\"line\">SA_RPL3\t\tEQU\t3\t; ┛</span><br><span class=\"line\"></span><br><span class=\"line\">SA_TIG\t\tEQU\t0\t; ┓TI</span><br><span class=\"line\">SA_TIL\t\tEQU\t4\t; ┛</span><br><span class=\"line\">;----------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; 宏 ------------------------------------------------------------------------------------------------------</span><br><span class=\"line\">;</span><br><span class=\"line\">; 描述符</span><br><span class=\"line\">; usage: Descriptor Base, Limit, Attr</span><br><span class=\"line\">;        Base:  dd</span><br><span class=\"line\">;        Limit: dd (low 20 bits available)</span><br><span class=\"line\">;        Attr:  dw (lower 4 bits of higher byte are always 0)</span><br><span class=\"line\">%macro Descriptor 3</span><br><span class=\"line\">\tdw\t%2 &amp; 0FFFFh\t\t\t\t; 段界限1</span><br><span class=\"line\">\tdw\t%1 &amp; 0FFFFh\t\t\t\t; 段基址1</span><br><span class=\"line\">\tdb\t(%1 &gt;&gt; 16) &amp; 0FFh\t\t\t; 段基址2</span><br><span class=\"line\">\tdw\t((%2 &gt;&gt; 8) &amp; 0F00h) | (%3 &amp; 0F0FFh)\t; 属性1 + 段界限2 + 属性2</span><br><span class=\"line\">\tdb\t(%1 &gt;&gt; 24) &amp; 0FFh\t\t\t; 段基址3</span><br><span class=\"line\">%endmacro ; 共 8 字节</span><br><span class=\"line\">;</span><br><span class=\"line\">; 门</span><br><span class=\"line\">; usage: Gate Selector, Offset, DCount, Attr</span><br><span class=\"line\">;        Selector:  dw</span><br><span class=\"line\">;        Offset:    dd</span><br><span class=\"line\">;        DCount:    db</span><br><span class=\"line\">;        Attr:      db</span><br><span class=\"line\">%macro Gate 4</span><br><span class=\"line\">\tdw\t(%2 &amp; 0FFFFh)\t\t\t\t; 偏移1</span><br><span class=\"line\">\tdw\t%1\t\t\t\t\t; 选择子</span><br><span class=\"line\">\tdw\t(%3 &amp; 1Fh) | ((%4 &lt;&lt; 8) &amp; 0FF00h)\t; 属性</span><br><span class=\"line\">\tdw\t((%2 &gt;&gt; 16) &amp; 0FFFFh)\t\t\t; 偏移2</span><br><span class=\"line\">%endmacro ; 共 8 字节</span><br><span class=\"line\">; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br></pre></td></tr></table></figure>\n\n<p>将第二章的a.img和bochsrc复制过来，并执行下面命令生成软盘映像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=pmtest1.bin of=a.img bs=512 count=1 conv=notrunc  </span><br></pre></td></tr></table></figure>\n\n<p>运行Bochs,可以看到， 在屏幕中部右侧， 出现了一个红色的字母“ P” ， 然后再也不动了。  </p>\n<p>第二部分</p>\n<p>在chapter3下新建b文件夹，复制a文件夹中的bochsrc，pm.inc，pmtest1.asm</p>\n<ol>\n<li>到Bochs官方网站下载一个FreeDos。 解压后将其中的a.img复制到我们的工作目录中， 并改名为freedos.img。</li>\n<li>用bximage生成一个软盘映像， 起名为pm.img。</li>\n<li>修改我们的bochsrc， 确保其中有以下三行：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">floppya: 1_44=freedos.img, status=inserted</span><br><span class=\"line\">floppyb: 1_44=pm.img, status=inserted</span><br><span class=\"line\">boot: a </span><br></pre></td></tr></table></figure>\n<p>4.启动Bochs， 待FreeDos启动完毕后用下面命令格式化B:盘   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">format b:</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>将代码3.1的第8行中的07c00h改为0100h， 并重新编译：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nasm pmtest1.asm -o pmtest1.com</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>将pmtest1.com复制到虚拟软盘pm.img上：<br>注意按照书中命令，进行虚拟软盘的挂载时</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> mount -o loop pm.img /mnt/floppy</span><br></pre></td></tr></table></figure>\n<p>会出现了错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mount point /mnt/floppy does not exist</span><br></pre></td></tr></table></figure>\n<p>解决办法：<br>先用mkdir指令在mnt目录下生成一个floppy 然后执行下面命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> losetup /dev/loop0 pm.img</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> mount /dev/loop0 /mnt/floppy</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> <span class=\"built_in\">cp</span> pmtest1.com /mnt/floppy</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> umount /mnt/floppy</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>到FreeDos中执行如下命令：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dir b:</span><br><span class=\"line\">b:pmtest1.com</span><br></pre></td></tr></table></figure>\n\n<p>这样pmtest1.com就运行起来了, 一个红色的字母“ P” 出现了。</p>\n<p>第三部分<br>在b文件夹下，新建pmtest2.asm，并把下面内容写到文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">; ==========================================</span><br><span class=\"line\">; pmtest2.asm</span><br><span class=\"line\">; 编译方法：nasm pmtest2.asm -o pmtest2.com</span><br><span class=\"line\">; ==========================================</span><br><span class=\"line\"></span><br><span class=\"line\">%include\t&quot;pm.inc&quot;\t; 常量, 宏, 以及一些说明</span><br><span class=\"line\"></span><br><span class=\"line\">org\t0100h</span><br><span class=\"line\">\tjmp\tLABEL_BEGIN</span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .gdt]</span><br><span class=\"line\">; GDT</span><br><span class=\"line\">;                            段基址,        段界限 , 属性</span><br><span class=\"line\">LABEL_GDT:         Descriptor    0,              0, 0         ; 空描述符</span><br><span class=\"line\">LABEL_DESC_NORMAL: Descriptor    0,         0ffffh, DA_DRW    ; Normal 描述符</span><br><span class=\"line\">LABEL_DESC_CODE32: Descriptor    0, SegCode32Len-1, DA_C+DA_32; 非一致代码段, 32</span><br><span class=\"line\">LABEL_DESC_CODE16: Descriptor    0,         0ffffh, DA_C      ; 非一致代码段, 16</span><br><span class=\"line\">LABEL_DESC_DATA:   Descriptor    0,      DataLen-1, DA_DRW    ; Data</span><br><span class=\"line\">LABEL_DESC_STACK:  Descriptor    0,     TopOfStack, DA_DRWA+DA_32; Stack, 32 位</span><br><span class=\"line\">LABEL_DESC_TEST:   Descriptor 0500000h,     0ffffh, DA_DRW</span><br><span class=\"line\">LABEL_DESC_VIDEO:  Descriptor  0B8000h,     0ffffh, DA_DRW    ; 显存首地址</span><br><span class=\"line\">; GDT 结束</span><br><span class=\"line\"></span><br><span class=\"line\">GdtLen\t\tequ\t$ - LABEL_GDT\t; GDT长度</span><br><span class=\"line\">GdtPtr\t\tdw\tGdtLen - 1\t; GDT界限</span><br><span class=\"line\">\t\tdd\t0\t\t; GDT基地址</span><br><span class=\"line\"></span><br><span class=\"line\">; GDT 选择子</span><br><span class=\"line\">SelectorNormal\t\tequ\tLABEL_DESC_NORMAL\t- LABEL_GDT</span><br><span class=\"line\">SelectorCode32\t\tequ\tLABEL_DESC_CODE32\t- LABEL_GDT</span><br><span class=\"line\">SelectorCode16\t\tequ\tLABEL_DESC_CODE16\t- LABEL_GDT</span><br><span class=\"line\">SelectorData\t\tequ\tLABEL_DESC_DATA\t\t- LABEL_GDT</span><br><span class=\"line\">SelectorStack\t\tequ\tLABEL_DESC_STACK\t- LABEL_GDT</span><br><span class=\"line\">SelectorTest\t\tequ\tLABEL_DESC_TEST\t\t- LABEL_GDT</span><br><span class=\"line\">SelectorVideo\t\tequ\tLABEL_DESC_VIDEO\t- LABEL_GDT</span><br><span class=\"line\">; END of [SECTION .gdt]</span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .data1]\t ; 数据段</span><br><span class=\"line\">ALIGN\t32</span><br><span class=\"line\">[BITS\t32]</span><br><span class=\"line\">LABEL_DATA:</span><br><span class=\"line\">SPValueInRealMode\tdw\t0</span><br><span class=\"line\">; 字符串</span><br><span class=\"line\">PMMessage:\t\tdb\t&quot;In Protect Mode now. ^-^&quot;, 0\t; 在保护模式中显示</span><br><span class=\"line\">OffsetPMMessage\t\tequ\tPMMessage - $$</span><br><span class=\"line\">StrTest:\t\tdb\t&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, 0</span><br><span class=\"line\">OffsetStrTest\t\tequ\tStrTest - $$</span><br><span class=\"line\">DataLen\t\t\tequ\t$ - LABEL_DATA</span><br><span class=\"line\">; END of [SECTION .data1]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; 全局堆栈段</span><br><span class=\"line\">[SECTION .gs]</span><br><span class=\"line\">ALIGN\t32</span><br><span class=\"line\">[BITS\t32]</span><br><span class=\"line\">LABEL_STACK:</span><br><span class=\"line\">\ttimes 512 db 0</span><br><span class=\"line\"></span><br><span class=\"line\">TopOfStack\tequ\t$ - LABEL_STACK - 1</span><br><span class=\"line\"></span><br><span class=\"line\">; END of [SECTION .gs]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .s16]</span><br><span class=\"line\">[BITS\t16]</span><br><span class=\"line\">LABEL_BEGIN:</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tmov\tds, ax</span><br><span class=\"line\">\tmov\tes, ax</span><br><span class=\"line\">\tmov\tss, ax</span><br><span class=\"line\">\tmov\tsp, 0100h</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\t[LABEL_GO_BACK_TO_REAL+3], ax</span><br><span class=\"line\">\tmov\t[SPValueInRealMode], sp</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 初始化 16 位代码段描述符</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tmovzx\teax, ax</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_SEG_CODE16</span><br><span class=\"line\">\tmov\tword [LABEL_DESC_CODE16 + 2], ax</span><br><span class=\"line\">\tshr\teax, 16</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE16 + 4], al</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE16 + 7], ah</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 初始化 32 位代码段描述符</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_SEG_CODE32</span><br><span class=\"line\">\tmov\tword [LABEL_DESC_CODE32 + 2], ax</span><br><span class=\"line\">\tshr\teax, 16</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE32 + 4], al</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_CODE32 + 7], ah</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 初始化数据段描述符</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, ds</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_DATA</span><br><span class=\"line\">\tmov\tword [LABEL_DESC_DATA + 2], ax</span><br><span class=\"line\">\tshr\teax, 16</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_DATA + 4], al</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_DATA + 7], ah</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 初始化堆栈段描述符</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, ds</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_STACK</span><br><span class=\"line\">\tmov\tword [LABEL_DESC_STACK + 2], ax</span><br><span class=\"line\">\tshr\teax, 16</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_STACK + 4], al</span><br><span class=\"line\">\tmov\tbyte [LABEL_DESC_STACK + 7], ah</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 为加载 GDTR 作准备</span><br><span class=\"line\">\txor\teax, eax</span><br><span class=\"line\">\tmov\tax, ds</span><br><span class=\"line\">\tshl\teax, 4</span><br><span class=\"line\">\tadd\teax, LABEL_GDT\t\t; eax &lt;- gdt 基地址</span><br><span class=\"line\">\tmov\tdword [GdtPtr + 2], eax\t; [GdtPtr + 2] &lt;- gdt 基地址</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 加载 GDTR</span><br><span class=\"line\">\tlgdt\t[GdtPtr]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 关中断</span><br><span class=\"line\">\tcli</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 打开地址线A20</span><br><span class=\"line\">\tin\tal, 92h</span><br><span class=\"line\">\tor\tal, 00000010b</span><br><span class=\"line\">\tout\t92h, al</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 准备切换到保护模式</span><br><span class=\"line\">\tmov\teax, cr0</span><br><span class=\"line\">\tor\teax, 1</span><br><span class=\"line\">\tmov\tcr0, eax</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 真正进入保护模式</span><br><span class=\"line\">\tjmp\tdword SelectorCode32:0\t; 执行这一句会把 SelectorCode32 装入 cs, 并跳转到 Code32Selector:0  处</span><br><span class=\"line\"></span><br><span class=\"line\">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL_REAL_ENTRY:\t\t; 从保护模式跳回到实模式就到了这里</span><br><span class=\"line\">\tmov\tax, cs</span><br><span class=\"line\">\tmov\tds, ax</span><br><span class=\"line\">\tmov\tes, ax</span><br><span class=\"line\">\tmov\tss, ax</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\tsp, [SPValueInRealMode]</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tin\tal, 92h\t\t; `.</span><br><span class=\"line\">\tand\tal, 11111101b\t;  | 关闭 A20 地址线</span><br><span class=\"line\">\tout\t92h, al\t\t; /</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsti\t\t\t; 开中断</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmov\tax, 4c00h\t; `.</span><br><span class=\"line\">\tint\t21h\t\t; /  回到 DOS</span><br><span class=\"line\"></span><br><span class=\"line\">; END of [SECTION .s16]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[SECTION .s32]; 32 位代码段. 由实模式跳入.</span><br><span class=\"line\">[BITS\t32]</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL_SEG_CODE32:</span><br><span class=\"line\">\tmov\tax, SelectorData</span><br><span class=\"line\">\tmov\tds, ax\t\t\t; 数据段选择子</span><br><span class=\"line\">\tmov\tax, SelectorTest</span><br><span class=\"line\">\tmov\tes, ax\t\t\t; 测试段选择子</span><br><span class=\"line\">\tmov\tax, SelectorVideo</span><br><span class=\"line\">\tmov\tgs, ax\t\t\t; 视频段选择子</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\tax, SelectorStack</span><br><span class=\"line\">\tmov\tss, ax\t\t\t; 堆栈段选择子</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmov\tesp, TopOfStack</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t; 下面显示一个字符串</span><br><span class=\"line\">\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字</span><br><span class=\"line\">\txor\tesi, esi</span><br><span class=\"line\">\txor\tedi, edi</span><br><span class=\"line\">\tmov\tesi, OffsetPMMessage\t; 源数据偏移</span><br><span class=\"line\">\tmov\tedi, (80 * 10 + 0) * 2\t; 目的数据偏移。屏幕第 10 行, 第 0 列。</span><br><span class=\"line\">\tcld</span><br><span class=\"line\"></span><br><span class=\"line\">.1:</span><br><span class=\"line\">\tlodsb</span><br><span class=\"line\">\ttest\tal, al</span><br><span class=\"line\">\tjz\t.2</span><br><span class=\"line\">\tmov\t[gs:edi], ax</span><br><span class=\"line\">\tadd\tedi, 2</span><br><span class=\"line\">\tjmp\t.1</span><br><span class=\"line\">.2:\t; 显示完毕</span><br><span class=\"line\"></span><br><span class=\"line\">\tcall\tDispReturn</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcall\tTestRead</span><br><span class=\"line\">\tcall\tTestWrite</span><br><span class=\"line\">\tcall\tTestRead</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t; 到此停止</span><br><span class=\"line\">\tjmp\tSelectorCode16:0</span><br><span class=\"line\"></span><br><span class=\"line\">; ------------------------------------------------------------------------</span><br><span class=\"line\">TestRead:</span><br><span class=\"line\">\txor\tesi, esi</span><br><span class=\"line\">\tmov\tecx, 8</span><br><span class=\"line\">.loop:</span><br><span class=\"line\">\tmov\tal, [es:esi]</span><br><span class=\"line\">\tcall\tDispAL</span><br><span class=\"line\">\tinc\tesi</span><br><span class=\"line\">\tloop\t.loop</span><br><span class=\"line\"></span><br><span class=\"line\">\tcall\tDispReturn</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tret</span><br><span class=\"line\"></span><br><span class=\"line\">; TestRead 结束-----------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; ------------------------------------------------------------------------</span><br><span class=\"line\">TestWrite:</span><br><span class=\"line\">\tpush\tesi</span><br><span class=\"line\">\tpush\tedi</span><br><span class=\"line\">\txor\tesi, esi</span><br><span class=\"line\">\txor\tedi, edi</span><br><span class=\"line\">\tmov\tesi, OffsetStrTest\t; 源数据偏移</span><br><span class=\"line\">\tcld</span><br><span class=\"line\">.1:</span><br><span class=\"line\">\tlodsb</span><br><span class=\"line\">\ttest\tal, al</span><br><span class=\"line\">\tjz\t.2</span><br><span class=\"line\">\tmov\t[es:edi], al</span><br><span class=\"line\">\tinc\tedi</span><br><span class=\"line\">\tjmp\t.1</span><br><span class=\"line\">.2:</span><br><span class=\"line\"></span><br><span class=\"line\">\tpop\tedi</span><br><span class=\"line\">\tpop\tesi</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tret</span><br><span class=\"line\"></span><br><span class=\"line\">; TestWrite 结束----------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; ------------------------------------------------------------------------</span><br><span class=\"line\">; 显示 AL 中的数字</span><br><span class=\"line\">; 默认地:</span><br><span class=\"line\">;\t数字已经存在 AL 中</span><br><span class=\"line\">;\tedi 始终指向要显示的下一个字符的位置</span><br><span class=\"line\">; 被改变的寄存器:</span><br><span class=\"line\">;\tax, edi</span><br><span class=\"line\">; ------------------------------------------------------------------------</span><br><span class=\"line\">DispAL:</span><br><span class=\"line\">\tpush\tecx</span><br><span class=\"line\">\tpush\tedx</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\tah, 0Ch\t\t\t; 0000: 黑底    1100: 红字</span><br><span class=\"line\">\tmov\tdl, al</span><br><span class=\"line\">\tshr\tal, 4</span><br><span class=\"line\">\tmov\tecx, 2</span><br><span class=\"line\"></span><br><span class=\"line\">.begin:</span><br><span class=\"line\">\tand\tal, 01111b</span><br><span class=\"line\">\tcmp\tal, 9</span><br><span class=\"line\">\tja\t.1</span><br><span class=\"line\">\tadd\tal, &#x27;0&#x27;</span><br><span class=\"line\">\tjmp\t.2</span><br><span class=\"line\">.1:</span><br><span class=\"line\">\tsub\tal, 0Ah</span><br><span class=\"line\">\tadd\tal, &#x27;A&#x27;</span><br><span class=\"line\">.2:</span><br><span class=\"line\">\tmov\t[gs:edi], ax</span><br><span class=\"line\">\tadd\tedi, 2</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\tal, dl</span><br><span class=\"line\">\tloop\t.begin</span><br><span class=\"line\">\tadd\tedi, 2</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpop\tedx</span><br><span class=\"line\">\tpop\tecx</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tret</span><br><span class=\"line\"></span><br><span class=\"line\">; DispAL 结束-------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; ------------------------------------------------------------------------</span><br><span class=\"line\">DispReturn:</span><br><span class=\"line\">\tpush\teax</span><br><span class=\"line\">\tpush\tebx</span><br><span class=\"line\">\tmov\teax, edi</span><br><span class=\"line\">\tmov\tbl, 160</span><br><span class=\"line\">\tdiv\tbl</span><br><span class=\"line\">\tand\teax, 0FFh</span><br><span class=\"line\">\tinc\teax</span><br><span class=\"line\">\tmov\tbl, 160</span><br><span class=\"line\">\tmul\tbl</span><br><span class=\"line\">\tmov\tedi, eax</span><br><span class=\"line\">\tpop\tebx</span><br><span class=\"line\">\tpop\teax</span><br><span class=\"line\"></span><br><span class=\"line\">\tret</span><br><span class=\"line\"></span><br><span class=\"line\">; DispReturn 结束---------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">SegCode32Len\tequ\t$ - LABEL_SEG_CODE32</span><br><span class=\"line\">; END of [SECTION .s32]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">; 16 位代码段. 由 32 位代码段跳入, 跳出后到实模式</span><br><span class=\"line\">[SECTION .s16code]</span><br><span class=\"line\">ALIGN\t32</span><br><span class=\"line\">[BITS\t16]</span><br><span class=\"line\">LABEL_SEG_CODE16:</span><br><span class=\"line\">\t; 跳回实模式:</span><br><span class=\"line\">\tmov\tax, SelectorNormal</span><br><span class=\"line\">\tmov\tds, ax</span><br><span class=\"line\">\tmov\tes, ax</span><br><span class=\"line\">\tmov\tfs, ax</span><br><span class=\"line\">\tmov\tgs, ax</span><br><span class=\"line\">\tmov\tss, ax</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\teax, cr0</span><br><span class=\"line\">\tand\tal, 11111110b</span><br><span class=\"line\">\tmov\tcr0, eax</span><br><span class=\"line\"></span><br><span class=\"line\">LABEL_GO_BACK_TO_REAL:</span><br><span class=\"line\">\tjmp\t0:LABEL_REAL_ENTRY\t; 段地址会在程序开始处被设置成正确的值</span><br><span class=\"line\"></span><br><span class=\"line\">Code16Len\tequ\t$ - LABEL_SEG_CODE16</span><br><span class=\"line\"></span><br><span class=\"line\">; END of [SECTION .s16code]</span><br></pre></td></tr></table></figure>\n\n<p>编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nasm pmtest2.asm -o pmtest2.com</span><br></pre></td></tr></table></figure>\n\n<p>运行</p>\n<p>我们清晰地看到， 程序打印出两行数字， 第一行全部是零， 说明开始内存地址5MB处都是0， 而下一行已经变成了41 42 43…，说明写操作成功。 十六进制的41、 42、 43、 …、 48正是A、 B、 C、 …、 H。同时看到， 程序执行结束后不再像上一个程序那样进入死循环， 而是重新出现了DOS提示符。 这说明我们重新回到了实模式下的DOS。</p>\n"}],"PostAsset":[{"_id":"source/_posts/linux驱动 alsa模型/1_ALSA架构简介/alsa.png","slug":"alsa.png","post":"cm6xt9rbx001dr8tk3acxdpaz","modified":0,"renderable":0},{"_id":"source/_posts/动手写操作系统/2_搭建环境/Capture.png","slug":"Capture.png","post":"cm6xt9rby001lr8tk1aifccea","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cm6xt9rbp0009r8tkckum3hkv","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbs000hr8tk8ymieu07"},{"post_id":"cm6xt9rbj0001r8tk1h5g5qg0","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbt000mr8tk9uio0nth"},{"post_id":"cm6xt9rbq000br8tkddywhoyh","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbu000pr8tken74gc5f"},{"post_id":"cm6xt9rbr000fr8tkhwdshq9j","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbu000tr8tk5s297p53"},{"post_id":"cm6xt9rbl0003r8tk2e5c2q70","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbv000wr8tkgftub18f"},{"post_id":"cm6xt9rbs000gr8tk05uiaqh1","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbv0010r8tk5h5i35si"},{"post_id":"cm6xt9rbt000lr8tk454b2gjv","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbw0013r8tk6v6senfd"},{"post_id":"cm6xt9rbo0007r8tkh8yaeskj","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbw0017r8tk8jo90x0b"},{"post_id":"cm6xt9rbt000or8tkg367575o","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbw001ar8tk8cz65zce"},{"post_id":"cm6xt9rbu000sr8tk7esigtnr","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbx001er8tkh7xh7otg"},{"post_id":"cm6xt9rbu000vr8tkdqylbht7","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbx001hr8tk7nkccto6"},{"post_id":"cm6xt9rbv000zr8tk6kup8pvg","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rby001mr8tk91dcayhb"},{"post_id":"cm6xt9rbv0012r8tkes7j10zq","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rby001pr8tk56915deq"},{"post_id":"cm6xt9rbw0016r8tkdqn3gpbr","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbz001tr8tkffdt91z9"},{"post_id":"cm6xt9rbw0019r8tkdtr9ezdb","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbz001vr8tk6fca3alz"},{"post_id":"cm6xt9rbx001gr8tkhwma419j","category_id":"cm6xt9rbm0004r8tk7x7da9vj","_id":"cm6xt9rbz001yr8tkg63rcmgp"},{"post_id":"cm6xt9rbx001dr8tk3acxdpaz","category_id":"cm6xt9rbx001jr8tkfduqczu7","_id":"cm6xt9rc00021r8tk9a6ifdfw"},{"post_id":"cm6xt9rby001lr8tk1aifccea","category_id":"cm6xt9rby001sr8tk2h8bdnti","_id":"cm6xt9rc00024r8tk5sno6ufc"},{"post_id":"cm6xt9rby001or8tk2wfaagi0","category_id":"cm6xt9rby001sr8tk2h8bdnti","_id":"cm6xt9rc00028r8tk0wly4skj"}],"PostTag":[{"post_id":"cm6xt9rbr000fr8tkhwdshq9j","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rbt000kr8tk86mm098l"},{"post_id":"cm6xt9rbr000fr8tkhwdshq9j","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rbt000nr8tk1q6jh5y1"},{"post_id":"cm6xt9rbj0001r8tk1h5g5qg0","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rbu000rr8tk1vic7pga"},{"post_id":"cm6xt9rbj0001r8tk1h5g5qg0","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rbu000ur8tke9791cpz"},{"post_id":"cm6xt9rbs000gr8tk05uiaqh1","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rbv000yr8tk6gjh38c2"},{"post_id":"cm6xt9rbs000gr8tk05uiaqh1","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rbv0011r8tk07f90jqx"},{"post_id":"cm6xt9rbt000lr8tk454b2gjv","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rbw0015r8tkfw8peaku"},{"post_id":"cm6xt9rbt000lr8tk454b2gjv","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rbw0018r8tkgg7scq5b"},{"post_id":"cm6xt9rbt000or8tkg367575o","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rbx001cr8tk2ba6376g"},{"post_id":"cm6xt9rbt000or8tkg367575o","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rbx001fr8tk24q1f719"},{"post_id":"cm6xt9rbu000sr8tk7esigtnr","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rby001kr8tkf7i437hg"},{"post_id":"cm6xt9rbu000sr8tk7esigtnr","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rby001nr8tk7ct6dho9"},{"post_id":"cm6xt9rbl0003r8tk2e5c2q70","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rby001rr8tkcypj2pfq"},{"post_id":"cm6xt9rbl0003r8tk2e5c2q70","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rbz001ur8tk7nr6aoiw"},{"post_id":"cm6xt9rbu000vr8tkdqylbht7","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rbz001xr8tk9wuf4p6l"},{"post_id":"cm6xt9rbu000vr8tkdqylbht7","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rbz0020r8tk7nvw9gzy"},{"post_id":"cm6xt9rbv000zr8tk6kup8pvg","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rc00022r8tk3svo45q2"},{"post_id":"cm6xt9rbv000zr8tk6kup8pvg","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rc00025r8tkbw189vch"},{"post_id":"cm6xt9rbv0012r8tkes7j10zq","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rc00026r8tkfav157sy"},{"post_id":"cm6xt9rbv0012r8tkes7j10zq","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rc00029r8tk7tyc9la0"},{"post_id":"cm6xt9rbw0016r8tkdqn3gpbr","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rc0002ar8tk0azpct51"},{"post_id":"cm6xt9rbw0016r8tkdqn3gpbr","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rc1002cr8tkdt3e362z"},{"post_id":"cm6xt9rbo0007r8tkh8yaeskj","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rc1002dr8tk9xquecjc"},{"post_id":"cm6xt9rbo0007r8tkh8yaeskj","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rc1002fr8tk9k9i96iq"},{"post_id":"cm6xt9rbw0019r8tkdtr9ezdb","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rc1002gr8tk03fqbvwt"},{"post_id":"cm6xt9rbw0019r8tkdtr9ezdb","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rc1002hr8tk1pya5fap"},{"post_id":"cm6xt9rbp0009r8tkckum3hkv","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rc1002ir8tkbw0p6ldj"},{"post_id":"cm6xt9rbp0009r8tkckum3hkv","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rc1002jr8tkeby51502"},{"post_id":"cm6xt9rbx001gr8tkhwma419j","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rc1002kr8tk5rjbh29e"},{"post_id":"cm6xt9rbx001gr8tkhwma419j","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rc1002lr8tkh4y1fgyg"},{"post_id":"cm6xt9rbq000br8tkddywhoyh","tag_id":"cm6xt9rbn0005r8tk5dn99koa","_id":"cm6xt9rc1002mr8tk1xo51x1q"},{"post_id":"cm6xt9rbq000br8tkddywhoyh","tag_id":"cm6xt9rbq000dr8tk7r2f9wot","_id":"cm6xt9rc1002nr8tkbz75ep1b"},{"post_id":"cm6xt9rbx001dr8tk3acxdpaz","tag_id":"cm6xt9rby001qr8tkanls3qmh","_id":"cm6xt9rc1002or8tkgl1h9sx8"},{"post_id":"cm6xt9rbx001dr8tk3acxdpaz","tag_id":"cm6xt9rbz001wr8tkc31w98u2","_id":"cm6xt9rc1002pr8tk1t3n3uki"},{"post_id":"cm6xt9rby001lr8tk1aifccea","tag_id":"cm6xt9rc00023r8tkbfo2craw","_id":"cm6xt9rc1002qr8tk1ept1sc5"},{"post_id":"cm6xt9rby001lr8tk1aifccea","tag_id":"cm6xt9rc00027r8tk4z8s058h","_id":"cm6xt9rc1002rr8tkcx742dvz"},{"post_id":"cm6xt9rby001or8tk2wfaagi0","tag_id":"cm6xt9rc00023r8tkbfo2craw","_id":"cm6xt9rc1002sr8tkg172cto9"},{"post_id":"cm6xt9rby001or8tk2wfaagi0","tag_id":"cm6xt9rc00027r8tk4z8s058h","_id":"cm6xt9rc1002tr8tk1h9c8id6"}],"Tag":[{"name":"c++","_id":"cm6xt9rbn0005r8tk5dn99koa"},{"name":"PAT","_id":"cm6xt9rbq000dr8tk7r2f9wot"},{"name":"c","_id":"cm6xt9rby001qr8tkanls3qmh"},{"name":"alsa","_id":"cm6xt9rbz001wr8tkc31w98u2"},{"name":"汇编","_id":"cm6xt9rc00023r8tkbfo2craw"},{"name":"操作系统","_id":"cm6xt9rc00027r8tk4z8s058h"}]}}